<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Vue小项目的最佳实践]]></title>
      <url>http://blog.ygxdxx.com/2017/04/13/vue-project-practice/</url>
      <content type="html"><![CDATA[<h1 id="Vue小项目的最佳实践"><a href="#Vue小项目的最佳实践" class="headerlink" title="Vue小项目的最佳实践"></a>Vue小项目的最佳实践</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p> 目前一期只是为App内某个模块资讯模块文章的分享和APP下载，后续还会有更多的功能,为了项目可扩展、可伸缩结合了我以前的实践搭建了此项目<a href="https://github.com/HopeFE/Ant_App_H5" target="_blank" rel="external">项目地址</a>,如果这个简单的项目能给您带来帮助请给小哥哥⭐Star好不好（手动笔芯）。</p>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul>
<li>根据分享出来的文章ID获取数据</li>
<li>在网页内可以打开或者下载该APP</li>
<li>微信平台的特殊处理<ul>
<li>微信平台的屏蔽了scheme,文章页面的打开APP的功能需要出浮窗提示去浏览器中打开</li>
<li>下载APP页面在微信中，IOS可以唤起APP Store,安卓则需要提示浮窗</li>
</ul>
</li>
</ul>
<h2 id="使用技术须知"><a href="#使用技术须知" class="headerlink" title="使用技术须知"></a>使用技术须知</h2><p><code>Vue</code>,<code>VueRouter</code>,<code>Vuex</code>三件套不在多说</p>
<h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>主要用来发起Http请求，想要详细了解具体使用方式和操作指南可以请参考笔者下面的几篇文章<br><a href="https://blog.ygxdxx.com/2017/02/27/Axios-Strategy/">Axios全攻略</a><br><a href="https://blog.ygxdxx.com/2017/02/01/Vuex2&amp;Axios-Develop/">Vuex2和Axios的开发</a><br>注意：因为<code>Axios</code>使用了<code>Promise</code>,适配低版本浏览器 一定要配合使用<code>es6-promise</code></p>
<h3 id="Vuex-router-sync"><a href="#Vuex-router-sync" class="headerlink" title="Vuex-router-sync"></a>Vuex-router-sync</h3><p><a href="https://github.com/vuejs/vuex-router-sync" target="_blank" rel="external">Vuex-router-sync资料</a><br>功能：将Router中的 这些数据注入到Store中，方便我们调用。<br>在此项目中 我用此插件获取URL上的文章ID</p>
<h3 id="Vue-meta"><a href="#Vue-meta" class="headerlink" title="Vue-meta"></a>Vue-meta</h3><p><a href="https://github.com/declandewet/vue-meta.org/zh-cn/index.html" target="_blank" rel="external">Vue-meta资料</a><br>功能：改变网页Head上的一些标签值。<br>在此项目中，我用此插件改变文章页面上的Title，在浏览器中标题不那么木讷。</p>
<h3 id="Mobi-css"><a href="#Mobi-css" class="headerlink" title="Mobi.css"></a>Mobi.css</h3><p><a href="https://peachscript.github.io/vue-infinite-loading" target="_blank" rel="external">Mobi.css资料</a><br>功能：小而精美的手机端CSS布局库<br>在此项目中，不想用太大的UI框架也不想自己写太多的样式，选择了它。</p>
<h3 id="Vue-infinite-loading"><a href="#Vue-infinite-loading" class="headerlink" title="Vue-infinite-loading"></a>Vue-infinite-loading</h3><p><a href="https://peachscript.github.io/vue-infinite-loading" target="_blank" rel="external">Vue-infinite-loading资料</a><br>功能：缓解加载数据时页面空白的尴尬，可自定义loading动画。</p>
<h2 id="关键实现"><a href="#关键实现" class="headerlink" title="关键实现"></a>关键实现</h2><h3 id="URL上获取文章ID"><a href="#URL上获取文章ID" class="headerlink" title="URL上获取文章ID"></a>URL上获取文章ID</h3><p>和APP的同学商量了我们就用<a href="http://xxxx/article/:id的方式去定义分享出去文章地址，页面通过获得URL上的" target="_blank" rel="external">http://xxxx/article/:id的方式去定义分享出去文章地址，页面通过获得URL上的</a><br>ID去请求相对应的数据。我是使用<code>Vuex-router-sync</code>直接从Store中获得ID的<code>rootState.route.params.id</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">// 文件src/modules/action</div><div class="line">/** 获取文章信息 */</div><div class="line">export const getArticle = (&#123; rootState, commit &#125;) =&gt; &#123;</div><div class="line">  return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    axios(&#123;</div><div class="line">      method: &apos;get&apos;,</div><div class="line">      url: &apos;share/news_details&apos;,</div><div class="line">      params: &#123;</div><div class="line">        news_id: rootState.route.params.id</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .then((response) =&gt; &#123;</div><div class="line">      commit(types.ARTICLE, response.data.data)</div><div class="line">      resolve(response)</div><div class="line">    &#125;)</div><div class="line">    .catch((error) =&gt; &#123;</div><div class="line">      reject(error)</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Store中获取环境区别"><a href="#Store中获取环境区别" class="headerlink" title="Store中获取环境区别"></a>Store中获取环境区别</h3><p>在每个页面进行操作时，我们需要鉴别当前系统是IOS或者安卓，每次通过正则去鉴别UA里的字符串太麻烦，所以我将此放到Store中，方便所有的组件使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 文件src/modules/store</div><div class="line">const state = &#123;</div><div class="line">  system: (/iphone|ipad|ipod/.test(navigator.userAgent.toLowerCase()) ? &apos;IOS&apos; : &apos;Android&apos;),</div><div class="line">  article: &#123;&#125;,</div><div class="line">  isWeixin: (/MicroMessenger/ig).test(navigator.userAgent)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="合理的处置异常"><a href="#合理的处置异常" class="headerlink" title="合理的处置异常"></a>合理的处置异常</h3><p>我们去加载数据时可能会遇到失败的情况，这里需要对页面有一个良好的处理，这里我主要使用<code>Vue-infinite-loading</code>去实现页面上的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">_onInfinite () &#123;</div><div class="line">  this.getArticle().then(() =&gt; &#123;</div><div class="line">    // 完成之后loading消失 </div><div class="line">    this.$refs.infiniteLoading.$emit(&apos;$InfiniteLoading:loaded&apos;)</div><div class="line">    this.$refs.infiniteLoading.$emit(&apos;$InfiniteLoading:complete&apos;)</div><div class="line">  &#125;)</div><div class="line">  .catch(() =&gt; &#123;</div><div class="line">    // 异常之后页面的展示  执行下方slot=&quot;no-results&quot;部分</div><div class="line">    this.$refs.infiniteLoading.$emit(&apos;$InfiniteLoading:complete&apos;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;infinite-loading :on-infinite=&quot;_onInfinite&quot; ref=&quot;infiniteLoading&quot; spinner=&quot;bubbles&quot;&gt;</div><div class="line">  &lt;span slot=&quot;no-results&quot;&gt;好像来到了奇怪的地方~&lt;/span&gt;</div><div class="line">  &lt;span slot=&quot;no-more&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;/infinite-loading&gt;</div></pre></td></tr></table></figure>
<h3 id="keep-alive组件复用"><a href="#keep-alive组件复用" class="headerlink" title="keep-alive组件复用"></a>keep-alive组件复用</h3><p>这是一个很能提高页面性能的标签，会将已使用过的不活动的组件缓存起来而不是销毁。在性能不太好的手机上，模版的渲染也是需要一定时间的，我们可以用这个标签将缓存曾经使用过的组件（页面），在此组件激活时刷新里面的数据即可。激活时使用<a href="https://vuefe.cn/v2/api/#activated" target="_blank" rel="external">activated</a>这个生命周期<br><img src="http://okkula0y9.bkt.clouddn.com/20170413.jpg" alt="activated"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">activated () &#123;</div><div class="line">  this.clearArticle() //激活时先清除Store中的数据 因为$InfiniteLoading是根据页面高度来发起请求的</div><div class="line">  this.$refs.infiniteLoading.$emit(&apos;$InfiniteLoading:reset&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="组件代码的规范"><a href="#组件代码的规范" class="headerlink" title="组件代码的规范"></a>组件代码的规范</h3><blockquote>
<p>始终基于模块的方式来构建你的 app，每一个子模块只做一件事情。<br>Vue.js 的设计初衷就是帮助开发者更好的开发界面模块。一个模块是应用程序中独立的一个部分。</p>
</blockquote>
<p>我们需要将我们<code>*.vue</code>文件按照一定的结构组织，使得组件便于理解，主要有以下几点比较重要：</p>
<ul>
<li>导出一个清晰、组织有序的组件，使得代码易于阅读和理解。同时也便于标准化。</li>
<li>按首字母排序属性，data, computed, watches 和 methods 使得属性便于查找。</li>
<li>合理组织，使得组件易于阅读。(name; extends; props, data and computed; components; watch and methods; lifecycle methods, 等.);</li>
<li>使用 name 属性。借助于vue devtools可以让你更方便的测试</li>
<li>合理的 CSS 结构，如 BEM 或 rscss - 详情?;</li>
<li>使用单文件 .vue 文件格式来组件代码</li>
</ul>
<p>同时配合<code>ESLint</code>将代码写的更加规范和阅读，我这边使用<code>Standard</code>的风格，在VScode中也开启了Standard的验证。<br><a href="http://eslint.org/" target="_blank" rel="external">ESLint官网</a><br><a href="https://github.com/feross/standard/blob/master/docs/README-zhcn.md" target="_blank" rel="external">JavaScript 代码规范-Standard风格</a><br>组件规范也可以参考笔者这篇：<a href="https://blog.ygxdxx.com/2017/03/09/Vuejs-Component-Style-Guide/">Vue.js 组件编码规范</a></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>看起来此项目简单，实则上用了不少插件去实现需要较强的动手（第三方坑也多，选择一个好的插件得先去github上看看，作者的代码质量），需要保持一定的弹性方便日后的扩展也要避免过度的设计。大家若想要加速自己的开发速度，可以多逛逛<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="external">Vue awesome</a>上看看大多数都是高质量的插件，其实很多轮子都有人造好了，选取好的直接拿来用岂不妙哉？</p>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue.js 组件编码规范]]></title>
      <url>http://blog.ygxdxx.com/2017/03/09/Vuejs-Component-Style-Guide/</url>
      <content type="html"><![CDATA[<blockquote>
<p>国外友人总结的Vue.Js组件规范,原文地址：<a href="https://github.com/pablohpsilva/vuejs-component-style-guide/blob/master/README-CN.md#%E7%9B%AE%E5%BD%95" target="_blank" rel="external">pablohpsilva/vuejs-component-style-guide</a></p>
</blockquote>
<h1 id="Vue-js-组件编码规范"><a href="#Vue-js-组件编码规范" class="headerlink" title="Vue.js 组件编码规范"></a>Vue.js 组件编码规范</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>本规范提供了一种统一的编码规范来编写 <a href="http://vuejs.org/" target="_blank" rel="external">Vue.js</a> 代码。这使得代码具有如下的特性：</p>
<ul>
<li>其它开发者或是团队成员更容易阅读和理解。</li>
<li>IDEs 更容易理解代码，从而提供高亮、格式化等辅助功能</li>
<li>更容易使用现有的工具</li>
<li>更容易实现缓存以及代码包的分拆</li>
</ul>
<p>本指南为 <a href="https://github.com/voorhoede" target="_blank" rel="external">De Voorhoede</a> 参考 <a href="https://github.com/voorhoede/riotjs-style-guide" target="_blank" rel="external">RiotJS 编码规范</a> 而写。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#基于模块开发">基于模块开发</a></li>
<li><a href="#vue-组件命名">vue 组件命名</a><!-- * [使用 `*.vue` 扩展名](#使用-vue-后缀作为扩展名) --> </li>
<li><a href="#组件表达式简单化">组件表达式简单化</a></li>
<li><a href="#组件-props-原子化">组件 props 原子化</a></li>
<li><a href="#验证组件的-props">验证组件的 props</a></li>
<li><a href="#将-this-赋值给-component-变量">将 <code>this</code> 赋值给 <code>component</code> 变量</a></li>
<li><a href="#组件结构化">组件结构化</a></li>
<li><a href="#组件事件命名">组件事件命名</a></li>
<li><a href="#避免-this.$parent">避免 <code>this.$parent</code></a></li>
<li><a href="#谨慎使用-this.$refs">谨慎使用 <code>this.$refs</code></a></li>
<li><a href="#使用组件名作为样式作用域空间">使用组件名作为样式作用域空间</a></li>
<li><a href="#提供组件-api-文档">提供组件 API 文档</a></li>
<li><a href="#提供组件-demo">提供组件 demo</a></li>
<li><a href="#对组件文件进行代码校验">对组件文件进行代码校验</a><!-- * [为你的项目添加徽章标识](#为你的项目添加徽章标识) -->
</li>
</ul>
<h2 id="基于模块开发"><a href="#基于模块开发" class="headerlink" title="基于模块开发"></a>基于模块开发</h2><p>始终基于模块的方式来构建你的 app，每一个子模块只做一件事情。</p>
<p>Vue.js 的设计初衷就是帮助开发者更好的开发界面模块。一个模块是应用程序中独立的一个部分。</p>
<h3 id="怎么做？"><a href="#怎么做？" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>每一个 Vue 组件(等同于模块)<a href="(https://addyosmani.com/first/">首先</a>)必须专注于解决一个<a href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="external">单一的问题</a>，<em>独立的</em>, <em>可复用的</em>, <em>微小的</em> and <em>可测试的</em>。</p>
<p>如果你的组件做了太多的事或是变得臃肿，请将其拆分成更小的组件并保持单一的原则。一般来说，尽量保证每一个文件的代码行数不要超过 100 行。也请保证组件可独立的运行。比较好的做法是增加一个单独的 demo 示例。</p>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="Vue-组件命名"><a href="#Vue-组件命名" class="headerlink" title="Vue 组件命名"></a>Vue 组件命名</h2><p>组件的命名需遵从以下原则：</p>
<ul>
<li><strong>有意义的</strong>: 不过于具体，也不过于抽象</li>
<li><strong>简短</strong>: 2 到 3 个单词</li>
<li><strong>具有可读性</strong>: 以便于沟通交流</li>
</ul>
<p>同时还需要注意：</p>
<ul>
<li>必须符合<strong>自定义元素规范</strong>: <a href="https://www.w3.org/TR/custom-elements/#concepts" target="_blank" rel="external">使用连字符</a>分隔单词，切勿使用保留字。</li>
<li><strong><code>app-</code> 前缀作为命名空间</strong>: 如果非常通用的话可使用一个单词来命名，这样可以方便于其它项目里复用。</li>
</ul>
<h3 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>组件是通过组件名来调用的。所以组件名必须简短、富有含义并且具有可读性。</li>
</ul>
<h3 id="如何做？"><a href="#如何做？" class="headerlink" title="如何做？"></a>如何做？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">user-list</span>&gt;</span><span class="tag">&lt;/<span class="name">user-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">range-slider</span>&gt;</span><span class="tag">&lt;/<span class="name">range-slider</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 避免 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">btn-group</span>&gt;</span><span class="tag">&lt;/<span class="name">btn-group</span>&gt;</span> <span class="comment">&lt;!-- 虽然简短但是可读性差. 使用 `button-group` 替代 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ui-slider</span>&gt;</span><span class="tag">&lt;/<span class="name">ui-slider</span>&gt;</span> <span class="comment">&lt;!-- ui 前缀太过于宽泛，在这里意义不明确 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">slider</span>&gt;</span><span class="tag">&lt;/<span class="name">slider</span>&gt;</span> <span class="comment">&lt;!-- 与自定义元素规范不兼容 --&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="组件表达式简单化"><a href="#组件表达式简单化" class="headerlink" title="组件表达式简单化"></a>组件表达式简单化</h2><p>Vue.js 的表达式是 100% 的 Javascript 表达式。这使得其功能性很强大，但也带来潜在的复杂性。因此，你应该尽量<strong>保持表达式的简单化</strong>。</p>
<h3 id="为什么？-1"><a href="#为什么？-1" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>复杂的行内表达式难以阅读。</li>
<li>行内表达式是不能够通用的，这可能会导致重复编码的问题。</li>
<li>IDE 基本上不能识别行内表达式语法，所以使用行内表达式 IDE 不能提供自动补全和语法校验功能。</li>
</ul>
<h3 id="怎么做？-1"><a href="#怎么做？-1" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>如果你发现写了太多复杂并难以阅读的行内表达式，那么可以使用 method 或是 computed 属性来替代其功能。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">    &#123;&#123; `$&#123;year&#125;-$&#123;month&#125;` &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">  export default &#123;</div><div class="line">    computed: &#123;</div><div class="line">      month() &#123;</div><div class="line">        return this.twoDigits((new Date()).getUTCMonth() + 1);</div><div class="line">      &#125;,</div><div class="line">      year() &#123;</div><div class="line">        return (new Date()).getUTCFullYear();</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      twoDigits(num) &#123;</div><div class="line">        return ('0' + num).slice(-2);</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 避免 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">    &#123;&#123; `$&#123;(new Date()).getUTCFullYear()&#125;-$&#123;('0' + ((new Date()).getUTCMonth()+1)).slice(-2)&#125;` &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h3 id="组件-props-原子化"><a href="#组件-props-原子化" class="headerlink" title="组件 props 原子化"></a>组件 props 原子化</h3><p>虽然 Vue.js 支持传递复杂的 JavaScript 对象通过 props 属性，但是你应该尽可能的使用原始类型的数据。尽量只使用<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="external">JavaScript 原始类型</a>(字符串、数字、布尔值) 和 函数。尽量避免复杂的对象。</p>
<h3 id="为什么？-2"><a href="#为什么？-2" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>使得组件 API 清晰直观</li>
<li>只使用原始类型和函数作为 props 使得组件的 API 更接近于 HTML(5) 原生元素。</li>
<li>其它开发者更好的理解每一个 prop 的含义，作用</li>
<li>传递过于复杂的对象使得我们不能够清楚的知道哪些属性或方法被自定义组件使用，这使得代码难以重构和维护。</li>
</ul>
<h3 id="怎么做？-2"><a href="#怎么做？-2" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>组件的每一个属性单独使用一个 props，并且使用函数或是原始类型的值。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 推荐 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">range-slider</span></span></div><div class="line">  <span class="attr">:values</span>=<span class="string">"[10, 20]"</span></div><div class="line">  <span class="attr">min</span>=<span class="string">"0"</span></div><div class="line">  <span class="attr">max</span>=<span class="string">"100"</span></div><div class="line">  <span class="attr">step</span>=<span class="string">"5"</span></div><div class="line">  <span class="attr">:on-slide</span>=<span class="string">"updateInputs"</span></div><div class="line">  <span class="attr">:on-end</span>=<span class="string">"updateResults"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">range-slider</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 避免 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">range-slider</span> <span class="attr">:config</span>=<span class="string">"complexConfigObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">range-slider</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="验证组件的-props"><a href="#验证组件的-props" class="headerlink" title="验证组件的 props"></a>验证组件的 props</h2><p>在 Vue.js 中，组件的 props 即 API，一个稳定并可预测的 API 会使得你的组件更容易被其他开发者使用。</p>
<p>组件 props 通过自定义标签的属性来传递。属性的值可以是 Vue.js 字符串(<code>:attr=&quot;value&quot;</code> 或 <code>v-bind:attr=&quot;value&quot;</code>)或是不传。你需要保证组件的 props 能应对不同的情况。</p>
<h3 id="为什么？-3"><a href="#为什么？-3" class="headerlink" title="为什么？"></a>为什么？</h3><p>验证组件 props 可以保证你的组件永远是可用的(防御性编程)。即使其他开发者并未按照你预想的方法使用时也不会出错。</p>
<h3 id="怎么做？-3"><a href="#怎么做？-3" class="headerlink" title="怎么做？"></a>怎么做？</h3><ul>
<li>提供默认值</li>
<li>使用 <code>type</code> 属性<a href="http://vuejs.org/v2/guide/components.html#Prop-Validation" target="_blank" rel="external">校验类型</a></li>
<li>使用 props 之前先检查该 prop 是否存在</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">v-model</span>=<span class="string">"value"</span> <span class="attr">:max</span>=<span class="string">"max"</span> <span class="attr">:min</span>=<span class="string">"min"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">  export default &#123;</div><div class="line">    props: &#123;</div><div class="line">      max: &#123;</div><div class="line">        type: Number, // 这里添加了数字类型的校验</div><div class="line">        default() &#123; return 10; &#125;,</div><div class="line">      &#125;,</div><div class="line">      min: &#123;</div><div class="line">        type: Number,</div><div class="line">        default() &#123; return 0; &#125;,</div><div class="line">      &#125;,</div><div class="line">      value: &#123;</div><div class="line">        type: Number,</div><div class="line">        default() &#123; return 4; &#125;,</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="将-this-赋值给-component-变量"><a href="#将-this-赋值给-component-变量" class="headerlink" title="将 this 赋值给 component 变量("></a>将 <code>this</code> 赋值给 <code>component</code> 变量(</h2><p>在 Vue.js 组件上下文中，<code>this</code>指向了组件实例。因此当你切换到了不同的上下文时，要确保 <code>this</code> 指向一个可用的 <code>component</code> 变量。</p>
<p>换句话说，不要在编写这样的代码 <code>const self = this;</code> ，而是应该直接使用变量 <code>component</code>。</p>
<h3 id="为什么？-4"><a href="#为什么？-4" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>将组件 <code>this</code> 赋值给变量 <code>component</code>可用让开发者清楚的知道任何一个被使用的地方，它代表的是组件实例。</li>
</ul>
<h3 id="怎么做？-4"><a href="#怎么做？-4" class="headerlink" title="怎么做？"></a>怎么做？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">export default &#123;</div><div class="line">  methods: &#123;</div><div class="line">    hello() &#123;</div><div class="line">      return 'hello';</div><div class="line">    &#125;,</div><div class="line">    printHello() &#123;</div><div class="line">      console.log(this.hello());</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 避免 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">export default &#123;</div><div class="line">  methods: &#123;</div><div class="line">    hello() &#123;</div><div class="line">      return 'hello';</div><div class="line">    &#125;,</div><div class="line">    printHello() &#123;</div><div class="line">      const self = this; // 没有必要</div><div class="line">      console.log(self.hello());</div><div class="line">    &#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="组件结构化"><a href="#组件结构化" class="headerlink" title="组件结构化"></a>组件结构化</h2><p>按照一定的结构组织，使得组件便于理解。</p>
<h3 id="为什么？-5"><a href="#为什么？-5" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>导出一个清晰、组织有序的组件，使得代码易于阅读和理解。同时也便于标准化。</li>
<li>按首字母排序属性，data, computed, watches 和 methods 使得属性便于查找。</li>
<li>合理组织，使得组件易于阅读。(name; extends; props, data and computed; components; watch and methods; lifecycle methods, 等.);</li>
<li>使用 <code>name</code> 属性。借助于<a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=en" target="_blank" rel="external">vue devtools</a>可以让你更方便的测试</li>
<li>合理的 CSS 结构，如 <a href="https://medium.com/tldr-tech/bem-blocks-elements-and-modifiers-6b3b0af9e3ea#.bhnomd7gw" target="_blank" rel="external">BEM</a> 或 <a href="https://github.com/rstacruz/rscss" target="_blank" rel="external">rscss</a> - <a href="#使用组件名作为样式作用域空间">详情?</a>;</li>
<li>使用单文件 .vue 文件格式来组件代码</li>
</ul>
<h3 id="怎么做？-5"><a href="#怎么做？-5" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>组件结构化</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Ranger__Wrapper"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">  export default &#123;</div><div class="line">    // 不要忘记了 name 属性</div><div class="line">    name: 'RangeSlider',</div><div class="line">    // 组合其它组件</div><div class="line">    extends: &#123;&#125;,</div><div class="line">    // 组件属性、变量</div><div class="line">    props: &#123;</div><div class="line">      bar: &#123;&#125;, // 按字母顺序</div><div class="line">      foo: &#123;&#125;,</div><div class="line">      fooBar: &#123;&#125;,</div><div class="line">    &#125;,</div><div class="line">    // 变量</div><div class="line">    data() &#123;&#125;,</div><div class="line">    computed: &#123;&#125;,</div><div class="line">    // 使用其它组件</div><div class="line">    components: &#123;&#125;,</div><div class="line">    // 方法</div><div class="line">    watch: &#123;&#125;,</div><div class="line">    methods: &#123;&#125;,</div><div class="line">    // 生命周期函数</div><div class="line">    beforeCreate() &#123;&#125;,</div><div class="line">    mounted() &#123;&#125;,</div><div class="line">&#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">  .Ranger__Wrapper &#123; /* ... */ &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="组件事件命名"><a href="#组件事件命名" class="headerlink" title="组件事件命名"></a>组件事件命名</h2><p>Vue.js 提供的处理函数和表达式都是绑定在 ViewModel 上的，组件的每一个事件都应该按照一个好的命名规范来，这样可以避免不少的开发问题，具体可见如下 <strong> 为什么</strong>。</p>
<h3 id="为什么？-6"><a href="#为什么？-6" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>开发者可以随意给事件命名，即使是原生事件的名字，这样会带来迷惑性。</li>
<li>过于宽松的事件命名可能与<a href="https://vuejs.org/v2/guide/components.html#DOM-Template-Parsing-Caveats" target="_blank" rel="external">DOM模板不兼容</a>。</li>
</ul>
<h3 id="怎么做？-6"><a href="#怎么做？-6" class="headerlink" title="怎么做？"></a>怎么做？</h3><ul>
<li>事件命名也连字符命名</li>
<li>一个事件的名字对应组件外的一组意义操作，如：upload-success, upload-error 以及 dropzone-upload-success, dropzone-upload-error (如果需要前缀的话)。</li>
<li>事件命名应该以动词(如 client-api-load) 或是 形容词(如 drive-upload-success)结尾。(<a href="https://github.com/GoogleWebComponents/style-guide#events" target="_blank" rel="external">出处</a>)</li>
</ul>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="避免-this-parent"><a href="#避免-this-parent" class="headerlink" title="避免 this.$parent"></a>避免 this.$parent</h2><p>Vue.js 支持组件嵌套，并且子组件可访问父组件的上下文。访问组件之外的上下文违反了<a href="基于模块开发">基于模块开发</a>的<a href="https://addyosmani.com/first/" target="_blank" rel="external">第一原则</a>。因此你应该尽量避免使用 <strong><code>this.$parent</code></strong>。</p>
<h3 id="为什么？-7"><a href="#为什么？-7" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>组件必须相互保持独立，Vue 组件也是。如果组件需要访问其父层的上下文就违反了该原则。</li>
<li>如果一个组件需要访问其父组件的上下文，那么该组件将不能再其它上下文中复用。</li>
</ul>
<h3 id="怎么做？-7"><a href="#怎么做？-7" class="headerlink" title="怎么做？"></a>怎么做？</h3><ul>
<li>通过 props 将值传递给子组件</li>
<li>通过 props 传递回调函数给子组件来达到调用父组件方法的目的</li>
<li>通过在子组件触发事件来通知父组件</li>
</ul>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="谨慎使用-this-refs"><a href="#谨慎使用-this-refs" class="headerlink" title="谨慎使用 this.$refs"></a>谨慎使用 this.$refs</h2><p>Vue.js 支持通过 <code>ref</code> 属性来访问其它组件和 HTML 元素。并通过 <code>this.$refs</code> 可以得到组件或 HTML 元素的上下文。在大多数情况下，通过 <code>this.$refs</code>来访问其它组件的上下文是可以避免的。在使用的的时候你需要注意避免调用了不恰当的组件 API，所以应该尽量避免使用 <code>this.$refs</code>。</p>
<h3 id="为什么？-8"><a href="#为什么？-8" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>组件必须是保持独立的，如果一个组件的 API 不能够提供所需的功能，那么这个组件在设计、实现上是有问题的。</li>
<li>组件的属性和事件必须足够的给大多数的组件使用</li>
</ul>
<h3 id="怎么做？-8"><a href="#怎么做？-8" class="headerlink" title="怎么做？"></a>怎么做？</h3><ul>
<li>提供良好的组件 API</li>
<li>总是关注于组件本身的目的</li>
<li>拒绝定制代码。如果你在一个通用的组件内部编写特定需求的代码，那么代表这个组件的 API 不够通用，或者你可能需要一个新的组件来应对该需求</li>
<li>检查所有的 props 是否有缺失的，如果有提一个 issue 或是完善这个组件</li>
<li>检查所有的事件。子组件向父组件通信一般是通过事件来实现的，但是大多数的开发者更多的关注于 props 从忽视了这点。</li>
<li><strong>Props向下传递，事件向上传递！</strong>。以此为目标升级你的组件，提供良好的 API 和 独立性。</li>
<li>当遇到 props 和 events 难以实现的功能时，通过 <code>this.$refs</code>来实现。</li>
<li>当需要操作 DOM 无法通过指令来做的时候可使用 <code>this..$ref</code> 而不是 <code>JQuery</code>, <code>document.getElement*</code>, <code>document.queryElement</code>。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 推荐，并未使用 this.$refs --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">range</span> <span class="attr">:max</span>=<span class="string">"max"</span></span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  @<span class="attr">current-value</span>=<span class="string">"currentValue"</span></div><div class="line">  <span class="attr">:step</span>=<span class="string">"1"</span>&gt;<span class="tag">&lt;/<span class="name">range</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 使用 this.$refs 的适用情况--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">modal</span> <span class="attr">ref</span>=<span class="string">"basicModal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Basic Modal<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"$refs.basicModal.close()"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">modal</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$refs.basicModal.open()"</span>&gt;</span>Open modal<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Modal component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"active"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- ... --&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  export default &#123;</div><div class="line">    // ...</div><div class="line">    data() &#123;</div><div class="line">        return &#123;</div><div class="line">            active: false,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    methods: &#123;</div><div class="line">      open() &#123;</div><div class="line">        this.active = true;</div><div class="line">      &#125;,</div><div class="line">      hide() &#123;</div><div class="line">        this.active = false;</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">    // ...</div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 如果可通过 emited 来做则避免通过 this.$refs 直接访问 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">range</span> <span class="attr">:max</span>=<span class="string">"max"</span></span></div><div class="line">    <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">    <span class="attr">ref</span>=<span class="string">"range"</span></div><div class="line">    <span class="attr">:step</span>=<span class="string">"1"</span>&gt;<span class="tag">&lt;/<span class="name">range</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line">  export default &#123;</div><div class="line">    // ...</div><div class="line">    methods: &#123;</div><div class="line">      getRangeCurrentValue() &#123;</div><div class="line">        return this.$refs.range.currentValue;</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">    // ...</div><div class="line">  &#125;;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="使用组件名作为样式作用域空间"><a href="#使用组件名作为样式作用域空间" class="headerlink" title="使用组件名作为样式作用域空间"></a>使用组件名作为样式作用域空间</h2><p>Vue.js 的组件是自定义元素，这非常适合用来作为样式的根作用域空间。可以将组件名作为 css 类的命名空间。</p>
<h3 id="为什么？-9"><a href="#为什么？-9" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>给样式加上作用域空间可以避免组件样式影响外部的样式</li>
<li>保持模块名、目录名、样式根作用域名一样，可以很好的将其关联起来，便于开发者理解。</li>
</ul>
<h3 id="怎么做？-9"><a href="#怎么做？-9" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>使用组件名作为样式命名的前缀，可基于 BEM 或 OOCSS 范式。同时给style标签加上 scoped 属性。加上 scoped 属性编译后会给组件的 class 自动加上唯一的前缀从而避免样式的冲突。 </p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">  /* 推荐 */</div><div class="line">  .MyExample &#123; &#125;</div><div class="line">  .MyExample li &#123; &#125;</div><div class="line">  .MyExample__item &#123; &#125;</div><div class="line"></div><div class="line">  /* 避免 */</div><div class="line">  .My-Example &#123; &#125; /* not scoped to component or module name, not BEM compliant */</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="提供组件-API-文档"><a href="#提供组件-API-文档" class="headerlink" title="提供组件 API 文档"></a>提供组件 API 文档</h2><p>使用 Vue.js 组件的过程中会创建 Vue 组件实例，这个实例是通过自定义属性配置的。为了便于其他开发者使用该组件，对于这些自定义属性即组件API应该在 <code>README.md</code> 文件中进行说明。</p>
<h2 id="为什么？-10"><a href="#为什么？-10" class="headerlink" title="为什么？"></a>为什么？</h2><ul>
<li>良好的文档可以让开发者比较容易的对组件有一个整体的认识，而不用去阅读组件的源码，也更方便开发者使用</li>
<li>组件配置属性即组件的 API，对于组件的用户来说他们更感兴趣的是 API 而不是实现原理。</li>
<li>正式的文档会告诉开发者组件 API 变更以及向后的兼容性情况</li>
<li><code>README.md</code> 是标准的我们应该首先阅读的文档文件。代码托管网站 (github/bitbucket/gitlab 等) 会默认在仓库中展示 该文件作为仓库的介绍。</li>
</ul>
<h3 id="怎么做？-10"><a href="#怎么做？-10" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>在模块目录中添加 <code>README.md</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">range-slider/</div><div class="line">├── range-slider.vue</div><div class="line">├── range-slider.less</div><div class="line">└── README.md</div></pre></td></tr></table></figure>
<p>在 README 文件中说明模块的功能以及使用场景。对于 vue 组件来说，比较有用的描述是组件的自定义属性即 API 的描述介绍。</p>
<h1 id="Range-slider"><a href="#Range-slider" class="headerlink" title="Range slider"></a>Range slider</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>range slider 组件可通过拖动的方式来设置一个给定范围内的数值。</p>
<p>该模块使用 <a href="http://refreshless.com/nouislider/" target="_blank" rel="external">noUiSlider</a> 来实现夸浏览器和 touch 功能的支持。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p><code>&lt;range-slider&gt;</code> 支持如下的自定义属性：</p>
<table>
<thead>
<tr>
<th>attribute</th>
<th>type</th>
<th>description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>可拖动的最小值.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>可拖动的最大值.</td>
</tr>
<tr>
<td><code>values</code></td>
<td>Number[] <em>optional</em></td>
<td>包含最大值和最小值的数组.  如. <code>values=&quot;[10, 20]&quot;</code>. Defaults to <code>[opts.min, opts.max]</code>.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number <em>optional</em></td>
<td>增加减小的数值单位，默认为 1.</td>
</tr>
<tr>
<td><code>on-slide</code></td>
<td>Function <em>optional</em></td>
<td>用户拖动开始按钮或者结束按钮时的回调函数，函数接受 <code>(values, HANDLE)</code> 格式的参数。 如： <code>on-slide={ updateInputs }</code>,  <code>component.updateInputs = (values, HANDLE) =&gt; { const value = values[HANDLE]; }</code>.</td>
</tr>
<tr>
<td><code>on-end</code></td>
<td>Function <em>optional</em></td>
<td>当用户停止拖动时触发的回调函数，函数接受 <code>(values, HANDLE)</code> 格式的参数。</td>
</tr>
</tbody>
</table>
<p>如需要自定义 slider 的样式可参考 <a href="(http://refreshless.com/nouislider/more/#section-styling">noUiSlider 文档</a>)</p>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="提供组件-demo"><a href="#提供组件-demo" class="headerlink" title="提供组件 demo"></a>提供组件 demo</h2><p>添加 <code>index.html</code> 文件作为组件的 demo 示例，并提供不同配置情况的效果，说明组件是如何使用的。</p>
<h3 id="为什么？-11"><a href="#为什么？-11" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>demo 可以说明组件是独立可使用的</li>
<li>demo 可以让开发者预览组件的功能效果</li>
<li>demo 可以展示组件各种配置参数下的功能</li>
</ul>
<p><a href="#目录">↑ 回到目录</a></p>
<h2 id="对组件文件进行代码校验"><a href="#对组件文件进行代码校验" class="headerlink" title="对组件文件进行代码校验"></a>对组件文件进行代码校验</h2><p>代码校验可以保持代码的统一性以及追踪语法错误。.vue 文件可以通过使用 <code>eslint-plugin-html</code>插件来校验代码。你可以通过 <code>vue-cli</code> 来开始你的项目，<code>vue-cli</code> 默认会开启代码校验功能。</p>
<h3 id="为什么？-12"><a href="#为什么？-12" class="headerlink" title="为什么？"></a>为什么？</h3><ul>
<li>保证所有的开发者使用同样的编码规范。</li>
<li>更早的感知到语法错误</li>
</ul>
<h3 id="怎么做？-11"><a href="#怎么做？-11" class="headerlink" title="怎么做？"></a>怎么做？</h3><p>为了校验工具能够校验 <code>*.vue</code>文件，你需要将代码编写在 <code>&lt;script&gt;</code>标签中，并使<a href="#保持组件表达式简单化">组件表达式简单化</a>，因为校验工具无法理解行内表达式，配置校验工具可以访问全局变量 <code>vue</code> 和组件的 <code>props</code>。</p>
<h4 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h4><p><a href="http://eslint.org/" target="_blank" rel="external">ESLint</a> 需要通过 <a href="https://github.com/BenoitZugmeyer/eslint-plugin-html#eslint-plugin-html" target="_blank" rel="external">ESLint HTML 插件</a>来抽取组件中的代码。</p>
<p>通过 <code>.eslintrc</code> 文件来配置 ESlint，这样 IED 可以更好的理解校验配置项。 ESlint，这样.</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"extends"</span>: <span class="string">"eslint:recommended"</span>,</div><div class="line">  <span class="attr">"plugins"</span>: [<span class="string">"html"</span>],</div><div class="line">  <span class="attr">"env"</span>: &#123;</div><div class="line">    <span class="attr">"browser"</span>: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"globals"</span>: &#123;</div><div class="line">    <span class="attr">"opts"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"vue"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行 ESLint </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eslint src/**/*.vue</div></pre></td></tr></table></figure>
<h4 id="JSHint"><a href="#JSHint" class="headerlink" title="JSHint"></a>JSHint</h4><p><a href="http://jshint.com/" target="_blank" rel="external">JSHint</a> 可以解析 HTML (使用 <code>--extra-ext</code>命令参数) 和 抽取代码（使用 <code>--extract=auto</code>命令参数).</p>
<p>通过 <code>.jshintrc</code> 文件来配置 ESlint，这样 IED 可以更好的理解校验配置项。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"browser"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"predef"</span>: [<span class="string">"opts"</span>, <span class="string">"vue"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行 JSHint<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jshint --config modules/.jshintrc --extra-ext=html --extract=auto modules/</div></pre></td></tr></table></figure></p>
<p>注：JSHint 不接受 <code>vue</code> 扩展名的文件，只支持 <code>html</code>。</p>
<p><a href="#目录">↑ 回到目录</a></p>
<hr>
<h3 id="如何提供帮助？"><a href="#如何提供帮助？" class="headerlink" title="如何提供帮助？"></a>如何提供帮助？</h3><p>Fork 和 提 PR 以帮助我们改进或者可以给我们提 <a href="https://github.com/pablohpsilva/vuejs-component-style-guide/issues/new" target="_blank" rel="external">Issue</a>.</p>
<h2 id="译者"><a href="#译者" class="headerlink" title="译者"></a>译者</h2><ul>
<li><a href="https://github.com/xiaofuzi" target="_blank" rel="external">杨小福</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vue组件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue2全家桶与微信开发]]></title>
      <url>http://blog.ygxdxx.com/2017/03/06/Vue2&amp;Weixin-Develop/</url>
      <content type="html"><![CDATA[<blockquote>
<p>此项目本身有一个APP了，为了方便将APP和微信端数据打通，需要用户微信和APP用户绑定。在开发的过程中单页面的模式在微信JS API的配置踩了很多坑，特别是IOS。由于本人表述能力和篇幅有限Orz，这里只介绍关键的实现步骤和代码，有些安全的地方和路由地方处理当时比较暴力没有细化，还望交流指导。</p>
</blockquote>
<h1 id="Vue2全家桶与微信开发"><a href="#Vue2全家桶与微信开发" class="headerlink" title="Vue2全家桶与微信开发"></a>Vue2全家桶与微信开发</h1><h2 id="阅读需知"><a href="#阅读需知" class="headerlink" title="阅读需知"></a>阅读需知</h2><ul>
<li>默认您已经了解了微信授权登陆、微信JS API配置及微信支付的整体流程<a href="https://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html" target="_blank" rel="external">微信帮助文档</a></li>
<li>Vue2.0（<a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">Vue</a>、<a href="http://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">VueRouter</a>、<a href="http://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Vuex</a>）全家桶基本知识，能熟悉70%以上的API</li>
<li><a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">Axios</a>（Http请求组件）的基础知识（若不熟悉的可以看笔者的这2篇文章<a href="https://blog.ygxdxx.com/2017/02/27/Axios-Strategy/">axios全攻略</a>,<a href="https://blog.ygxdxx.com/2017/02/01/Vuex2&amp;Axios-Develop/">Vuex2和Axios的配合</a>）</li>
</ul>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul>
<li>移动前端Vue组件库<a href="https://vux.li/#/" target="_blank" rel="external">Vux</a></li>
<li><a href="http://cn.vuejs.org/guide/" target="_blank" rel="external">Vue</a>、<a href="http://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">VueRouter</a>、<a href="http://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Vuex</a>Vue三件套</li>
<li>路由和Vuex同步组件<a href="https://github.com/vuejs/vuex-router-sync" target="_blank" rel="external">Vuex-router-sync</a></li>
</ul>
<p><strong>VueRouter选用的是Hash模式，避免每次都需要去注册WxConfig</strong></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、有些页面比如下单页面是不能分享的，在JS API内要配置该页面分享的是一个可以通过访问的页面如系统首页<br>2、该系统主要是在微信中应用的，在授权登录时，授权登陆页面会判断是否是微信内核（不得不说这节省了我一大笔开发，没有权限的时候直接往这跳就好了。简单暴力）<br>3、每个关键点都能引申很多的知识，这里篇幅有限，不在详细介绍</p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="技术点"><a href="#技术点" class="headerlink" title="技术点"></a>技术点</h2><ol>
<li>用户授权登陆，服务端从授权页面获取到OpenId（加密处理过的）后打开一个特定的URL（前端提供功能保存OPENID，回跳）,此页面从URL上取到URL在保存在Store中。</li>
<li>分享出去的页面最好都配授权页面登陆页面，在授权登陆页面的URL上可以配置自己需要回跳的页面，方便服务端有针对性的二次跳转。</li>
<li>接口返回状态码若为401，则表示没有权限，在Axios内跳转到登陆页面</li>
<li>若检测到系统内没有OpenId则跳转到授权登陆页面（防止有人把URL复制出去分享在微信中打开报错）</li>
</ol>
<h2 id="登陆逻辑流程图"><a href="#登陆逻辑流程图" class="headerlink" title="登陆逻辑流程图"></a>登陆逻辑流程图</h2><p><img src="http://okkula0y9.bkt.clouddn.com/wvue17_3_5.jpg" alt="此处输入图片的描述"></p>
<h1 id="关键技术点"><a href="#关键技术点" class="headerlink" title="关键技术点"></a>关键技术点</h1><h2 id="授权登陆网址"><a href="#授权登陆网址" class="headerlink" title="授权登陆网址"></a>授权登陆网址</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&amp;</div><div class="line">redirect_uri=http%3a%2f%2fpeifei.xxxx.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.xxx.com/index&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect</div></pre></td></tr></table></figure>
<p>网址需要实现的功能：</p>
<ul>
<li>获得OPENID传给前端(后端实现)</li>
<li>授权登陆后能跳转到想去的页面（后端跳转后前端路由控制）</li>
</ul>
<h2 id="从URL上获取OPENID"><a href="#从URL上获取OPENID" class="headerlink" title="从URL上获取OPENID"></a>从URL上获取OPENID</h2><p><strong>vue-router和vuex的共同作用</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../../store'</span>     <span class="comment">//从根目录中引入store</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/'</span>, </div><div class="line">    <span class="attr">component</span>:R_INDEX,</div><div class="line">    <span class="attr">children</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'index/'</span>,</div><div class="line">        <span class="attr">redirect</span>:<span class="string">'/'</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="comment">//服务端一律跳转到这个URL上</span></div><div class="line">    path: <span class="string">'/home/:id/:redirectUrl/'</span>, <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line">      * 通过dispatch触发保存openid的action</div><div class="line">      * 将URL上的OPENID保存到store中</div><div class="line">      */</div><div class="line">      store.dispatch(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'setOpenId'</span>,</div><div class="line">        <span class="attr">amount</span>: to.params.id</div><div class="line">      &#125;)</div><div class="line">      <span class="comment">//在回跳到需要来访的正确页面</span></div><div class="line">      <span class="keyword">return</span> <span class="string">`/<span class="subst">$&#123;to.params.redirectUrl&#125;</span>/`</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="接口的处理"><a href="#接口的处理" class="headerlink" title="接口的处理"></a>接口的处理</h2><p><strong>axios、vuex的使用结合</strong><br>此部分需要<code>Promise</code>和<code>Axios</code>的知识，若不熟悉请参阅笔者这2篇文章</p>
<ol>
<li><a href="https://blog.ygxdxx.com/2017/02/27/Axios-Strategy/">axios全攻略</a></li>
<li><a href="https://blog.ygxdxx.com/2017/02/01/Vuex2&amp;Axios-Develop/">Vuex2和Axios的配合</a></li>
</ol>
<h3 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">*  1.超时处理</div><div class="line">*  2.post设置</div><div class="line">*  3.开发环境与正式环境的区别</div><div class="line">*/</div><div class="line">axios.defaults.timeout = <span class="number">5000</span></div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span></div><div class="line">axios.defaults.baseURL =  (process.env.NODE_ENV == <span class="string">'development'</span> ? <span class="string">'http://192.168.1.15:8080/'</span> : <span class="string">'http://www.xxxx.com/'</span>)</div></pre></td></tr></table></figure>
<h3 id="全局请求处理"><a href="#全局请求处理" class="headerlink" title="全局请求处理"></a>全局请求处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">*  1.请求拦截，全局增加token</div><div class="line">*  2.post设置</div><div class="line">*/</div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(config.method  === <span class="string">'post'</span> || config.method  === <span class="string">'put'</span> )&#123;</div><div class="line">    <span class="comment">//这里使用了qs这个库去序列化数据</span></div><div class="line">    config.data = qs.parse(config.data,&#123;<span class="attr">arrayFormat</span>:<span class="string">'brackets'</span>&#125;)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//全局追加openid</span></div><div class="line">  config.params = (</div><div class="line">      <span class="built_in">Object</span>.assign((config.params ? config.params : &#123;&#125;),&#123;<span class="string">"SESSION"</span>:store.state.common.openid&#125;)</div><div class="line">  )</div><div class="line">  <span class="keyword">return</span> config</div><div class="line">&#125;,(error) =&gt;&#123;</div><div class="line">  Vue.$vux.toast.show(&#123;<span class="attr">text</span>: <span class="string">'非法输入'</span>,<span class="attr">type</span>:<span class="string">'text'</span>,<span class="attr">time</span>:<span class="number">1000</span>&#125;)</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="全局接收处理"><a href="#全局接收处理" class="headerlink" title="全局接收处理"></a>全局接收处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* </span></div><div class="line">*  1.正确请求接口后，接口内返回的code若不为20000（前后端接口的规定），则表示是错误的参数</div><div class="line">*  2.若接口报错，并且报错的http状态码为401（前后端接口的规定）则表示用户没有该接口的权限，</div><div class="line">*  跳转到登陆页面</div><div class="line">*/</div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.data.code != <span class="string">'20000'</span>)&#123;</div><div class="line">    Vue.$vux.toast.show(&#123;<span class="attr">text</span>:res.data.message,<span class="attr">type</span>:<span class="string">'text'</span>,<span class="attr">time</span>:<span class="number">1000</span>&#125;)</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span>(error.response)&#123;</div><div class="line">    <span class="keyword">switch</span> (error.response.status)&#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">401</span>:</div><div class="line">        <span class="built_in">window</span>.location.href = <span class="string">`http://<span class="subst">$&#123;<span class="built_in">window</span>.<span class="built_in">document</span>.location.host&#125;</span>/?#/login/`</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        Vue.$vux.toast.show(&#123;<span class="attr">text</span>:<span class="string">'网络异常'</span>,<span class="attr">type</span>:<span class="string">'text'</span>,<span class="attr">time</span>:<span class="number">1000</span>&#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="页面合法性检查"><a href="#页面合法性检查" class="headerlink" title="页面合法性检查"></a>页面合法性检查</h2><p>因为整套环境都是由前端去控制页面路由，这里有很多地方需要我们去做权限的验证完善程序的健壮性，这对前端的考验很大。<br>虽然分享出去的页面处理比较暴力都是授权的链接，还是担心有人会复制URL出去在微信中打开所以需要做以下处理。</p>
<ol>
<li>验证是否在微信端</li>
<li>store中是否存在openid，是否授权登陆后的进来的</li>
<li>无权限操作的页面应该能返回正确的地方</li>
</ol>
<h3 id="检测是否授权登陆"><a href="#检测是否授权登陆" class="headerlink" title="检测是否授权登陆"></a>检测是否授权登陆</h3><p>我将授权登陆后的openid存在了store中，所以每次进行<strong>路由跳转</strong>的时候我只要检测store中是否存在openid若不存在则直接跳转到授权登录页面，授权登陆后服务端判断此openid是否存在，若存在则跳转到来访页面，不存在则跳转到login页面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(store.state.common.openId)&#123;</div><div class="line">    next();</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">window</span>.location.href=<span class="string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&amp;redirect_uri=http%3a%2f%2fpeifei.qmant.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.qmant.com/index&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect"</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="是否在微信端"><a href="#是否在微信端" class="headerlink" title="是否在微信端"></a>是否在微信端</h3><p>授权登陆页面会检测，若不在微信端会提示如下。<br><img src="http://okkula0y9.bkt.clouddn.com/wx_2017_3_6.jpg" alt="此处输入图片的描述"></p>
<h3 id="无权限页面"><a href="#无权限页面" class="headerlink" title="无权限页面"></a>无权限页面</h3><p>后端openid进行检测，若是无效的或者不对的openid会在请求接口的时候返回401，接口接收到401后，会跳转到登陆注册页面。</p>
<h2 id="微信支付的坑"><a href="#微信支付的坑" class="headerlink" title="微信支付的坑"></a>微信支付的坑</h2><blockquote>
<p>在遇到这个问题时困扰了好久，然后这篇博文<a href="http://blog.csdn.net/liufeng520/article/details/51354741" target="_blank" rel="external">开发单页应用(SPA)时候遇到的微信支付授权目录的坑</a>给了我指导，在此感谢作者</p>
</blockquote>
<h3 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h3><p>前端技术选型用的vuejs+vue-router，vue-router使用hashbang模式（使用hashbang也是为了避免微信jssdk的wx.config签名的坑）。在调用微信支付的时候(IOS)遇到提示”URL未注册”，这通常是因为没有在微信支付后台正确配置授权目录的问题，但是我遇到并不是这个。<br>我在调试的时候发现唤起微信支付时，IOS内打印日志中的URL和实际中的URL不一样安卓却是好的，我不知道是不是微信的BUG。后来在网上搜寻答案，发现是下面这个问题：</p>
<h3 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h3><p>首先把当前页面叫做<code>Current Page</code>。当我们从微信别的地方点击链接呼出微信浏览器时所落在的页面、或者点击微信浏览器的刷新按钮时所刷新的页面，我们叫做<code>Landing Page</code>。<br>举个例子，我们从任何地方点击链接进入页面A，然后依次浏览到B、C、D，那么Current Page就是D，而Landing Page是A，如果此时我们在D页面点击一下浏览器的刷新按钮，那么Landing Page就变成了D（以上均是在单页应用的环境下，即以hashbang模式通过js更改浏览器路径，直接href跳转的不算）。</p>
<p>问题来了，在iOS和安卓下呼出微信支付的时候，微信支付判断当前路径的规则分别是：</p>
<p>IOS：Landing Page<br>安卓：Current Page</p>
<p>这就意味着，在ios环境下，任何一个页面都有可能成为支付页面（因为我无法预知和控制用户在哪个页面点微信浏览器的刷新按钮，或是用户通过哪个连接从外部进入到系统）。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">3个页面用到微信支付：</div><div class="line">http://example.com/#/cart/index</div><div class="line">http://example.com/#/order/orderlist</div><div class="line">http://example.com/#/order/orderinfo</div></pre></td></tr></table></figure>
<p>上述的3个链接根本不行啊，因为微信授权目录必须配置到最后一级目录，配置在根目录不行。</p>
<p>将所有的路由#前加了一个？，于是微信浏览器妥妥的把井号“#”后面的内容给去掉了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原来路由链接：</div><div class="line">http://example.com/#/cart/index</div><div class="line">现在路由链接：</div><div class="line">http://example.com/?#/cart/index</div></pre></td></tr></table></figure></p>
<p>我们只要将授权目录设置到根目录<code>http://example.com/</code>即可</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2>]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 微信开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Axios全攻略]]></title>
      <url>http://blog.ygxdxx.com/2017/02/27/Axios-Strategy/</url>
      <content type="html"><![CDATA[<blockquote>
<p>，它本身具有以下特征：</p>
<h1 id="Axios全攻略"><a href="#Axios全攻略" class="headerlink" title="Axios全攻略"></a>Axios全攻略</h1><p>转<a href="https://ykloveyxk.github.io/2017/02/25/axios%E5%85%A8%E6%94%BB%E7%95%A5/" target="_blank" rel="external">axios全攻略 | 羸弱的小金鱼</a>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端,原文地址：</p>
</blockquote>
<ul>
<li>从浏览器中创建 XMLHttpRequest</li>
<li>从 node.js 发出 http 请求</li>
<li>支持 Promise API</li>
<li>拦截请求和响应</li>
<li>转换请求和响应数据</li>
<li>取消请求</li>
<li>自动转换JSON数据</li>
<li>客户端支持防止 CSRF/XSRF</li>
</ul>
<h2 id="引入方式"><a href="#引入方式" class="headerlink" title="引入方式"></a>引入方式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ npm install axios</div><div class="line">$ cnpm install axios <span class="comment">/*taobao源*/</span></div><div class="line">$ bower install axios</div><div class="line">或者使用cdn：</div><div class="line">&lt;script src=<span class="string">"https:/*unpkg.com/axios/dist/axios.min.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="执行-GET-请求"><a href="#执行-GET-请求" class="headerlink" title="执行 GET 请求"></a>执行 GET 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 向具有指定ID的用户发出请求 */</span></div><div class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div><div class="line"><span class="comment">/* 也可以通过 params 对象传递参数*/</span></div><div class="line">axios.get(<span class="string">'/user'</span>, &#123;</div><div class="line">    <span class="attr">params</span>: &#123;</div><div class="line">      <span class="attr">ID</span>: <span class="number">12345</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="执行-POST-请求"><a href="#执行-POST-请求" class="headerlink" title="执行 POST 请求"></a>执行 POST 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">axios.post(<span class="string">'/user'</span>, &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Fred'</span>,</div><div class="line">    <span class="attr">lastName</span>: <span class="string">'Flintstone'</span></div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h3 id="执行多个并发请求"><a href="#执行多个并发请求" class="headerlink" title="执行多个并发请求"></a>执行多个并发请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAccount</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345'</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> axios.get(<span class="string">'/user/12345/permissions'</span>);</div><div class="line">&#125;</div><div class="line">axios.all([getUserAccount(), getUserPermissions()])</div><div class="line">    <span class="comment">/* 两个请求现已完成  */</span></div><div class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">acct, perms</span>) </span>&#123;</div><div class="line"></div><div class="line">  &#125;)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><p>可以通过将相关配置传递给 axios 来进行请求。</p>
<h3 id="axios-config"><a href="#axios-config" class="headerlink" title="axios(config)"></a>axios(config)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 发送一个 POST 请求*/</span></div><div class="line">axios(&#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">'post'</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'/user/12345'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Fred'</span>,</div><div class="line">    <span class="attr">lastName</span>: <span class="string">'Flintstone'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="axios-url-config"><a href="#axios-url-config" class="headerlink" title="axios(url[, config])"></a>axios(url[, config])</h3><p>发送一个 GET 请求 (GET请求是默认请求模式)<br>axios(‘/user/12345’);</p>
<h3 id="请求方法别名"><a href="#请求方法别名" class="headerlink" title="请求方法别名"></a>请求方法别名</h3><p>为了方便起见，已经为所有支持的请求方法提供了别名。</p>
<ul>
<li>axios.request(config)</li>
<li>axios.get(url [，config])</li>
<li>axios.delete(url [，config])</li>
<li>axios.head(url [，config])</li>
<li>axios.post(url [，data [，config]])</li>
<li>axios.put(url [，data [，config]])</li>
<li>axios.patch(url [，data [，config]])</li>
</ul>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>当使用别名方法时，不需要在config中指定url，method和data属性。</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>帮助函数处理并发请求。</p>
<ul>
<li>axios.all(iterable)</li>
<li>axios.spread(callback)</li>
</ul>
<h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p>您可以使用自定义配置创建axios的新实例。</p>
<p>axios.create([config])</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = axios.create(&#123;</div><div class="line">  <span class="attr">baseURL</span>: <span class="string">'https:/*some-domain.com/api/'</span>,</div><div class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</div><div class="line">  <span class="attr">headers</span>: &#123;<span class="string">'X-Custom-Header'</span>: <span class="string">'foobar'</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>可用的实例方法如下所示。 指定的配置将与实例配置合并。</p>
<ul>
<li>axios＃request(config)</li>
<li>axios＃get(url [，config])</li>
<li>axios＃delete(url [，config])</li>
<li>axios＃head(url [，config])</li>
<li>axios＃post(url [，data [，config]])</li>
<li>axios＃put(url [，data [，config]])</li>
<li>axios＃patch(url [，data [，config]])</li>
</ul>
<h2 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h2><p>这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">/* `url`是将用于请求的服务器URL*/</span></div><div class="line">  url: <span class="string">'/user'</span>,</div><div class="line">  <span class="comment">/* `method`是发出请求时使用的请求方法 */</span></div><div class="line">  method: <span class="string">'get'</span>, <span class="comment">/* 默认*/</span></div><div class="line">  <span class="comment">/* `baseURL`将被添加到`url`前面，除非`url`是绝对的。*/</span></div><div class="line">  <span class="comment">/* 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。*/</span></div><div class="line">  baseURL: <span class="string">'https:/*some-domain.com/api/'</span>,</div><div class="line">  <span class="comment">/* `transformRequest`允许在请求数据发送到服务器之前对其进行更改*/</span></div><div class="line">  <span class="comment">/* 这只适用于请求方法'PUT'，'POST'和'PATCH'*/</span></div><div class="line">  <span class="comment">/* 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream*/</span></div><div class="line">  transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">/* 做任何你想要的数据转换*/</span></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;],</div><div class="line">  <span class="comment">/* `transformResponse`允许在 then / catch之前对响应数据进行更改*/</span></div><div class="line">  transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="comment">/* Do whatever you want to transform the data*/</span></div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">  &#125;],</div><div class="line">  <span class="comment">/* `headers`是要发送的自定义 headers*/</span></div><div class="line">  headers: &#123;<span class="string">'X-Requested-With'</span>: <span class="string">'XMLHttpRequest'</span>&#125;,</div><div class="line">  <span class="comment">/* `params`是要与请求一起发送的URL参数*/</span></div><div class="line">  <span class="comment">/* 必须是纯对象或URLSearchParams对象*/</span></div><div class="line">  params: &#123;</div><div class="line">    <span class="attr">ID</span>: <span class="number">12345</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* `paramsSerializer`是一个可选的函数，负责序列化`params`*/</span></div><div class="line">  <span class="comment">/* (e.g. https:/*www.npmjs.com/package/qs, http:/*api.jquery.com/jquery.param/)*/</span></div><div class="line">  paramsSerializer: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> Qs.stringify(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">'brackets'</span>&#125;)</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* `data`是要作为请求主体发送的数据*/</span></div><div class="line">  <span class="comment">/* 仅适用于请求方法“PUT”，“POST”和“PATCH”*/</span></div><div class="line">  <span class="comment">/* 当没有设置`transformRequest`时，必须是以下类型之一：*/</span></div><div class="line">  <span class="comment">/* - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams*/</span></div><div class="line">  <span class="comment">/* - Browser only: FormData, File, Blob*/</span></div><div class="line">  <span class="comment">/* - Node only: Stream*/</span></div><div class="line">  data: &#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="string">'Fred'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* `timeout`指定请求超时之前的毫秒数。*/</span></div><div class="line">  <span class="comment">/* 如果请求的时间超过'timeout'，请求将被中止。*/</span></div><div class="line">  timeout: <span class="number">1000</span>,</div><div class="line">  <span class="comment">/* `withCredentials`指示是否跨站点访问控制请求*/</span></div><div class="line">  <span class="comment">/* should be made using credentials*/</span></div><div class="line">  withCredentials: <span class="literal">false</span>, <span class="comment">/* default*/</span></div><div class="line">  <span class="comment">/* `adapter'允许自定义处理请求，这使得测试更容易。*/</span></div><div class="line">  <span class="comment">/* 返回一个promise并提供一个有效的响应(参见[response docs](＃response-api))*/</span></div><div class="line">  adapter: <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</div><div class="line">    <span class="comment">/* ... */</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* `auth'表示应该使用 HTTP 基本认证，并提供凭据。*/</span></div><div class="line">  <span class="comment">/* 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。*/</span></div><div class="line">  auth: &#123;</div><div class="line">    <span class="attr">username</span>: <span class="string">'janedoe'</span>,</div><div class="line">    <span class="attr">password</span>: <span class="string">'s00pers3cret'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* “responseType”表示服务器将响应的数据类型*/</span></div><div class="line">  <span class="comment">/* 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></div><div class="line">  responseType: 'json', /* default*/</div><div class="line">  <span class="comment">/*`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称*/</span></div><div class="line">  xsrfCookieName: <span class="string">'XSRF-TOKEN'</span>, <span class="comment">/* default*/</span></div><div class="line">  <span class="comment">/* `xsrfHeaderName`是携带xsrf令牌值的http头的名称*/</span></div><div class="line">  xsrfHeaderName: <span class="string">'X-XSRF-TOKEN'</span>, <span class="comment">/* default*/</span></div><div class="line">  <span class="comment">/* `onUploadProgress`允许处理上传的进度事件*/</span></div><div class="line">  onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</div><div class="line">    <span class="comment">/* 使用本地 progress 事件做任何你想要做的*/</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* `onDownloadProgress`允许处理下载的进度事件*/</span></div><div class="line">  onDownloadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">progressEvent</span>) </span>&#123;</div><div class="line">    <span class="comment">/* Do whatever you want with the native progress event*/</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* `maxContentLength`定义允许的http响应内容的最大大小*/</span></div><div class="line">  maxContentLength: <span class="number">2000</span>,</div><div class="line">  <span class="comment">/* `validateStatus`定义是否解析或拒绝给定的promise*/</span></div><div class="line">  <span class="comment">/* HTTP响应状态码。如果`validateStatus`返回`true`(或被设置为`null` promise将被解析;否则，promise将被*/</span></div><div class="line">  <span class="comment">/* 拒绝。*/</span></div><div class="line">  validateStatus: <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">/* default</span></div><div class="line">  &#125;,</div><div class="line">  /* `maxRedirects`定义在node.js中要遵循的重定向的最大数量。*/</div><div class="line">  <span class="comment">/* 如果设置为0，则不会遵循重定向。*/</span></div><div class="line">  maxRedirects: <span class="number">5</span>, <span class="comment">/* 默认*/</span></div><div class="line">  <span class="comment">/* `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。*/</span></div><div class="line">  <span class="comment">/* 允许配置类似`keepAlive`的选项，*/</span></div><div class="line">  <span class="comment">/* 默认情况下不启用。*/</span></div><div class="line">  httpAgent: <span class="keyword">new</span> http.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</div><div class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.Agent(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</div><div class="line">  <span class="comment">/* 'proxy'定义代理服务器的主机名和端口*/</span></div><div class="line">  <span class="comment">/* `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。*/</span></div><div class="line">  <span class="comment">/* 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。*/</span></div><div class="line">  proxy: &#123;</div><div class="line">    <span class="attr">host</span>: <span class="string">'127.0.0.1'</span>,</div><div class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</div><div class="line">    <span class="attr">auth</span>: : &#123;</div><div class="line">      <span class="attr">username</span>: <span class="string">'mikeymike'</span>,</div><div class="line">      <span class="attr">password</span>: <span class="string">'rapunz3l'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">/* “cancelToken”指定可用于取消请求的取消令牌*/</span></div><div class="line">  <span class="comment">/* (see Cancellation section below for details)*/</span></div><div class="line">  cancelToken: <span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> (<span class="params">cancel</span>) </span>&#123;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 then 时，您将收到如下响应：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">axios.get(<span class="string">'/user/12345'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response.data);</div><div class="line">    <span class="built_in">console</span>.log(response.status);</div><div class="line">    <span class="built_in">console</span>.log(response.statusText);</div><div class="line">    <span class="built_in">console</span>.log(response.headers);</div><div class="line">    <span class="built_in">console</span>.log(response.config);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="配置默认值"><a href="#配置默认值" class="headerlink" title="配置默认值"></a>配置默认值</h2><p>您可以指定将应用于每个请求的配置默认值。</p>
<h3 id="全局axios默认值"><a href="#全局axios默认值" class="headerlink" title="全局axios默认值"></a>全局axios默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">axios.defaults.baseURL = <span class="string">'https:/*api.example.com'</span>;</div><div class="line">axios.defaults.headers.common[<span class="string">'Authorization'</span>] = AUTH_TOKEN;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</div></pre></td></tr></table></figure>
<h3 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/*在创建实例时设置配置默认值*/</div><div class="line">var instance = axios.create(&#123;</div><div class="line">   baseURL：'https:/*api.example.com'*/</div><div class="line">&#125;);</div><div class="line"></div><div class="line"> </div><div class="line">/*在实例创建后改变默认值*/</div><div class="line">instance.defaults.headers.common ['Authorization'] = AUTH_TOKEN;</div></pre></td></tr></table></figure>
<h2 id="配置优先级顺序"><a href="#配置优先级顺序" class="headerlink" title="配置优先级顺序"></a>配置优先级顺序</h2><p>配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*使用库提供的配置默认值创建实例*/</span></div><div class="line"><span class="comment">/*此时，超时配置值为`0`，这是库的默认值*/</span></div><div class="line"><span class="keyword">var</span> instance = axios.create();</div><div class="line"> </div><div class="line"><span class="comment">/*覆盖库的超时默认值*/</span></div><div class="line"><span class="comment">/*现在所有请求将在超时前等待2.5秒*/</span></div><div class="line">instance.defaults.timeout = <span class="number">2500</span>;</div><div class="line"> </div><div class="line"><span class="comment">/*覆盖此请求的超时，因为它知道需要很长时间*/</span></div><div class="line">instance.get(<span class="string">'/ longRequest'</span>，&#123;</div><div class="line">   timeout：<span class="number">5000</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>你可以截取请求或响应在被 then 或者 catch 处理之前</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*添加请求拦截器*/</span></div><div class="line">axios.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>)</span>&#123;</div><div class="line">     <span class="comment">/*在发送请求之前做某事*/</span></div><div class="line">     <span class="keyword">return</span> config;</div><div class="line">   &#125;，<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">     <span class="comment">/*请求错误时做些事*/</span></div><div class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">   &#125;);</div><div class="line"> </div><div class="line"><span class="comment">/*添加响应拦截器*/</span></div><div class="line">axios.interceptors.response.use(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</div><div class="line">     <span class="comment">/*对响应数据做些事*/</span></div><div class="line">      <span class="keyword">return</span> response;</div><div class="line">   &#125;，<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</div><div class="line">     <span class="comment">/*请求错误时做些事*/</span></div><div class="line">     <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>如果你以后可能需要删除拦截器。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myInterceptor = axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</div><div class="line">axios.interceptors.request.eject(myInterceptor);</div></pre></td></tr></table></figure>
<p>你可以将拦截器添加到axios的自定义实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> instance = axios.create();</div><div class="line">instance.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*...*/</span>&#125;);</div></pre></td></tr></table></figure>
<h2 id="消除"><a href="#消除" class="headerlink" title="消除"></a>消除</h2><p>您可以使用取消令牌取消请求。</p>
<blockquote>
<p>axios cancel token API基于可取消的promise提议，目前处于阶段1。</p>
</blockquote>
<p>您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</div><div class="line"><span class="keyword">var</span> source = CancelToken.source();</div><div class="line">axios.get(<span class="string">'/user/12345'</span>, &#123;</div><div class="line">  <span class="attr">cancelToken</span>: source.token</div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">thrown</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (axios.isCancel(thrown)) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Request canceled'</span>, thrown.message);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">/* 处理错误*/</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">/*取消请求(消息参数是可选的)*/</span></div><div class="line">source.cancel(<span class="string">'操作被用户取消。'</span>);</div></pre></td></tr></table></figure></p>
<p>您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> CancelToken = axios.CancelToken;</div><div class="line"><span class="keyword">var</span> cancel;</div><div class="line"> </div><div class="line">axios.get(<span class="string">'/ user / 12345'</span>，&#123;</div><div class="line">   cancelToken：<span class="keyword">new</span> CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">c</span>)</span>&#123;</div><div class="line">     <span class="comment">/*一个执行器函数接收一个取消函数作为参数*/</span></div><div class="line">     cancel = c;</div><div class="line">   &#125;)</div><div class="line">&#125;);</div><div class="line"><span class="comment">/* 取消请求*/</span></div><div class="line">clear();</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：您可以使用相同的取消令牌取消几个请求。</p>
</blockquote>
<h2 id="使用application-x-www-form-urlencoded格式"><a href="#使用application-x-www-form-urlencoded格式" class="headerlink" title="使用application / x-www-form-urlencoded格式"></a>使用application / x-www-form-urlencoded格式</h2><p>默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p>
<p>浏览器</p>
<p>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> params = <span class="keyword">new</span> URLSearchParams();</div><div class="line">params.append(<span class="string">'param1'</span>, <span class="string">'value1'</span>);</div><div class="line">params.append(<span class="string">'param2'</span>, <span class="string">'value2'</span>);</div><div class="line">axios.post(<span class="string">'/foo'</span>, params);</div></pre></td></tr></table></figure>
<blockquote>
<p>请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用(确保polyfill全局环境)。<br>或者，您可以使用qs库对数据进行编码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> qs = <span class="built_in">require</span>(<span class="string">'qs'</span>);</div><div class="line">axios.post(<span class="string">'/foo'</span>, qs.stringify(&#123; <span class="string">'bar'</span>: <span class="number">123</span> &#125;);</div></pre></td></tr></table></figure>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>在node.js中，可以使用querystring模块，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line">axios.post(<span class="string">'http:/*something.com/'</span>, querystring.stringify(&#123; <span class="attr">foo</span>: <span class="string">'bar'</span> &#125;);</div></pre></td></tr></table></figure></p>
<p>你也可以使用qs库。</p>
<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>axios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。<br>axios包括TypeScript定义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</div><div class="line">axios.get(<span class="string">'/user?ID=12345'</span>);</div></pre></td></tr></table></figure>
<p>axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。</p>
]]></content>
      
        
        <tags>
            
            <tag> axios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vuex2和Axios的开发]]></title>
      <url>http://blog.ygxdxx.com/2017/02/01/Vuex2&amp;Axios-Develop/</url>
      <content type="html"><![CDATA[<blockquote>
<p>总结笔者最近在项目中使用Vuex2和Axios的总结和小技巧，方便日后查看。本人能力有限，如有错误还请大大们指正探讨😭。</p>
</blockquote>
<h1 id="Vuex2和Axios的开发"><a href="#Vuex2和Axios的开发" class="headerlink" title="Vuex2和Axios的开发"></a>Vuex2和Axios的开发</h1><h2 id="阅读前须知"><a href="#阅读前须知" class="headerlink" title="阅读前须知"></a>阅读前须知</h2><p>接上一篇的<a href="https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">Axios的配置</a>，阅读本文默认您已经掌握了Vuex2的基本语法、Axios的使用配置与方法、Promise的基本语法。（下面将放出参考链接方便大家在有不明白的地方查看）此篇主要叙述我在实际项目过程中Vuex2和Axios的组合操作。</p>
<p>参考：</p>
<ul>
<li><a href="https://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Vue单向数据流-Vuex2</a></li>
<li><a href="https://github.com/mzabriskie/axioss://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Ajax库-Axios</a></li>
<li><a href="http://www.jianshu.com/p/063f7e490e9aoss://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Promise介绍</a></li>
</ul>
<h2 id="Vuex2中的Actions"><a href="#Vuex2中的Actions" class="headerlink" title="Vuex2中的Actions"></a>Vuex2中的Actions</h2><p>在Vuex1中actions都可以统一使用<code>dispatch</code>去触发<code>mutation</code>，那时候去异步这种数据流没什么认识。在Vuex2中规定了,同步的方法使用<code>commit</code>去提交<code>mutation</code>，异步的方法（如接口请求，完成接口请求后的操作）只能通过分发action去触发，即使用<code>dispatch</code>。</p>
<p><img src="https://vuex.vuejs.org/zh-cn/images/flow.png" alt="此处输入图片的描述"></p>
<p>这里不经吐槽2句，Vuex2的Api还是蛮人性化的，对比Redux为了用好单向数据流，不得不引入一大堆诸如<code>react-redux</code>、<code>redux-saga</code>、<code>redux-thunk</code>…，对新上手的小白来说简直是一脸蒙蔽。上面这些库所带的功能，用Vuex2都可以完成（手动骄傲），当然Vuex2也是站在这些巨人的肩膀上。</p>
<p>下面来看下<code>vuex2</code>中关于actions的API<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">类型: &#123; [type: string]: <span class="built_in">Function</span> &#125;</div><div class="line"></div><div class="line">在 store 上注册 action。处理函数接受一个 context 对象，包含以下属性：</div><div class="line"></div><div class="line">&#123;</div><div class="line">  state,     <span class="comment">// 等同于 store.state, 若在模块中则为局部状态</span></div><div class="line">  rootState, <span class="comment">// 等同于 store.state, 只存在于模块中</span></div><div class="line">  commit,    <span class="comment">// 等同于 store.commit</span></div><div class="line">  dispatch,  <span class="comment">// 等同于 store.dispatch</span></div><div class="line">  getters    <span class="comment">// 等同于 store.getters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Axios的配置"><a href="#Axios的配置" class="headerlink" title="Axios的配置"></a>Axios的配置</h2><p>这个是我项目内Axios的配置，主要做了下面几件事情</p>
<ol>
<li>5秒的超时验证</li>
<li>POST的设置</li>
<li>统一的response封装。我通过接口传回的CODE码去判断该请求是否正确<br>如果想去看更详细的解析可以通过<a href="https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">Axios的配置</a></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'./whole'</span>    <span class="comment">//alert</span></div><div class="line"></div><div class="line">axios.defaults.timeout = <span class="number">5000</span>;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line">axios.defaults.baseURL = <span class="string">'http://xxx.xxx.com'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//POST传参序列化</span></div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(config.method  === <span class="string">'post'</span>)&#123;</div><div class="line">    config.data = qs.stringify(config.data);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;,(error) =&gt;&#123;</div><div class="line">   _.toast(<span class="string">"错误的传参"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//code状态码200判断</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.data.code != <span class="string">'200'</span>)&#123;</div><div class="line">    _.toast(res.data.msg);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  _.toast(<span class="string">"网络异常"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</div></pre></td></tr></table></figure>
<h2 id="完成一个请求操作"><a href="#完成一个请求操作" class="headerlink" title="完成一个请求操作"></a>完成一个请求操作</h2><p>下面介绍一个登陆action的操作，</p>
<ol>
<li>在接口发起请求时跳出loading</li>
<li>接口请求成功结束loading，并保存数据进入store</li>
<li>接口请求失败抛出异常，结束loading。</li>
<li>返回一个Promise对象，方便继续操作。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function">(<span class="params">&#123; commit &#125;,params</span>) =&gt;</span> &#123;</div><div class="line">  _.busy();               <span class="comment">//loding开始</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123; </div><div class="line">    axios(&#123;</div><div class="line">      <span class="attr">method</span>:<span class="string">'get'</span>,</div><div class="line">      <span class="attr">url</span>: <span class="string">'teacher/login'</span>,</div><div class="line">      <span class="attr">params</span>: &#123;</div><div class="line">        <span class="attr">moblie</span>:params.mobile,</div><div class="line">        <span class="attr">password</span>:params.password,</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">        commit(types.LOGIN,response.data.data); <span class="comment">//获得的数据通过mutation，存入store中</span></div><div class="line">        _.leave();  <span class="comment">//loding结束</span></div><div class="line">        resolve(response);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">      _.leave();  <span class="comment">//loding结束</span></div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  [types.LOGIN](state, data)&#123;</div><div class="line">    state.token = data.token;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用action</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; mapActions,mapGetters  &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">methods</span>:&#123;</div><div class="line">    ...mapActions([<span class="string">'login'</span>]),                   <span class="comment">//注入action</span></div><div class="line">    _login()&#123;</div><div class="line">      <span class="keyword">let</span> params = &#123;</div><div class="line">        <span class="attr">mobile</span>:<span class="keyword">this</span>.mobile,</div><div class="line">        <span class="attr">pwd</span>:<span class="keyword">this</span>.password</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.login(params).</div><div class="line">      then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">          <span class="keyword">this</span>.$router.replace(<span class="string">'/main/index'</span>);          <span class="comment">//正确完成后进入主页</span></div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;                                 <span class="comment">//错误则清空密码文本框</span></div><div class="line">          <span class="comment">//可以在这里对Error进行捕获，然后根据错误类型进行相对应的处理</span></div><div class="line">          <span class="keyword">this</span>.pwd = <span class="string">''</span>;                           </div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="一点说明"><a href="#一点说明" class="headerlink" title="一点说明"></a>一点说明</h2><p>因为在Vuex2中action可以直接拿到Store的值，所以我们可以通过 <code>rootState</code>这个参数拿到根的store值，通过<code>state</code>拿到当前模块中store的值<br>都没必要在从getter里拿到值，然后通过params的方式传入。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> xxx = <span class="function">(<span class="params">&#123;state,rootState,commit&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123; </div><div class="line">    axios(&#123;</div><div class="line">      <span class="attr">method</span>:<span class="string">'get'</span>,</div><div class="line">      <span class="attr">url</span>: <span class="string">'teacher/workbook/class/exercise'</span>,</div><div class="line">      <span class="attr">params</span>: &#123;</div><div class="line">        <span class="string">"token"</span>:rootState.login.token,          <span class="comment">//从store根中拿到数据</span></div><div class="line">        <span class="string">"classCode"</span>:state.code,                 <span class="comment">//从当前模块中拿到数据</span></div><div class="line">        <span class="string">"chapterId"</span>:rootState.route.params.chapterId</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      commit(types.WORKBOOK_CLASS_EXERCISE,response.data.data)</div><div class="line">      resolve(response);</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样是不是更方便我们去审查action的代码？</p>
]]></content>
      
        
        <tags>
            
            <tag> Axios </tag>
            
            <tag> Vue </tag>
            
            <tag> Vuex2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Axios的配置]]></title>
      <url>http://blog.ygxdxx.com/2017/01/29/Axios-Config/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以前写Vue项目的时候都是使用vue-resource做为项目ajax库，在11月份的某一天尤大微博的更新表示ajax的库应该是通用的，放弃了对vue-resource的技术支持，推荐使用<a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a>。</p>
</blockquote>
<h1 id="Axios的配置"><a href="#Axios的配置" class="headerlink" title="Axios的配置"></a>Axios的配置</h1><p><img src="http://upload-images.jianshu.io/upload_images/1987062-b3255d564903d3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此处输入图片的描述"><br>既然尤大推荐的应该有过人之处，好吧于是在新的项目上开始使用Axios,开启这段学习（踩坑）的历程。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Axios和其他的ajax库都是很类似的，提供了2种使用的方式一种是直接使用实例方法的如：<br>下面是实例的所有可用方法，方法中的config会与axios实例中的config合并。（实例可以将一些通用的config先配置好）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//axios.get</span></div><div class="line"><span class="comment">//axios.post</span></div><div class="line"></div><div class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<h2 id="Config-配置"><a href="#Config-配置" class="headerlink" title="Config 配置"></a>Config 配置</h2><p>Axios的配置参数很多，我们来一一了解</p>
<ul>
<li>url —— 用来向服务器发送请求的url</li>
<li>method —— 请求方法，默认是GET方法</li>
<li>baseURL —— 基础URL路径，假如url不是绝对路径，如<a href="https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL" target="_blank" rel="external">https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL</a> + url。</li>
<li>transformRequest —— transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。</li>
<li>transformResponse —— transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。</li>
<li>headers —— 发送自定义Headers头文件，头文件中包含了http请求的各种信息。</li>
<li>params —— params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&amp;param2=value2。<br>paramsSerializer —— params参数序列化器。</li>
<li>data —— data是在发送POST、PUT或者PATCH请求的数据对象。</li>
<li>timeout —— 请求超时设置，单位为毫秒</li>
<li>withCredentials —— 表明是否有跨域请求需要用到证书</li>
<li>adapter —— adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response</li>
<li>auth —— auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。</li>
<li>responseType —— 表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。</li>
<li>xsrfCookieName —— 用作 xsrf token 值的 cookie 名称</li>
<li>xsrfHeaderName —— 带有 xsrf token 值 http head 名称</li>
<li>onUploadProgress —— 允许在上传过程中的做一些操作</li>
<li>onDownloadProgress —— 允许在下载过程中的做一些操作</li>
<li>maxContentLength —— 定义了接收到的response响应数据的最大长度。</li>
<li>validateStatus —— validateStatus定义了根据HTTP响应状态码决定是否接收或拒绝获取到的promise。如果 validateStatus 返回 true (或设置为 null 或 undefined ),promise将被接收;否则,promise将被拒绝。</li>
<li>maxRedirects —— maxRedirects定义了在node.js中redirect的最大值，如果设置为0，则没有redirect。</li>
<li>httpAgent —— 定义在使用http请求时的代理</li>
<li>httpsAgent —— 定义在使用https请求时的代理</li>
<li>proxy —— proxy定义代理服务器的主机名和端口，auth</li>
<li>cancelToken —— cancelToken定义一个 cancel token 用于取消请求</li>
</ul>
<h2 id="Response-返回"><a href="#Response-返回" class="headerlink" title="Response 返回"></a>Response 返回</h2><p>当我们ajax获取数据成功后会返回一个response对象，它包含了以下内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">// 服务器返回的数据</span></div><div class="line">  data: &#123;&#125;,</div><div class="line">  <span class="comment">// HTTP状态吗</span></div><div class="line">  status: <span class="number">200</span>,</div><div class="line">  <span class="comment">// 服务器返回的消息</span></div><div class="line">  statusText: <span class="string">'OK'</span>,</div><div class="line">  <span class="comment">// 返回头</span></div><div class="line">  headers: &#123;&#125;,</div><div class="line">  <span class="comment">// 在返回我们的配置</span></div><div class="line">  config: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="统一Config配置"><a href="#统一Config配置" class="headerlink" title="统一Config配置"></a>统一Config配置</h2><p>在接口测试中，我们经常需要切换线上环境和测试环境，这里我们都可以通过Config来配置，这样我们所有的发起的请求都是通过这个基本的URL走了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">axios.defaults.timeout = <span class="number">5000</span>;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line">axios.defaults.baseURL = <span class="string">'http://www.xxxx.xxx/api'</span>;</div><div class="line"><span class="comment">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div></pre></td></tr></table></figure>
<h2 id="Interceptors-拦截器"><a href="#Interceptors-拦截器" class="headerlink" title="Interceptors 拦截器"></a>Interceptors 拦截器</h2><p>这里我必须重点介绍，在我们发起大量的请求时候，需要对请求做统一的处理那就用到它了。笔者在使用了<code>vue-resource</code>和<code>axios</code>之后亲身比较，<code>axios</code>的配置更加人性化。<br>官方的API上这样介绍</p>
<blockquote>
<p>You can intercept requests or responses before they are handled by then or catch.<br>您可以拦截请求或响应之前，他们处理的操作或者异常</p>
</blockquote>
<h3 id="request统一处理操作"><a href="#request统一处理操作" class="headerlink" title="request统一处理操作"></a>request统一处理操作</h3><p>如果是POST的请求，配置中可不能用<code>params</code>字段了，需要使用<code>data</code>字段。<br>这里有个小地方需要注意，POST的传参需要序列化，不然服务端不会正确的接收哦，会报错。所以这里我们要对request的数据进行一次序列化。这里我用了<code>qs</code>,大家需要install一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></div><div class="line"></div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line"></div><div class="line"><span class="comment">//POST传参序列化</span></div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(config.method  === <span class="string">'post'</span>)&#123;</div><div class="line">    config.data = qs.stringify(config.data);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;,(error) =&gt;&#123;</div><div class="line">   alert(<span class="string">"错误的传参"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="response统一处理操作"><a href="#response统一处理操作" class="headerlink" title="response统一处理操作"></a>response统一处理操作</h3><p>也就是说我们可以统一的在发起请求前，或者获得数据，对其进行统一的操作。这点非常的高效，在笔者的项目中，接口会返回一个code,就和微信API一样，code为200代表返回请求数据正确为其它时就自动跳出弹窗打印消息即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//code状态码200判断</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.data.code != <span class="string">'200'</span>)&#123;</div><div class="line">    alert(res.data.msg);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  alert(<span class="string">"网络异常"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果发生这些错误了我要结束当前的Promise所以返回一个<code>Promise.reject(res)</code>，停止Promise队列下面的操作,如果有对于Promise不熟悉的童鞋请自行搜索<code>Promise</code>(这里还遇到了一个小坑最后会介绍)</p>
<h2 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h2><p>好了介绍了这么多介绍下我的axios配置的文件设置吧,这个文件名是<code>config/http.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'./whole'</span></div><div class="line"></div><div class="line">axios.defaults.timeout = <span class="number">5000</span>;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line">axios.defaults.baseURL = <span class="string">'http://www.guinaben.com:8070'</span>;</div><div class="line"><span class="comment">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div><div class="line"></div><div class="line"><span class="comment">//POST传参序列化</span></div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(config.method  === <span class="string">'post'</span>)&#123;</div><div class="line">    config.data = qs.stringify(config.data);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;,(error) =&gt;&#123;</div><div class="line">   _.toast(<span class="string">"错误的传参"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//code状态码200判断</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.data.code != <span class="string">'200'</span>)&#123;</div><div class="line">    _.toast(res.data.msg);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  _.toast(<span class="string">"网络异常"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</div></pre></td></tr></table></figure></p>
<p>发起的请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'config/http'</span></div><div class="line"></div><div class="line">axios(&#123;</div><div class="line">  <span class="attr">method</span>:<span class="string">'get'</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'xxxx/xxxxx'</span>,</div><div class="line">  <span class="attr">params</span>: &#123;</div><div class="line">    <span class="string">"textbook_id"</span>:id,</div><div class="line">    <span class="string">"token"</span>:token</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  resolve(response);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">axios(&#123;</div><div class="line">  <span class="attr">method</span>:<span class="string">'post'</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'teacher/pwd/resetByMobile'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">   <span class="string">"textbook_id"</span>:id,</div><div class="line">    <span class="string">"token"</span>:token</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">    resolve(response);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="一定要看"><a href="#一定要看" class="headerlink" title="一定要看"></a>一定要看</h2><p>因为这里我使用的<code>Promise</code>,所以在安卓4.4.3一下的手机还是不支持Promise的，所以会报错。需要引入<code>npm install babel-polyfill</code>和<code>npm install babel-runtime</code>，在入口文件上加上即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Axios </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title></title>
      <url>http://blog.ygxdxx.com/2017/01/28/Hello-Hexo/</url>
      <content type="html"><![CDATA[<blockquote>
<p>今天鸡年的第一天，说了好久想搭建自己的博客记录开发的日常，结果一拖再拖Orz（拖延症伤不起）。今天花了一下午终于搭建完成。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>好的开头就是成功的一半</p>
<h2 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h2><p>1.Hexo<br>前端建站神器，这里不多说了。<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="external">Hexo文档</a></p>
<p>2.主题<br>当时在发现这个主题的时候是比较惊艳的，个人比较喜欢谷歌的这种风格，作者是位国人。很感谢无私的付出<br><a href="https://material.viosey.com/" target="_blank" rel="external">Material Theme</a></p>
<p>3.Coding Pages<br>本来打算使用Github Pages，有时候墙的厉害。使用<a href="https://coding.net/help/doc/pages/index.html" target="_blank" rel="external">Coding Pages</a>做为承载网站。<br>主要使用「用户 Pages」类型，在个人项目里新建一个名为 {user_name}.coding.me 的项目，然后将Hexo中生成的Public文件夹作为Git的主目录即可。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>1._config.yml 是全站的控制文件，在配置的时候，有时候稍不注意将下面代码前的空格删掉了运行就会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//source前面有一个空格</span></div><div class="line">source_dir: source</div></pre></td></tr></table></figure></p>
<p>2.如果安装了新的主题，就需要到该主题下的_config.yml去配置。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>新的一年，以此篇开始。Fighting~</p>
]]></content>
      
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
