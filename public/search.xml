<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Vuex2与Axios开发]]></title>
      <url>http://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/</url>
      <content type="html"><![CDATA[<h1 id="Vuex2和Axios开发那点事"><a href="#Vuex2和Axios开发那点事" class="headerlink" title="Vuex2和Axios开发那点事"></a>Vuex2和Axios开发那点事</h1><blockquote>
<p>总结笔者最近在项目中使用Vuex2和Axios的总结和小技巧，方便日后查看。本人能力有限，如有错误还请大大们指正探讨😭。</p>
</blockquote>
<h1 id="阅读前须知"><a href="#阅读前须知" class="headerlink" title="阅读前须知"></a>阅读前须知</h1><p>接上一篇的<a href="https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/">Axios的配置</a>，阅读本文默认您已经掌握了Vuex2的基本语法、Axios的使用配置与方法、Promise的基本语法。（下面将放出参考链接方便大家在有不明白的地方查看）此篇主要叙述我在实际项目过程中Vuex2和Axios的组合操作。</p>
<p>参考：</p>
<ul>
<li><a href="https://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Vue单向数据流-Vuex2</a></li>
<li><a href="https://github.com/mzabriskie/axioss://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Ajax库-Axios</a></li>
<li><a href="http://www.jianshu.com/p/063f7e490e9aoss://vuex.vuejs.org/zh-cn/index.html" target="_blank" rel="external">Promise介绍</a></li>
</ul>
<h2 id="Vuex2中的Actions"><a href="#Vuex2中的Actions" class="headerlink" title="Vuex2中的Actions"></a>Vuex2中的Actions</h2><p>在Vuex1中actions都可以统一使用<code>dispatch</code>去触发<code>mutation</code>，那时候去异步这种数据流没什么认识。在Vuex2中规定了,同步的方法使用<code>commit</code>去提交<code>mutation</code>，异步的方法（如接口请求，完成接口请求后的操作）只能通过分发action去触发，即使用<code>dispatch</code>。</p>
<p><img src="https://vuex.vuejs.org/zh-cn/images/flow.png" alt="此处输入图片的描述"></p>
<p>这里不经吐槽2句，Vuex2的Api还是蛮人性化的，对比Redux为了用好单向数据流，不得不引入一大堆诸如<code>react-redux</code>、<code>redux-saga</code>、<code>redux-thunk</code>…，对新上手的小白来说简直是一脸蒙蔽。上面这些库所带的功能，用Vuex2都可以完成（手动骄傲），当然Vuex2也是站在这些巨人的肩膀上。</p>
<p>下面来看下<code>vuex2</code>中关于actions的API<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">类型: &#123; [type: string]: <span class="built_in">Function</span> &#125;</div><div class="line"></div><div class="line">在 store 上注册 action。处理函数接受一个 context 对象，包含以下属性：</div><div class="line"></div><div class="line">&#123;</div><div class="line">  state,     <span class="comment">// 等同于 store.state, 若在模块中则为局部状态</span></div><div class="line">  rootState, <span class="comment">// 等同于 store.state, 只存在于模块中</span></div><div class="line">  commit,    <span class="comment">// 等同于 store.commit</span></div><div class="line">  dispatch,  <span class="comment">// 等同于 store.dispatch</span></div><div class="line">  getters    <span class="comment">// 等同于 store.getters</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Axios的配置"><a href="#Axios的配置" class="headerlink" title="Axios的配置"></a>Axios的配置</h2><p>这个是我项目内Axios的配置，主要做了下面几件事情</p>
<ol>
<li>5秒的超时验证</li>
<li>POST的设置</li>
<li>统一的response封装。我通过接口传回的CODE码去判断该请求是否正确<br>如果想去看更详细的解析可以通过<a href="https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/">Axios的配置</a></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'./whole'</span>    <span class="comment">//alert</span></div><div class="line"></div><div class="line">axios.defaults.timeout = <span class="number">5000</span>;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line">axios.defaults.baseURL = <span class="string">'http://xxx.xxx.com'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//POST传参序列化</span></div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(config.method  === <span class="string">'post'</span>)&#123;</div><div class="line">    config.data = qs.stringify(config.data);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;,(error) =&gt;&#123;</div><div class="line">   _.toast(<span class="string">"错误的传参"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//code状态码200判断</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.data.code != <span class="string">'200'</span>)&#123;</div><div class="line">    _.toast(res.data.msg);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  _.toast(<span class="string">"网络异常"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</div></pre></td></tr></table></figure>
<h2 id="完成一个请求操作"><a href="#完成一个请求操作" class="headerlink" title="完成一个请求操作"></a>完成一个请求操作</h2><p>下面介绍一个登陆action的操作，</p>
<ol>
<li>在接口发起请求时跳出loading</li>
<li>接口请求成功结束loading，并保存数据进入store</li>
<li>接口请求失败抛出异常，结束loading。</li>
<li>返回一个Promise对象，方便继续操作。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> login = <span class="function">(<span class="params">&#123; commit &#125;,params</span>) =&gt;</span> &#123;</div><div class="line">  _.busy();               <span class="comment">//loding开始</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123; </div><div class="line">    axios(&#123;</div><div class="line">      <span class="attr">method</span>:<span class="string">'get'</span>,</div><div class="line">      <span class="attr">url</span>: <span class="string">'teacher/login'</span>,</div><div class="line">      <span class="attr">params</span>: &#123;</div><div class="line">        <span class="attr">moblie</span>:params.mobile,</div><div class="line">        <span class="attr">password</span>:params.password,</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">        commit(types.LOGIN,response.data.data); <span class="comment">//获得的数据通过mutation，存入store中</span></div><div class="line">        _.leave();  <span class="comment">//loding结束</span></div><div class="line">        resolve(response);</div><div class="line">    &#125;)</div><div class="line">    .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</div><div class="line">      _.leave();  <span class="comment">//loding结束</span></div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  [types.LOGIN](state, data)&#123;</div><div class="line">    state.token = data.token;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用action</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; mapActions,mapGetters  &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">methods</span>:&#123;</div><div class="line">    ...mapActions([<span class="string">'login'</span>]),                   <span class="comment">//注入action</span></div><div class="line">    _login()&#123;</div><div class="line">      <span class="keyword">let</span> params = &#123;</div><div class="line">        <span class="attr">mobile</span>:<span class="keyword">this</span>.mobile,</div><div class="line">        <span class="attr">pwd</span>:<span class="keyword">this</span>.password</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.login(params).</div><div class="line">      then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">          <span class="keyword">this</span>.$router.replace(<span class="string">'/main/index'</span>);          <span class="comment">//正确完成后进入主页</span></div><div class="line">      &#125;)</div><div class="line">      .catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;                                 <span class="comment">//错误则清空密码文本框</span></div><div class="line">          <span class="comment">//可以在这里对Error进行捕获，然后根据错误类型进行相对应的处理</span></div><div class="line">          <span class="keyword">this</span>.pwd = <span class="string">''</span>;                           </div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="一点说明"><a href="#一点说明" class="headerlink" title="一点说明"></a>一点说明</h2><p>因为在Vuex2中action可以直接拿到Store的值，所以我们可以通过 <code>rootState</code>这个参数拿到根的store值，通过<code>state</code>拿到当前模块中store的值<br>都没必要在从getter里拿到值，然后通过params的方式传入。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> xxx = <span class="function">(<span class="params">&#123;state,rootState,commit&#125;</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123; </div><div class="line">    axios(&#123;</div><div class="line">      <span class="attr">method</span>:<span class="string">'get'</span>,</div><div class="line">      <span class="attr">url</span>: <span class="string">'teacher/workbook/class/exercise'</span>,</div><div class="line">      <span class="attr">params</span>: &#123;</div><div class="line">        <span class="string">"token"</span>:rootState.login.token,          <span class="comment">//从store根中拿到数据</span></div><div class="line">        <span class="string">"classCode"</span>:state.code,                 <span class="comment">//从当前模块中拿到数据</span></div><div class="line">        <span class="string">"chapterId"</span>:rootState.route.params.chapterId</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">    .then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">      commit(types.WORKBOOK_CLASS_EXERCISE,response.data.data)</div><div class="line">      resolve(response);</div><div class="line">    &#125;)</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样是不是更方便我们去审查action的代码？</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Axios的配置]]></title>
      <url>http://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<blockquote>
<p>以前写Vue项目的时候都是使用vue-resource做为项目ajax库，在11月份的某一天尤大微博的更新表示ajax的库应该是通用的，放弃了对vue-resource的技术支持，推荐使用<a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a>。</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1987062-b3255d564903d3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此处输入图片的描述"><br>既然尤大推荐的应该有过人之处，好吧于是在新的项目上开始使用Axios,开启这段学习（踩坑）的历程。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install axios</div></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>Axios和其他的ajax库都是很类似的，提供了2种使用的方式一种是直接使用实例方法的如：<br>下面是实例的所有可用方法，方法中的config会与axios实例中的config合并。（实例可以将一些通用的config先配置好）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//axios.get</span></div><div class="line"><span class="comment">//axios.post</span></div><div class="line"></div><div class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<h1 id="Config-配置"><a href="#Config-配置" class="headerlink" title="Config 配置"></a>Config 配置</h1><p>Axios的配置参数很多，我们来一一了解</p>
<ul>
<li>url —— 用来向服务器发送请求的url</li>
<li>method —— 请求方法，默认是GET方法</li>
<li>baseURL —— 基础URL路径，假如url不是绝对路径，如<a href="https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL" target="_blank" rel="external">https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL</a> + url。</li>
<li>transformRequest —— transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。</li>
<li>transformResponse —— transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。</li>
<li>headers —— 发送自定义Headers头文件，头文件中包含了http请求的各种信息。</li>
<li>params —— params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&amp;param2=value2。<br>paramsSerializer —— params参数序列化器。</li>
<li>data —— data是在发送POST、PUT或者PATCH请求的数据对象。</li>
<li>timeout —— 请求超时设置，单位为毫秒</li>
<li>withCredentials —— 表明是否有跨域请求需要用到证书</li>
<li>adapter —— adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response</li>
<li>auth —— auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。</li>
<li>responseType —— 表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。</li>
<li>xsrfCookieName —— 用作 xsrf token 值的 cookie 名称</li>
<li>xsrfHeaderName —— 带有 xsrf token 值 http head 名称</li>
<li>onUploadProgress —— 允许在上传过程中的做一些操作</li>
<li>onDownloadProgress —— 允许在下载过程中的做一些操作</li>
<li>maxContentLength —— 定义了接收到的response响应数据的最大长度。</li>
<li>validateStatus —— validateStatus定义了根据HTTP响应状态码决定是否接收或拒绝获取到的promise。如果 validateStatus 返回 true (或设置为 null 或 undefined ),promise将被接收;否则,promise将被拒绝。</li>
<li>maxRedirects —— maxRedirects定义了在node.js中redirect的最大值，如果设置为0，则没有redirect。</li>
<li>httpAgent —— 定义在使用http请求时的代理</li>
<li>httpsAgent —— 定义在使用https请求时的代理</li>
<li>proxy —— proxy定义代理服务器的主机名和端口，auth</li>
<li>cancelToken —— cancelToken定义一个 cancel token 用于取消请求</li>
</ul>
<h1 id="Response-返回"><a href="#Response-返回" class="headerlink" title="Response 返回"></a>Response 返回</h1><p>当我们ajax获取数据成功后会返回一个response对象，它包含了以下内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&#123;</div><div class="line">  <span class="comment">// 服务器返回的数据</span></div><div class="line">  data: &#123;&#125;,</div><div class="line">  <span class="comment">// HTTP状态吗</span></div><div class="line">  status: <span class="number">200</span>,</div><div class="line">  <span class="comment">// 服务器返回的消息</span></div><div class="line">  statusText: <span class="string">'OK'</span>,</div><div class="line">  <span class="comment">// 返回头</span></div><div class="line">  headers: &#123;&#125;,</div><div class="line">  <span class="comment">// 在返回我们的配置</span></div><div class="line">  config: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="统一Config配置"><a href="#统一Config配置" class="headerlink" title="统一Config配置"></a>统一Config配置</h1><p>在接口测试中，我们经常需要切换线上环境和测试环境，这里我们都可以通过Config来配置，这样我们所有的发起的请求都是通过这个基本的URL走了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">axios.defaults.timeout = <span class="number">5000</span>;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line">axios.defaults.baseURL = <span class="string">'http://www.xxxx.xxx/api'</span>;</div><div class="line"><span class="comment">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div></pre></td></tr></table></figure>
<h1 id="Interceptors-拦截器"><a href="#Interceptors-拦截器" class="headerlink" title="Interceptors 拦截器"></a>Interceptors 拦截器</h1><p>这里我必须重点介绍，在我们发起大量的请求时候，需要对请求做统一的处理那就用到它了。笔者在使用了<code>vue-resource</code>和<code>axios</code>之后亲身比较，<code>axios</code>的配置更加人性化。<br>官方的API上这样介绍</p>
<blockquote>
<p>You can intercept requests or responses before they are handled by then or catch.<br>您可以拦截请求或响应之前，他们处理的操作或者异常</p>
</blockquote>
<h2 id="request统一处理操作"><a href="#request统一处理操作" class="headerlink" title="request统一处理操作"></a>request统一处理操作</h2><p>如果是POST的请求，配置中可不能用<code>params</code>字段了，需要使用<code>data</code>字段。<br>这里有个小地方需要注意，POST的传参需要序列化，不然服务端不会正确的接收哦，会报错。所以这里我们要对request的数据进行一次序列化。这里我用了<code>qs</code>,大家需要install一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></div><div class="line"></div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line"></div><div class="line"><span class="comment">//POST传参序列化</span></div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(config.method  === <span class="string">'post'</span>)&#123;</div><div class="line">    config.data = qs.stringify(config.data);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;,(error) =&gt;&#123;</div><div class="line">   alert(<span class="string">"错误的传参"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="response统一处理操作"><a href="#response统一处理操作" class="headerlink" title="response统一处理操作"></a>response统一处理操作</h2><p>也就是说我们可以统一的在发起请求前，或者获得数据，对其进行统一的操作。这点非常的高效，在笔者的项目中，接口会返回一个code,就和微信API一样，code为200代表返回请求数据正确为其它时就自动跳出弹窗打印消息即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//code状态码200判断</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.data.code != <span class="string">'200'</span>)&#123;</div><div class="line">    alert(res.data.msg);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  alert(<span class="string">"网络异常"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果发生这些错误了我要结束当前的Promise所以返回一个<code>Promise.reject(res)</code>，停止Promise队列下面的操作,如果有对于Promise不熟悉的童鞋请自行搜索<code>Promise</code>(这里还遇到了一个小坑最后会介绍)</p>
<h1 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h1><p>好了介绍了这么多介绍下我的axios配置的文件设置吧,这个文件名是<code>config/http.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> _ <span class="keyword">from</span> <span class="string">'./whole'</span></div><div class="line"></div><div class="line">axios.defaults.timeout = <span class="number">5000</span>;</div><div class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class="line">axios.defaults.baseURL = <span class="string">'http://www.guinaben.com:8070'</span>;</div><div class="line"><span class="comment">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div><div class="line"></div><div class="line"><span class="comment">//POST传参序列化</span></div><div class="line">axios.interceptors.request.use(<span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">if</span>(config.method  === <span class="string">'post'</span>)&#123;</div><div class="line">    config.data = qs.stringify(config.data);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> config;</div><div class="line">&#125;,(error) =&gt;&#123;</div><div class="line">   _.toast(<span class="string">"错误的传参"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//code状态码200判断</span></div><div class="line">axios.interceptors.response.use(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</div><div class="line">  <span class="keyword">if</span>(res.data.code != <span class="string">'200'</span>)&#123;</div><div class="line">    _.toast(res.data.msg);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;, (error) =&gt; &#123;</div><div class="line">  _.toast(<span class="string">"网络异常"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios;</div></pre></td></tr></table></figure></p>
<p>发起的请求<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'config/http'</span></div><div class="line"></div><div class="line">axios(&#123;</div><div class="line">  <span class="attr">method</span>:<span class="string">'get'</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'xxxx/xxxxx'</span>,</div><div class="line">  <span class="attr">params</span>: &#123;</div><div class="line">    <span class="string">"textbook_id"</span>:id,</div><div class="line">    <span class="string">"token"</span>:token</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">  resolve(response);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">axios(&#123;</div><div class="line">  <span class="attr">method</span>:<span class="string">'post'</span>,</div><div class="line">  <span class="attr">url</span>: <span class="string">'teacher/pwd/resetByMobile'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">   <span class="string">"textbook_id"</span>:id,</div><div class="line">    <span class="string">"token"</span>:token</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</div><div class="line">    resolve(response);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h1 id="一定要看"><a href="#一定要看" class="headerlink" title="一定要看"></a>一定要看</h1><p>因为这里我使用的<code>Promise</code>,所以在安卓4.4.3一下的手机还是不支持Promise的，所以会报错。需要引入<code>npm install babel-polyfill</code>和<code>npm install babel-runtime</code>，在入口文件上加上即可。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></div></pre></td></tr></table></figure></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>下一篇将带来Vuex2和axios的配合，希望此篇能带给大家帮助。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开博第一篇纪念]]></title>
      <url>http://ygxdxx.coding.me/2017/01/28/hello/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天鸡年的第一天，说了好久想搭建自己的博客记录开发的日常，结果一拖再拖Orz（拖延症伤不起）。今天花了一下午终于搭建完成。</p>
<h2 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h2><p>1.Hexo<br>前端建站神器，这里不多说了。<a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="external">Hexo文档</a></p>
<p>2.主题<br>当时在发现这个主题的时候是比较惊艳的，个人比较喜欢谷歌的这种风格，作者是位国人。很感谢无私的付出<br><a href="https://material.viosey.com/" target="_blank" rel="external">Material Theme</a></p>
<p>3.Coding Pages<br>本来打算使用Github Pages，有时候墙的厉害。使用<a href="https://coding.net/help/doc/pages/index.html" target="_blank" rel="external">Coding Pages</a>做为承载网站。<br>主要使用「用户 Pages」类型，在个人项目里新建一个名为 {user_name}.coding.me 的项目，然后将Hexo中生成的Public文件夹作为Git的主目录即可。</p>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>1._config.yml 是全站的控制文件，在配置的时候，有时候稍不注意将下面代码前的空格删掉了运行就会报错。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//source前面有一个空格</span></div><div class="line">source_dir: source</div></pre></td></tr></table></figure></p>
<p>2.如果安装了新的主题，就需要到该主题下的_config.yml去配置。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>新的一年，以此篇开始。Fighting~</p>
]]></content>
    </entry>
    
  
  
</search>
