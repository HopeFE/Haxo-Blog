{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.jpg","path":"img/daily_pic.jpg","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.png","path":"img/upyun_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/highlight.min.js","path":"js/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","path":"img/footer/footer_ico-bilibili.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","path":"img/footer/footer_ico-facebook.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.png","path":"img/footer/footer_ico-github.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","path":"img/footer/footer_ico-gplus.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","path":"img/footer/footer_ico-linkedin.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","path":"img/footer/footer_ico-tumblr.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","path":"img/footer/footer_ico-twitter.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","path":"img/footer/footer_ico-telegram.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","path":"img/footer/footer_ico-weibo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-coding.png","path":"img/footer/footer_ico-coding.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","path":"img/footer/footer_ico-instagram.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","path":"img/footer/footer_ico-zhihu.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/agate.css","path":"css/highlight/agate.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/androidstudio.css","path":"css/highlight/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/arduino-light.css","path":"css/highlight/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/arta.css","path":"css/highlight/arta.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/ascetic.css","path":"css/highlight/ascetic.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-cave-dark.css","path":"css/highlight/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-dune-dark.css","path":"css/highlight/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-cave-light.css","path":"css/highlight/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-dune-light.css","path":"css/highlight/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-estuary-dark.css","path":"css/highlight/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-estuary-light.css","path":"css/highlight/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-forest-dark.css","path":"css/highlight/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-forest-light.css","path":"css/highlight/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-heath-dark.css","path":"css/highlight/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-heath-light.css","path":"css/highlight/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-lakeside-dark.css","path":"css/highlight/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-lakeside-light.css","path":"css/highlight/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-plateau-dark.css","path":"css/highlight/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-plateau-light.css","path":"css/highlight/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-savanna-dark.css","path":"css/highlight/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-savanna-light.css","path":"css/highlight/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-seaside-light.css","path":"css/highlight/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-dark.css","path":"css/highlight/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-seaside-dark.css","path":"css/highlight/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-light.css","path":"css/highlight/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atom-one-dark.css","path":"css/highlight/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/atom-one-light.css","path":"css/highlight/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/codepen-embed.css","path":"css/highlight/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/brown-paper.css","path":"css/highlight/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/dark.css","path":"css/highlight/dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/color-brewer.css","path":"css/highlight/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/darkula.css","path":"css/highlight/darkula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/docco.css","path":"css/highlight/docco.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/darcula.css","path":"css/highlight/darcula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/far.css","path":"css/highlight/far.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/foundation.css","path":"css/highlight/foundation.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/dracula.css","path":"css/highlight/dracula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/github.css","path":"css/highlight/github.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/googlecode.css","path":"css/highlight/googlecode.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/grayscale.css","path":"css/highlight/grayscale.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/gruvbox-dark.css","path":"css/highlight/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/github-gist.css","path":"css/highlight/github-gist.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/gruvbox-light.css","path":"css/highlight/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/hopscotch.css","path":"css/highlight/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/hybrid.css","path":"css/highlight/hybrid.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/idea.css","path":"css/highlight/idea.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/ir-black.css","path":"css/highlight/ir-black.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/kimbie.dark.css","path":"css/highlight/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/magula.css","path":"css/highlight/magula.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/kimbie.light.css","path":"css/highlight/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/mono-blue.css","path":"css/highlight/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/monokai.css","path":"css/highlight/monokai.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/monokai-sublime.css","path":"css/highlight/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/ocean.css","path":"css/highlight/ocean.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/paraiso-dark.css","path":"css/highlight/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/obsidian.css","path":"css/highlight/obsidian.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/pojoaque.css","path":"css/highlight/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/paraiso-light.css","path":"css/highlight/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/purebasic.css","path":"css/highlight/purebasic.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/qtcreator_light.css","path":"css/highlight/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/qtcreator_dark.css","path":"css/highlight/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/rainbow.css","path":"css/highlight/rainbow.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/school-book.css","path":"css/highlight/school-book.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/railscasts.css","path":"css/highlight/railscasts.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/solarized-dark.css","path":"css/highlight/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/solarized-light.css","path":"css/highlight/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/solarized-white.css","path":"css/highlight/solarized-white.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night-blue.css","path":"css/highlight/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/sunburst.css","path":"css/highlight/sunburst.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night.css","path":"css/highlight/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night-eighties.css","path":"css/highlight/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/vs.css","path":"css/highlight/vs.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow.css","path":"css/highlight/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/tomorrow-night-bright.css","path":"css/highlight/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/xt256.css","path":"css/highlight/xt256.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/xcode.css","path":"css/highlight/xcode.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/highlight/zenburn.css","path":"css/highlight/zenburn.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/jquery.poptrox.min.js","path":"js/gallery/jquery.poptrox.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/main.min.js","path":"js/gallery/main.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/skel.min.js","path":"js/gallery/skel.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/util.min.js","path":"js/gallery/util.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/material/.gitignore","hash":"b10b1e6b53106a182506d771bc2c405b0245a0c9","modified":1485603302050},{"_id":"themes/material/.travis.yml","hash":"639b4687fa0c080b419405136a5081603a83b6c0","modified":1485603302053},{"_id":"themes/material/README.md","hash":"5a91c828e5d0c8c1be4c67653195e911e6f42c95","modified":1485603302058},{"_id":"themes/material/LICENSE","hash":"2ea9f02239dc6b5fdbfff01fcdf85bcc8c13667c","modified":1485603302056},{"_id":"themes/material/_config.yml","hash":"71de6b123520128dd89145cdbfc87ab21dde2480","modified":1488177697121},{"_id":"themes/material/contributing.json","hash":"f6f039672fef8e0267d9586c73d1a425c6c882d8","modified":1485603302062},{"_id":"themes/material/lint.sh","hash":"b082677c539a554f3ba9435e9569b7257610c08a","modified":1485603302250},{"_id":"themes/material/package.json","hash":"ef6da09bbf3e331e9de1a3e20131cbb935e39fc9","modified":1485603302252},{"_id":"source/_posts/Vue2全家桶与微信公众号开发-1.md","hash":"8ef04216c8a3eae3778a8a78ab276d66abe63ffd","modified":1488790843490},{"_id":"source/_posts/axios全攻略.md","hash":"72315ceb89302bce050f0ccd1aab7b80ee9262d1","modified":1488865476899},{"_id":"source/_posts/Axios的配置.md","hash":"4da2b2e1548dd1e30ec03e1eb423f60aaf071aa0","modified":1488790857343},{"_id":"source/_posts/hello.md","hash":"e63082df7c09e3d66754119aea1b4ff1f574fe31","modified":1488790853857},{"_id":"themes/material/.git/COMMIT_EDITMSG","hash":"acb7b241ea842c5107d065f39d00f33eb0fb25c9","modified":1485655478274},{"_id":"source/_posts/Vuex2与Axios开发.md","hash":"b7951f52f9b8e1dbfe1a607a30046712a657bd75","modified":1488864826000},{"_id":"themes/material/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1485603301968},{"_id":"themes/material/.git/config","hash":"7f8f7c4b6a720242e67dcf733b8111edbdb7f889","modified":1485603301998},{"_id":"themes/material/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1485603044616},{"_id":"themes/material/.git/index","hash":"a26b1745c1723dc6dd9f7a2d0f60d73df5f98d1c","modified":1485655478268},{"_id":"themes/material/.git/packed-refs","hash":"b0241d72c811754a2ae359b5ba5f15d8a61ffed7","modified":1485603301939},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"db9ad5beabfa2b941f228b64df3e9f078579647d","modified":1485603302030},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"89a30224fc7403ebb9206ac8eb9bb25c3561d253","modified":1485603302033},{"_id":"themes/material/languages/ar.yml","hash":"165e0430a3da3c5882b5f3ca5e098a09f70a909d","modified":1485603302065},{"_id":"themes/material/languages/de.yml","hash":"379e03591ebeeaab42f8588ab05e897ba7b2e68c","modified":1485603302067},{"_id":"themes/material/languages/en.yml","hash":"b940600c889b0b722ec7f12322858572360e898e","modified":1485603302069},{"_id":"themes/material/languages/es.yml","hash":"0d72be17279100cb4c96da41945d7d8351fa0255","modified":1485603302071},{"_id":"themes/material/languages/fr.yml","hash":"00332d7dd371b118f52e46f65256eb3c10ecd17d","modified":1485603302073},{"_id":"themes/material/languages/ms.yml","hash":"5bf0268854ba1f8940392e80a92c8e6b0db0cbcd","modified":1485603302077},{"_id":"themes/material/languages/ja.yml","hash":"0733638e6dfa2bdf6238d2410ab5d4f76227e7cf","modified":1485603302075},{"_id":"themes/material/languages/zh-CN.yml","hash":"af9c232284013a5ae9f84fb9ea62ac82373a108d","modified":1485603302079},{"_id":"themes/material/languages/zh-TW.yml","hash":"5a445321470a404e801f8b4faa89b0b9989a052c","modified":1485603302081},{"_id":"themes/material/layout/index.ejs","hash":"6d2452593a818992e530916d610b12cf1a82cab2","modified":1485603302241},{"_id":"themes/material/layout/layout.ejs","hash":"6e7163bb7c2db095aa5c751f5abb0dffba42356b","modified":1485603302242},{"_id":"themes/material/layout/post.ejs","hash":"1ca0ec79e39e47bd3c0db59238fc59187db37a7d","modified":1485603302247},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485603302086},{"_id":"themes/material/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1485603044636},{"_id":"themes/material/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1485603044619},{"_id":"themes/material/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1485603044622},{"_id":"themes/material/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1485603044624},{"_id":"themes/material/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1485603044620},{"_id":"themes/material/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1485603044627},{"_id":"themes/material/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1485603044625},{"_id":"themes/material/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1485603044628},{"_id":"themes/material/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1485603044632},{"_id":"themes/material/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1485603044630},{"_id":"themes/material/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1485603044633},{"_id":"themes/material/.git/logs/HEAD","hash":"d555eaf651a455530a3bb7fa73c28e52a3848695","modified":1485655478282},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"b836eedd4881575000f57b7a6e58b7e6ac48d0eb","modified":1485603302089},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"4c12ceb81c83fed5f7e7e89dbde2af9d548a7837","modified":1485603302099},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"c1ea5ebbdbc44f363891753e7bb78bdb707e197f","modified":1485603302096},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"e904df50a90823f774e32b831455a01ee1d354e2","modified":1485603302102},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"08439ca843fb5bec3ab48e9a6baf02d212ff2132","modified":1485603302105},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"a53365c8a50db079eb6602350aa3f53d3712797d","modified":1485603302107},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"82fa342d7fe4c02bdb417a75300a4860e93cd551","modified":1485603302118},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"6eb3bed89ad5853dbc10056f8c57a5ecf4cbd437","modified":1485603302110},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"0b032f47c7a3abbcdeee712ab61844981bb4c831","modified":1485603302122},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"ee75b08a39761aa5a25616ffbabb4ce9eb4850d6","modified":1485603302131},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"780e45a9c4da646bdf72669586e15674e08ee281","modified":1485740720856},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"fb12a47eb350954274982dffc4a221454e4a0fe1","modified":1485603302142},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"eabe53e9d9341101be6529d6331c617864a59b0d","modified":1485603302147},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"72634dc59ed07cf128e7b94ef68f3643d330efe7","modified":1485943454067},{"_id":"themes/material/layout/_partial/head.ejs","hash":"8873959841d065d493882c87c409eaced5f39374","modified":1485603302150},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"1b9c0681f9a259f1431bc5bb2f97e0b8b45e2f83","modified":1485603302160},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"74de1f8ef14b58c21eb7895e9c9b3f3080d40aa4","modified":1485603302163},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"81f47a927ca4ffebf7768aa63c59523a792990de","modified":1485603302168},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"d93b04ae59602991368e940431cd4db266616a17","modified":1485603302174},{"_id":"themes/material/layout/_partial/nprogress.ejs","hash":"c3389daf95014d2e1e3537cd15baac014aa16d4b","modified":1485603302171},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"05520fdd12408d6ab96dfbe9323faae9187dbd5d","modified":1485603302178},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"6e9b69fcb444cfc369653d7062721c92b0c04a94","modified":1485603302176},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"6b514c951b2535a0c1d22224c06856588ba18026","modified":1485603302181},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"b64ac5d04ddbe8a8c42b7aaf10e9fddec3a2e109","modified":1485603302194},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"20acafaa1fddf22e1db0fad2fee95a3119c84122","modified":1485603302190},{"_id":"themes/material/layout/_partial/sidebar-sponsor.ejs","hash":"4a0e5c9f0405a500057d70e1a7699f2151678f6e","modified":1485603302197},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"2fe70d9d7eb21c00a2e86fd389128388bb8c9c25","modified":1485603302195},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"5fa89113054ae63689ad0edd1092a4bfac8cdcdb","modified":1485603302202},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"62cdda091d7901113bf32c58cc1e110908c3c135","modified":1485603302205},{"_id":"themes/material/layout/_widget/disqus.ejs","hash":"a57414d4b57e004c4753b7f793d3bc50b86b0d6d","modified":1485603302208},{"_id":"themes/material/layout/_widget/duoshuo.ejs","hash":"4c25bbc39b0a9955626039b7cab85654e2d3c887","modified":1485603302213},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"5483f0c8b753e171400d9c27a585de6de890c8ba","modified":1485603302215},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"69f5f3b2a9a2c84f0c8b424a412ef354cb0481a7","modified":1485603302217},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"a5ce35f2a456dc424e09b7e105b8d789dfe008df","modified":1485603302221},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"2bdb6a28eab0cbee9a95c0b6ee7ed2ea3795cd14","modified":1485603302226},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"8d4474d5c797a6fdececeecb946e993a19fe9a40","modified":1485603302228},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"ae562eea1b432e44927a999381c9c2c43d5c1cc4","modified":1485603302230},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"d080683e457fc9b5501d9c1d25b900cdcd4d147e","modified":1485603302232},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"353fe66ab5d5686f798d2a906a293341640db38b","modified":1485603302236},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"ff3a8bebfaf298cd362b9bb13639bfacf4c8e380","modified":1485603302239},{"_id":"themes/material/source/img/avatar.png","hash":"67f44f4a29122341d6cb299489098821a47ce645","modified":1485605348623},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1485603302572},{"_id":"themes/material/source/img/daily_pic.jpg","hash":"8f6052d803dce3f993d900c007a8525616fa10f7","modified":1485695742303},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1485603302582},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1485603302660},{"_id":"themes/material/source/css/duoshuo.css","hash":"7372200a8d019d4c368283de089d2e0481cb1de7","modified":1485603302257},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1485603302259},{"_id":"themes/material/source/img/sidebar_header.png","hash":"2cbc5ce550c4eac3d0590114f624c48a5fb98ab3","modified":1485607470000},{"_id":"themes/material/source/img/upyun_logo.png","hash":"aee4e90c4e2e72ef7036668c52dabcd8d028ee2f","modified":1485603302781},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1485603302261},{"_id":"themes/material/source/css/ie-blocker.css","hash":"121016e89d5f8b1f84f2e0a22da30f3c096de36e","modified":1485603302428},{"_id":"themes/material/source/css/uc.css","hash":"fdd08a03390256c5b89e38cad6e53228a49f02e1","modified":1485603302445},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1485603302461},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1485603302463},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"0bbd768e3be0081cf8d3fc3a9568c6a0f951ada7","modified":1485603302791},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"198ffa1583343a5b5bf5e52afcfbff96fd0ef569","modified":1485603302793},{"_id":"themes/material/source/js/highlight.min.js","hash":"e2959a551162dbea01307c72f7bd8d9d236b0cd0","modified":1485603302790},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1485603302808},{"_id":"themes/material/source/js/smoothscroll.js","hash":"53204da28f2ccfd4af92511969319c574da1f7b5","modified":1485603302811},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1485603302578},{"_id":"themes/material/source/css/material.min.css","hash":"f3c8e6a9d94e6cad30c6628e1d732e6ee00d5fce","modified":1485603302437},{"_id":"themes/material/source/css/style.css","hash":"80f630335467f259dc992182c91e502eeb92101f","modified":1485603302440},{"_id":"themes/material/source/css/style.min.css","hash":"2460d86314e416338aa5ec6ec032be5d8e100581","modified":1485603302443},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1485603302449},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1485603302458},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1485603302534},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1485603302557},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1485603302561},{"_id":"themes/material/source/js/jquery.min.js","hash":"d0c03f4b0c3b72172804cbc5d19e44b3a0a9a171","modified":1485603302795},{"_id":"themes/material/source/js/js.js","hash":"c8d49615327c38fd7d00dff47fdd0d52fb94ca4c","modified":1485603302798},{"_id":"themes/material/source/js/js.min.js","hash":"1113143e83eaad19f43e84f9e8782f8afa3c9e67","modified":1485603302803},{"_id":"themes/material/.git/objects/0d/502b07815a6c4a6c87f8145b9052b30e253268","hash":"ddc1df5f96686d69441412d8f1ab479799a94c48","modified":1485655478259},{"_id":"themes/material/.git/objects/a0/05f74dc41c69e75c7c9850270f1d220619393e","hash":"9fc3edbdb7a4dc519bf34024c8bb579e955a7d01","modified":1485655478267},{"_id":"themes/material/.git/objects/05/6cd9135ebe75cf0ee71a962cb51c3de5892634","hash":"0ad1a4db6e23d5ed312e913dc7657e32b02f7e05","modified":1485655478261},{"_id":"themes/material/.git/objects/16/abde42fc6b230bc4266d210c7952e6d8f1d52b","hash":"defecd743b75726fd3bd27d57f6b50e4f60a7858","modified":1485655477810},{"_id":"themes/material/.git/objects/4d/929475fa924832212401b8753df094257dc21b","hash":"491b6fd951654543b05ff000ab082be133af404a","modified":1485655477763},{"_id":"themes/material/.git/objects/78/10a9f8b668c556538ca712e3104cc7ffc1db06","hash":"f348e19abb5f6e0498243a1ba9d4ea7b936a6fe9","modified":1485655477767},{"_id":"themes/material/.git/objects/84/ad9846e46d87007bd7b34e52eae5f7c0c0be6b","hash":"f7b6ff9ee77190544df59acb3aa09466de97bf52","modified":1485655477776},{"_id":"themes/material/.git/objects/e1/b932104cc2cdad905056ffa3ca79064aaad8f5","hash":"ce197c6e55644ae1cb4a7468d93d829180ee6cb7","modified":1485655478276},{"_id":"themes/material/.git/objects/c6/48fef14d5f876475504f99fa922218ef7f9054","hash":"3f461ebc14d91d83507654ab76d3f149859c039a","modified":1485655477771},{"_id":"themes/material/.git/refs/heads/master","hash":"ce79ad6e3326db2daf6d1822a753d78c6911cb4e","modified":1485655478281},{"_id":"themes/material/.git/objects/c4/9d7a85b86d1f7f553d0abc431b2b3a894c440a","hash":"b35a56cb922e647bc65e1fa7bb94c64f8b4b00a2","modified":1485655477804},{"_id":"themes/material/.git/objects/bc/01ee8794eba168ba15c02f928fecb627a8f1ac","hash":"a67430f32026e8566175b9f108cef78ee5c682ba","modified":1485655478264},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.png","hash":"f922bc4606f4ecb3ec2bc1b2bfa092643ffa2e37","modified":1485603302590},{"_id":"themes/material/source/img/footer/footer_ico-facebook.png","hash":"66f959829d878794e66fd0e40c0d6bd843cc0cde","modified":1485603302595},{"_id":"themes/material/source/img/footer/footer_ico-github.png","hash":"4488aa8fc794beaba3e4c80d1f1b9d6c218b31ab","modified":1485603302598},{"_id":"themes/material/source/img/footer/footer_ico-gplus.png","hash":"20971cbed2ebf58b9e3b087051f7fc56073da31d","modified":1485603302601},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.png","hash":"3d93bb435053b93243e3c259c448caf4ed00627e","modified":1485603302615},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.png","hash":"447421c1dcced081fa5fb0355421b7bc71fe3f76","modified":1485603302631},{"_id":"themes/material/source/img/footer/footer_ico-twitter.png","hash":"98b6529d3e08d5d086a4df85c20265c4517ec9a8","modified":1485603302635},{"_id":"themes/material/source/img/footer/footer_ico-telegram.png","hash":"1095c5279c498412ee314f4469768636e82148cb","modified":1485603302619},{"_id":"themes/material/source/img/footer/footer_ico-weibo.png","hash":"8d46998b88f57a2d92effaa65e97ee36906396c2","modified":1485603302643},{"_id":"themes/material/source/img/footer/footer_ico-coding.png","hash":"97b3e602a60ca131afff97f926af9c5c7186d59f","modified":1485741067147},{"_id":"themes/material/source/img/footer/footer_ico-instagram.png","hash":"e8ec64e6f2639aec952e8e4d2944d5173f62e720","modified":1485603302606},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.png","hash":"6b94cdb6e0a69e169baec6e22fe3a6e51b7ba4b5","modified":1485603302647},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1485603302650},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1485603302653},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1485603302656},{"_id":"themes/material/source/img/random/material-1.png","hash":"93a0743b9680da4740e8905bb282dd2a82ee4f51","modified":1485607701000},{"_id":"themes/material/source/img/random/material-2.png","hash":"d07c391c27317f4e8e85b15cf1a585c996313f30","modified":1485607707000},{"_id":"themes/material/source/img/random/material-4.png","hash":"addcae1f64310bec1fe6ae0bc25056fa653849b6","modified":1485607714000},{"_id":"themes/material/source/css/highlight/agate.css","hash":"267d7a729d7106899d887940bd62f01a7f8810a8","modified":1485603302263},{"_id":"themes/material/source/css/highlight/androidstudio.css","hash":"bd1d92a769b5e54f65ed659be012a5da7b933f67","modified":1485603302265},{"_id":"themes/material/source/css/highlight/arduino-light.css","hash":"459a63e66124cf3db5fdcbd0b211199048d718d3","modified":1485603302267},{"_id":"themes/material/source/css/highlight/arta.css","hash":"0c83871a3be547414936f040d1b651796ed432e9","modified":1485603302270},{"_id":"themes/material/source/css/highlight/ascetic.css","hash":"1b3f8c010d93271fe0b8973b24a83cccb43d2ab5","modified":1485603302272},{"_id":"themes/material/source/css/highlight/atelier-cave-dark.css","hash":"0fe44a5e2e47a6d5f808f343be5e0ee38a157513","modified":1485603302273},{"_id":"themes/material/source/css/highlight/atelier-dune-dark.css","hash":"371fbf41c919b2cf66dbd64db24fc9a9f270f0ca","modified":1485603302277},{"_id":"themes/material/source/css/highlight/atelier-cave-light.css","hash":"8e8a3cd5611034e8cb1cf17ae598cb146feae0e5","modified":1485603302275},{"_id":"themes/material/source/css/highlight/atelier-dune-light.css","hash":"978c280fbb391ab34ec798ff63d27ccf0622ffc5","modified":1485603302279},{"_id":"themes/material/source/css/highlight/atelier-estuary-dark.css","hash":"6cd190c8e9645ec6cc3aa897f2076c9a2a65fbf4","modified":1485603302282},{"_id":"themes/material/source/css/highlight/atelier-estuary-light.css","hash":"eaf8d2305631471a5c69039f5f666ec7cdb0991e","modified":1485603302284},{"_id":"themes/material/source/css/highlight/atelier-forest-dark.css","hash":"8d9cece07b6ea31e01fec11987b42ffc5bfb8c3f","modified":1485603302286},{"_id":"themes/material/source/css/highlight/atelier-forest-light.css","hash":"cdfdc19fd6e33879b2212cf41d5159484d72b1ac","modified":1485603302288},{"_id":"themes/material/source/css/highlight/atelier-heath-dark.css","hash":"707c60a91e0390b4d481710e5cab28441b1a6d20","modified":1485603302290},{"_id":"themes/material/source/css/highlight/atelier-heath-light.css","hash":"9b034e416e989edba7d2c2fd57ed706dc2059c4e","modified":1485603302292},{"_id":"themes/material/source/css/highlight/atelier-lakeside-dark.css","hash":"6f9102332449833997b2e72e8658fb9de212bc48","modified":1485603302294},{"_id":"themes/material/source/css/highlight/atelier-lakeside-light.css","hash":"180699d969cb62743bc8e4cf4dc5b88ea1c6ed9b","modified":1485603302297},{"_id":"themes/material/source/css/highlight/atelier-plateau-dark.css","hash":"4d69e5501ec2a7b81810466837ec731a81590d4d","modified":1485603302298},{"_id":"themes/material/source/css/highlight/atelier-plateau-light.css","hash":"f8e768bd2b111a4dffb6100391b647f6d9b1f445","modified":1485603302301},{"_id":"themes/material/source/css/highlight/atelier-savanna-dark.css","hash":"3768ba3e44fc1038adb09ff3adfbe4c8d807c338","modified":1485603302304},{"_id":"themes/material/source/css/highlight/atelier-savanna-light.css","hash":"fd76c75ef1f1ab693ccd09e973204cc80dae18cd","modified":1485603302305},{"_id":"themes/material/source/css/highlight/atelier-seaside-light.css","hash":"dd9657b37f5fd62a288972380193db4249bcdf96","modified":1485603302310},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-dark.css","hash":"f6dc59deaf5dc1a87229e207f18b0def15a235cd","modified":1485603302314},{"_id":"themes/material/source/css/highlight/atelier-seaside-dark.css","hash":"f44bb322aab7a93f0c52a39e878670b7d6c2a8b8","modified":1485603302307},{"_id":"themes/material/source/css/highlight/atelier-sulphurpool-light.css","hash":"4783dd049a048c7858603984b61b5f7db920c44d","modified":1485603302315},{"_id":"themes/material/source/css/highlight/atom-one-dark.css","hash":"91671ed42c0ce1363843144a9666d34faddb7e27","modified":1485603302317},{"_id":"themes/material/source/css/highlight/atom-one-light.css","hash":"526e305a190476a2b28a244ca928aabdcc686c34","modified":1485603302319},{"_id":"themes/material/source/css/highlight/codepen-embed.css","hash":"a4ce8f56fa8ec5078f597db441ebeace6264a508","modified":1485603302323},{"_id":"themes/material/source/css/highlight/brown-paper.css","hash":"9a030da7dc781e1461b15186f2b01ea684ee9ad2","modified":1485603302321},{"_id":"themes/material/source/css/highlight/dark.css","hash":"d4b6d04ed87e2ef4fcd359052c0220b70060a0f3","modified":1485603302328},{"_id":"themes/material/source/css/highlight/color-brewer.css","hash":"317e097d8b2e0fd3e7c64d97bb93caa8e9e23b9d","modified":1485603302324},{"_id":"themes/material/source/css/highlight/darkula.css","hash":"d004ba64216234a53c84fa55baefdc8b371bb4d9","modified":1485603302330},{"_id":"themes/material/source/css/highlight/docco.css","hash":"9495b22865033719a0701b8e3557a843611204db","modified":1485603302332},{"_id":"themes/material/source/css/highlight/darcula.css","hash":"243e56c3eca2c7234b125df3c9a882d984f89b8a","modified":1485603302326},{"_id":"themes/material/source/css/highlight/far.css","hash":"3c9b37b9d4f992042165069792ea373ce299fa31","modified":1485603302336},{"_id":"themes/material/source/css/highlight/foundation.css","hash":"b8f36a5621cc6043fbf3ba23915b6faa92b2e6ba","modified":1485603302338},{"_id":"themes/material/source/css/highlight/dracula.css","hash":"896157dc66de96b3e8ac2c2d032ac1f79f42ac42","modified":1485603302334},{"_id":"themes/material/source/css/highlight/github.css","hash":"6f28691831ef118939d2e109a205b425a5249b90","modified":1485603302343},{"_id":"themes/material/source/css/highlight/googlecode.css","hash":"8ea1780e834b7f40c962744cb4ef533f9b805f9b","modified":1485603302345},{"_id":"themes/material/source/css/highlight/grayscale.css","hash":"b2074d4f1ffa928a9948a9edecf8e4ec513999e6","modified":1485603302347},{"_id":"themes/material/source/css/highlight/gruvbox-dark.css","hash":"bfe2f24aef069669dc44dba54f14b0005667d700","modified":1485603302349},{"_id":"themes/material/source/css/highlight/github-gist.css","hash":"26f7b67c3c0ad968daf23129c5706c797ce24284","modified":1485603302340},{"_id":"themes/material/source/css/highlight/gruvbox-light.css","hash":"4e5445d5eaa82f1787e91682e544fea3be3b4bb9","modified":1485603302355},{"_id":"themes/material/source/css/highlight/hopscotch.css","hash":"1043cccf681b3c58b54dc044e2fcaeb409cdbda1","modified":1485603302357},{"_id":"themes/material/source/css/highlight/hybrid.css","hash":"c1cf52abb1248498794739cea51d6ecbd7539c69","modified":1485603302360},{"_id":"themes/material/source/css/highlight/idea.css","hash":"cfdc18180d926095d8322f36f041a2cf43445eef","modified":1485603302361},{"_id":"themes/material/source/css/highlight/ir-black.css","hash":"c8ee27f6873ee1e52c394b373bc8be49d059a46c","modified":1485603302363},{"_id":"themes/material/source/css/highlight/kimbie.dark.css","hash":"8fb1f4307f136010545bb095fd9a4bd298bd9dee","modified":1485603302365},{"_id":"themes/material/source/css/highlight/magula.css","hash":"5a0e59aff9f270dbb166e2735edf0bd91569ad9d","modified":1485603302368},{"_id":"themes/material/source/css/highlight/kimbie.light.css","hash":"6c95f1dc95fe047eff53b52231a8f552ec17713d","modified":1485603302366},{"_id":"themes/material/source/css/highlight/mono-blue.css","hash":"3d78780568f60215686ca93e1459c0a86b1e13a2","modified":1485603302370},{"_id":"themes/material/source/css/highlight/monokai.css","hash":"525238932a2e8a86d36ff559ec8c56617a81c66a","modified":1485603302375},{"_id":"themes/material/source/css/highlight/monokai-sublime.css","hash":"0d16b61fd8723b61ebbb4ae85936b7222089cd5c","modified":1485603302373},{"_id":"themes/material/source/css/highlight/ocean.css","hash":"05261db4eab97828f1e0e2d8dac3c17b46c5135b","modified":1485603302379},{"_id":"themes/material/source/css/highlight/paraiso-dark.css","hash":"54a74080b472d4f02ec892383df7243a9fc0325c","modified":1485603302382},{"_id":"themes/material/source/css/highlight/obsidian.css","hash":"c8f452d1dd3c24ed1fd31a8a542976a98768f0ee","modified":1485603302377},{"_id":"themes/material/source/css/highlight/pojoaque.css","hash":"147fa0862896e6954bc6800e573d0dc009d0bd76","modified":1485603302387},{"_id":"themes/material/source/css/highlight/paraiso-light.css","hash":"ec682ddb4f6c6022e86bbc3b21fee2db17534dfa","modified":1485603302385},{"_id":"themes/material/source/css/highlight/purebasic.css","hash":"90723dc0145d109bfd8f52a6586cafc0b60f3744","modified":1485603302389},{"_id":"themes/material/source/css/highlight/qtcreator_light.css","hash":"64a3df679ec5c1189fc4f4c046da13ccfde61088","modified":1485603302394},{"_id":"themes/material/source/css/highlight/qtcreator_dark.css","hash":"f6247839bf5f054c1c67675c9a2009c9dd882a54","modified":1485603302391},{"_id":"themes/material/source/css/highlight/rainbow.css","hash":"34ebae47223dc8e1b6464880fa83e217a5774199","modified":1485603302398},{"_id":"themes/material/source/css/highlight/school-book.css","hash":"908952208417159a90bd05cd6b9c1ae6cfab5274","modified":1485603302400},{"_id":"themes/material/source/css/highlight/railscasts.css","hash":"1bb2dd8ccba3e33aa3fd419bad757b0710ca7bf3","modified":1485603302396},{"_id":"themes/material/source/css/highlight/solarized-dark.css","hash":"97bba4362e3001a93f1b111a140895cbe6047a81","modified":1485603302402},{"_id":"themes/material/source/css/highlight/solarized-light.css","hash":"fe6779c179c3e6136384e463fdc6d3b08ff88ba7","modified":1485603302405},{"_id":"themes/material/source/css/highlight/solarized-white.css","hash":"1d10f6dc697821d0959eaf975dddddff971a6d63","modified":1485603302407},{"_id":"themes/material/source/css/highlight/tomorrow-night-blue.css","hash":"8fc2bd599487fa428895af9c15278b629205a005","modified":1485603302411},{"_id":"themes/material/source/css/highlight/sunburst.css","hash":"bcbe342ac0be63bb2e8545f426e13c1751a70923","modified":1485603302409},{"_id":"themes/material/source/css/highlight/tomorrow-night.css","hash":"51486c77fab70d7615e814787531d1a7db22a65a","modified":1485603302416},{"_id":"themes/material/source/css/highlight/tomorrow-night-eighties.css","hash":"12449d31f223502297086943f1bfeeac5f28c4c1","modified":1485603302414},{"_id":"themes/material/source/css/highlight/vs.css","hash":"7f91ad5a66ffbc8db2af542bd2db0e84bcf22587","modified":1485603302420},{"_id":"themes/material/source/css/highlight/tomorrow.css","hash":"e98fd167fe9c5668165f28dd6c0ecb59b3293f67","modified":1485603302418},{"_id":"themes/material/source/css/highlight/tomorrow-night-bright.css","hash":"db7f477d609bfd0d264f69fdee32d28b2b3771ec","modified":1485603302413},{"_id":"themes/material/source/css/highlight/xt256.css","hash":"1cfc26a3ec7154a4649eee5bfe57a50e0dc5046e","modified":1485603302425},{"_id":"themes/material/source/css/highlight/xcode.css","hash":"229ba54cfed52b79c389eb094ef3e480350bf308","modified":1485603302422},{"_id":"themes/material/source/css/highlight/zenburn.css","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1485603302426},{"_id":"themes/material/source/css/material.css","hash":"a4f33bc2e224f7731456d5ee4aae2a1ac80c3011","modified":1485603302432},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1485603302454},{"_id":"themes/material/source/js/gallery/jquery.poptrox.min.js","hash":"4b156b61a32467b6bf7766201b777d8949a74ee4","modified":1485603302784},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1485603302553},{"_id":"themes/material/source/js/gallery/main.min.js","hash":"c8ab39417f0d855bd28b3f6e040e93b245ba10f1","modified":1485603302785},{"_id":"themes/material/source/js/gallery/skel.min.js","hash":"18a181affac3ac6dcb5e4504e56b14941f4f2185","modified":1485603302787},{"_id":"themes/material/source/js/gallery/util.min.js","hash":"21f9de56727e235a83d514d08a65c7ef1b09c9e9","modified":1485603302788},{"_id":"themes/material/.git/objects/c5/39ee57eeae7097a9fb6eddd87e5a64d7fcde0a","hash":"2a571caed7c3803bc6bdca42bceefc1b79d87294","modified":1485655477783},{"_id":"themes/material/.git/objects/pack/pack-96e96948cb6c9a80072d349ebdb0d8d5c1b50c3a.idx","hash":"1129044513b630e6c896b01733683d9fbf0b6a9d","modified":1485603301227},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1485603302696},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1485603302705},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1485603302708},{"_id":"themes/material/source/img/random/material-17.png","hash":"9c463f96d4dadae4e67932c2d7ed1e353c4ecca8","modified":1485603302730},{"_id":"themes/material/source/img/random/material-3.png","hash":"44a9c36137f79c036368ad623f0f970e1520ebdf","modified":1485607711000},{"_id":"themes/material/source/img/random/material-6.png","hash":"29dd92b7c110bb6dfdfc2923c33f5d0895518001","modified":1485603302761},{"_id":"themes/material/.git/logs/refs/heads/master","hash":"d555eaf651a455530a3bb7fa73c28e52a3848695","modified":1485655478283},{"_id":"themes/material/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1485603301964},{"_id":"themes/material/source/img/random/material-10.png","hash":"021dca8d2477dae8f456a0cdc2725502d3b45785","modified":1485603302679},{"_id":"themes/material/source/img/random/material-12.png","hash":"ba0c8506af62f984da564e6e390f592475e51f2d","modified":1485603302693},{"_id":"themes/material/source/img/random/material-9.png","hash":"bc4f1b42fd2d09a80ab5fef8c6066b5148db0749","modified":1485603302776},{"_id":"themes/material/source/img/random/material-11.png","hash":"637d4513d1e7beeb1e5179fa404b4b6ea61ca3dd","modified":1485603302685},{"_id":"themes/material/source/img/random/material-19.png","hash":"f0b5383ba5c7e91f711daaa6b3a520556b7ca14d","modified":1485603302739},{"_id":"themes/material/source/img/random/material-8.png","hash":"cb700661e312a5527aaf229517705adb1c1cead2","modified":1485603302773},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1485603302547},{"_id":"themes/material/.git/logs/refs/remotes/origin/HEAD","hash":"ffa0abfa04ac86831a46840888f1df2cab6c6765","modified":1485603301963},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1485603302475},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1485603302486},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1485603302508},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1485603302496},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1485603302518},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1485603302531},{"_id":"themes/material/source/img/random/material-7.png","hash":"e4aa6d4e1b52f1c097f61b5205d5b71a412e1d80","modified":1485603302768},{"_id":"themes/material/source/img/random/material-18.png","hash":"1d5bacea5d57cc3e652a7c697bcb4fbcb11e20dc","modified":1485603302735},{"_id":"themes/material/source/img/random/material-5.png","hash":"e26c197b3a765bbdcc966e4fb368c8808e9d655d","modified":1485603302758},{"_id":"themes/material/source/img/random/material-14.png","hash":"f6bd9ceca7deb32c45b02a5d89014c7ee4748833","modified":1485603302701},{"_id":"themes/material/.git/objects/pack/pack-96e96948cb6c9a80072d349ebdb0d8d5c1b50c3a.pack","hash":"64278b32c6c2e7fa97a3e53f9163ae338ffb10f6","modified":1485603301234},{"_id":"public/search.xml","hash":"5dad98826c5a67b2d8b6dc9b9f9f81b05dc1917b","modified":1488865500944},{"_id":"public/2017/02/27/axios全攻略/index.html","hash":"c18944aa54a6e55ea53b0b9ddf74da71859f1ce5","modified":1488865501371},{"_id":"public/2017/02/01/Vuex2与Axios开发/index.html","hash":"3421765715874789c8f59d025d391434bec16f79","modified":1488794219365},{"_id":"public/2017/01/29/Axios的配置/index.html","hash":"62e9d79690d87632894facb7c872eabf6259dbc8","modified":1488794219366},{"_id":"public/2017/01/28/hello/index.html","hash":"f1b1d9654f74b85fcd52d991e5903e6dcad34c51","modified":1488794219366},{"_id":"public/archives/index.html","hash":"e87bdeeccaa26ecc1a45e4ecd863db5e2f0933b3","modified":1488865501407},{"_id":"public/archives/2017/index.html","hash":"e1827a77b6558d06a445e35f55a99e447d3ae3f2","modified":1488865501408},{"_id":"public/archives/2017/01/index.html","hash":"874e9971b5302959138b12904cd4ff9aca9461aa","modified":1488794219366},{"_id":"public/archives/2017/02/index.html","hash":"aaf2861fcaa47c6ed9f9618092374b3337bfab32","modified":1488865501408},{"_id":"public/index.html","hash":"ed2743f4be9e115c767ec9645cc09e99f779e4a2","modified":1488865501408},{"_id":"public/tags/Vue/index.html","hash":"aff5d30bd4da955c4ef2418e5fcd531d0d5fb11e","modified":1488865501409},{"_id":"public/tags/axios/index.html","hash":"7d3ece631d5a2007316b2f769d1c369f5d25957b","modified":1488865501409},{"_id":"public/tags/Axio/index.html","hash":"6dfbbf7409a1578a77176184e59e6e0d8b8b6c54","modified":1488794219367},{"_id":"public/tags/Hexo/index.html","hash":"dd07fefd238acf3f77ee544dd877912f5eeea1c3","modified":1488794219367},{"_id":"public/tags/博客/index.html","hash":"c80994154f30160c0515ca04bdec482dc96b4fee","modified":1488794219367},{"_id":"public/tags/Vuex2/index.html","hash":"a0e2bab0d1f510ac093ab84a22488e632edea2c4","modified":1488794219367},{"_id":"public/tags/Axios/index.html","hash":"7f27275d76a822097a94444c5abaacf424c20aee","modified":1488794219367},{"_id":"public/2017/03/06/Vue2全家桶与微信公众号开发-1/index.html","hash":"3439d9e68882f50b015c6d3661bec29cf5df7e79","modified":1488794219373},{"_id":"public/archives/2017/03/index.html","hash":"01f33eb24d673a969bc8daecab99d0ff159f82ca","modified":1488865501408},{"_id":"public/tags/微信开发/index.html","hash":"42b865c8171457175c6ab2b7eed0e796e475c2b0","modified":1488865501409},{"_id":"source/_posts/Vue2全家桶与微信开发(一).md","hash":"fe2beda38d37e84c749e362ed733aaddc8ae719e","modified":1488864843000},{"_id":"public/2017/03/06/Vue2全家桶与微信开发(一)/index.html","hash":"2a7f1d7f99eb31fed2930b74b6a7ea4fe3cbc496","modified":1488865501411}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"[_posts]","title":"","date":"2017-02-27T06:08:19.000Z","thumbnail":"http://okkula0y9.bkt.clouddn.com/2017_03_07_3.jpg","_content":"\n# axios全攻略\n\n> axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：\n\n- 从浏览器中创建 XMLHttpRequest\n- 从 node.js 发出 http 请求\n- 支持 Promise API\n- 拦截请求和响应\n- 转换请求和响应数据\n- 取消请求\n- 自动转换JSON数据\n- 客户端支持防止 CSRF/XSRF\n\n# 引入方式\n``` javascript\n$ npm install axios\n$ cnpm install axios /*taobao源*/\n$ bower install axios\n或者使用cdn：\n<script src=\"https:/*unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n# 例子\n\n## 执行 GET 请求\n``` javascript\n/* 向具有指定ID的用户发出请求 */\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n/* 也可以通过 params 对象传递参数*/\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n## 执行 POST 请求\n``` javascript\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n## 执行多个并发请求\n``` javascript\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\naxios.all([getUserAccount(), getUserPermissions()])\n    /* 两个请求现已完成  */\n  .then(axios.spread(function (acct, perms) {\n\n  })\n);\n```\n\n\n# axios API\n可以通过将相关配置传递给 axios 来进行请求。\n\n## axios(config)\n\n``` javascript\n/* 发送一个 POST 请求*/\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n## axios(url[, config])\n\n\n发送一个 GET 请求 (GET请求是默认请求模式)\naxios('/user/12345');\n\n## 请求方法别名\n\n为了方便起见，已经为所有支持的请求方法提供了别名。\n\n- axios.request(config)\n- axios.get(url [，config])\n- axios.delete(url [，config])\n- axios.head(url [，config])\n- axios.post(url [，data [，config]])\n- axios.put(url [，data [，config]])\n- axios.patch(url [，data [，config]])\n\n### 注意\n当使用别名方法时，不需要在config中指定url，method和data属性。\n\n## 并发\n\n帮助函数处理并发请求。\n\n- axios.all(iterable)\n- axios.spread(callback)\n\n## 创建实例\n\n您可以使用自定义配置创建axios的新实例。\n\naxios.create([config])\n\n``` javascript\nvar instance = axios.create({\n  baseURL: 'https:/*some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n## 实例方法\n\n可用的实例方法如下所示。 指定的配置将与实例配置合并。\n\n- axios＃request(config)\n- axios＃get(url [，config])\n- axios＃delete(url [，config])\n- axios＃head(url [，config])\n- axios＃post(url [，data [，config]])\n- axios＃put(url [，data [，config]])\n- axios＃patch(url [，data [，config]])\n\n# 请求配置\n\n这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。\n\n``` javascript\n{\n  /* `url`是将用于请求的服务器URL*/\n  url: '/user',\n  /* `method`是发出请求时使用的请求方法 */\n  method: 'get', /* 默认*/\n  /* `baseURL`将被添加到`url`前面，除非`url`是绝对的。*/\n  /* 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。*/\n  baseURL: 'https:/*some-domain.com/api/',\n  /* `transformRequest`允许在请求数据发送到服务器之前对其进行更改*/\n  /* 这只适用于请求方法'PUT'，'POST'和'PATCH'*/\n  /* 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream*/\n  transformRequest: [function (data) {\n    /* 做任何你想要的数据转换*/\n    return data;\n  }],\n  /* `transformResponse`允许在 then / catch之前对响应数据进行更改*/\n  transformResponse: [function (data) {\n    /* Do whatever you want to transform the data*/\n    return data;\n  }],\n  /* `headers`是要发送的自定义 headers*/\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n  /* `params`是要与请求一起发送的URL参数*/\n  /* 必须是纯对象或URLSearchParams对象*/\n  params: {\n    ID: 12345\n  },\n  /* `paramsSerializer`是一个可选的函数，负责序列化`params`*/\n  /* (e.g. https:/*www.npmjs.com/package/qs, http:/*api.jquery.com/jquery.param/)*/\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n  /* `data`是要作为请求主体发送的数据*/\n  /* 仅适用于请求方法“PUT”，“POST”和“PATCH”*/\n  /* 当没有设置`transformRequest`时，必须是以下类型之一：*/\n  /* - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams*/\n  /* - Browser only: FormData, File, Blob*/\n  /* - Node only: Stream*/\n  data: {\n    firstName: 'Fred'\n  },\n  /* `timeout`指定请求超时之前的毫秒数。*/\n  /* 如果请求的时间超过'timeout'，请求将被中止。*/\n  timeout: 1000,\n  /* `withCredentials`指示是否跨站点访问控制请求*/\n  /* should be made using credentials*/\n  withCredentials: false, /* default*/\n  /* `adapter'允许自定义处理请求，这使得测试更容易。*/\n  /* 返回一个promise并提供一个有效的响应(参见[response docs](＃response-api))*/\n  adapter: function (config) {\n    /* ... */\n  },\n  /* `auth'表示应该使用 HTTP 基本认证，并提供凭据。*/\n  /* 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。*/\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n  /* “responseType”表示服务器将响应的数据类型*/\n  /* 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', /* default*/\n  /*`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称*/\n  xsrfCookieName: 'XSRF-TOKEN', /* default*/\n  /* `xsrfHeaderName`是携带xsrf令牌值的http头的名称*/\n  xsrfHeaderName: 'X-XSRF-TOKEN', /* default*/\n  /* `onUploadProgress`允许处理上传的进度事件*/\n  onUploadProgress: function (progressEvent) {\n    /* 使用本地 progress 事件做任何你想要做的*/\n  },\n  /* `onDownloadProgress`允许处理下载的进度事件*/\n  onDownloadProgress: function (progressEvent) {\n    /* Do whatever you want with the native progress event*/\n  },\n  /* `maxContentLength`定义允许的http响应内容的最大大小*/\n  maxContentLength: 2000,\n  /* `validateStatus`定义是否解析或拒绝给定的promise*/\n  /* HTTP响应状态码。如果`validateStatus`返回`true`(或被设置为`null` promise将被解析;否则，promise将被*/\n  /* 拒绝。*/\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; /* default\n  },\n  /* `maxRedirects`定义在node.js中要遵循的重定向的最大数量。*/\n  /* 如果设置为0，则不会遵循重定向。*/\n  maxRedirects: 5, /* 默认*/\n  /* `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。*/\n  /* 允许配置类似`keepAlive`的选项，*/\n  /* 默认情况下不启用。*/\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n  /* 'proxy'定义代理服务器的主机名和端口*/\n  /* `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。*/\n  /* 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。*/\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n  /* “cancelToken”指定可用于取消请求的取消令牌*/\n  /* (see Cancellation section below for details)*/\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n```\n\n使用 then 时，您将收到如下响应：\n``` javascript        \naxios.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n})\n```\n# 配置默认值\n\n您可以指定将应用于每个请求的配置默认值。\n\n## 全局axios默认值\n``` javascript\naxios.defaults.baseURL = 'https:/*api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n## 自定义实例默认值\n\n``` javascript\n/*在创建实例时设置配置默认值*/\nvar instance = axios.create({\n   baseURL：'https:/*api.example.com'*/\n});\n\n \n/*在实例创建后改变默认值*/\ninstance.defaults.headers.common ['Authorization'] = AUTH_TOKEN;\n```\n\n## 配置优先级顺序\n\n配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。\n\n``` javascript\n/*使用库提供的配置默认值创建实例*/\n/*此时，超时配置值为`0`，这是库的默认值*/\nvar instance = axios.create();\n \n/*覆盖库的超时默认值*/\n/*现在所有请求将在超时前等待2.5秒*/\ninstance.defaults.timeout = 2500;\n \n/*覆盖此请求的超时，因为它知道需要很长时间*/\ninstance.get('/ longRequest'，{\n   timeout：5000\n})\n```\n\n# 拦截器\n你可以截取请求或响应在被 then 或者 catch 处理之前\n\n``` javascript\n/*添加请求拦截器*/\naxios.interceptors.request.use(function(config){\n     /*在发送请求之前做某事*/\n     return config;\n   }，function(error){\n     /*请求错误时做些事*/\n     return Promise.reject(error);\n   });\n \n/*添加响应拦截器*/\naxios.interceptors.response.use(function(response){\n     /*对响应数据做些事*/\n      return response;\n   }，function(error){\n     /*请求错误时做些事*/\n     return Promise.reject(error);\n   });\n```\n\n如果你以后可能需要删除拦截器。\n\n``` javascript\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n你可以将拦截器添加到axios的自定义实例。\n\n``` javascript\nvar instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n\n# 消除\n\n您可以使用取消令牌取消请求。\n\n> axios cancel token API基于可取消的promise提议，目前处于阶段1。\n\n您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：\n``` javascript\nvar CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    /* 处理错误*/\n  }\n});\n/*取消请求(消息参数是可选的)*/\nsource.cancel('操作被用户取消。');\n```\n\n您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：\n\n``` javascript\nvar CancelToken = axios.CancelToken;\nvar cancel;\n \naxios.get('/ user / 12345'，{\n   cancelToken：new CancelToken(function executor(c){\n     /*一个执行器函数接收一个取消函数作为参数*/\n     cancel = c;\n   })\n});\n/* 取消请求*/\nclear();\n```\n> 注意：您可以使用相同的取消令牌取消几个请求。\n\n# 使用application / x-www-form-urlencoded格式\n\n默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。\n\n浏览器\n\n在浏览器中，您可以使用URLSearchParams API，如下所示：\n\n``` javascript\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n> 请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用(确保polyfill全局环境)。\n或者，您可以使用qs库对数据进行编码：\n\n``` javascript\nvar qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 });\n```\n\n## Node.js\n\n在node.js中，可以使用querystring模块，如下所示：\n``` javascript\nvar querystring = require('querystring');\naxios.post('http:/*something.com/', querystring.stringify({ foo: 'bar' });\n```\n\n你也可以使用qs库。\n\n# Promise\naxios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。\naxios包括TypeScript定义。\n\n``` javascript\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\naxios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。","source":"_posts/axios全攻略.md","raw":"---\nlayout: '[_posts]'\ntitle: \ndate: 2017-02-27 14:08:19\ntags: axios\nthumbnail: http://okkula0y9.bkt.clouddn.com/2017_03_07_3.jpg\n---\n\n# axios全攻略\n\n> axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：\n\n- 从浏览器中创建 XMLHttpRequest\n- 从 node.js 发出 http 请求\n- 支持 Promise API\n- 拦截请求和响应\n- 转换请求和响应数据\n- 取消请求\n- 自动转换JSON数据\n- 客户端支持防止 CSRF/XSRF\n\n# 引入方式\n``` javascript\n$ npm install axios\n$ cnpm install axios /*taobao源*/\n$ bower install axios\n或者使用cdn：\n<script src=\"https:/*unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n# 例子\n\n## 执行 GET 请求\n``` javascript\n/* 向具有指定ID的用户发出请求 */\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n/* 也可以通过 params 对象传递参数*/\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n## 执行 POST 请求\n``` javascript\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n## 执行多个并发请求\n``` javascript\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\naxios.all([getUserAccount(), getUserPermissions()])\n    /* 两个请求现已完成  */\n  .then(axios.spread(function (acct, perms) {\n\n  })\n);\n```\n\n\n# axios API\n可以通过将相关配置传递给 axios 来进行请求。\n\n## axios(config)\n\n``` javascript\n/* 发送一个 POST 请求*/\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n## axios(url[, config])\n\n\n发送一个 GET 请求 (GET请求是默认请求模式)\naxios('/user/12345');\n\n## 请求方法别名\n\n为了方便起见，已经为所有支持的请求方法提供了别名。\n\n- axios.request(config)\n- axios.get(url [，config])\n- axios.delete(url [，config])\n- axios.head(url [，config])\n- axios.post(url [，data [，config]])\n- axios.put(url [，data [，config]])\n- axios.patch(url [，data [，config]])\n\n### 注意\n当使用别名方法时，不需要在config中指定url，method和data属性。\n\n## 并发\n\n帮助函数处理并发请求。\n\n- axios.all(iterable)\n- axios.spread(callback)\n\n## 创建实例\n\n您可以使用自定义配置创建axios的新实例。\n\naxios.create([config])\n\n``` javascript\nvar instance = axios.create({\n  baseURL: 'https:/*some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n## 实例方法\n\n可用的实例方法如下所示。 指定的配置将与实例配置合并。\n\n- axios＃request(config)\n- axios＃get(url [，config])\n- axios＃delete(url [，config])\n- axios＃head(url [，config])\n- axios＃post(url [，data [，config]])\n- axios＃put(url [，data [，config]])\n- axios＃patch(url [，data [，config]])\n\n# 请求配置\n\n这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。\n\n``` javascript\n{\n  /* `url`是将用于请求的服务器URL*/\n  url: '/user',\n  /* `method`是发出请求时使用的请求方法 */\n  method: 'get', /* 默认*/\n  /* `baseURL`将被添加到`url`前面，除非`url`是绝对的。*/\n  /* 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。*/\n  baseURL: 'https:/*some-domain.com/api/',\n  /* `transformRequest`允许在请求数据发送到服务器之前对其进行更改*/\n  /* 这只适用于请求方法'PUT'，'POST'和'PATCH'*/\n  /* 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream*/\n  transformRequest: [function (data) {\n    /* 做任何你想要的数据转换*/\n    return data;\n  }],\n  /* `transformResponse`允许在 then / catch之前对响应数据进行更改*/\n  transformResponse: [function (data) {\n    /* Do whatever you want to transform the data*/\n    return data;\n  }],\n  /* `headers`是要发送的自定义 headers*/\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n  /* `params`是要与请求一起发送的URL参数*/\n  /* 必须是纯对象或URLSearchParams对象*/\n  params: {\n    ID: 12345\n  },\n  /* `paramsSerializer`是一个可选的函数，负责序列化`params`*/\n  /* (e.g. https:/*www.npmjs.com/package/qs, http:/*api.jquery.com/jquery.param/)*/\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n  /* `data`是要作为请求主体发送的数据*/\n  /* 仅适用于请求方法“PUT”，“POST”和“PATCH”*/\n  /* 当没有设置`transformRequest`时，必须是以下类型之一：*/\n  /* - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams*/\n  /* - Browser only: FormData, File, Blob*/\n  /* - Node only: Stream*/\n  data: {\n    firstName: 'Fred'\n  },\n  /* `timeout`指定请求超时之前的毫秒数。*/\n  /* 如果请求的时间超过'timeout'，请求将被中止。*/\n  timeout: 1000,\n  /* `withCredentials`指示是否跨站点访问控制请求*/\n  /* should be made using credentials*/\n  withCredentials: false, /* default*/\n  /* `adapter'允许自定义处理请求，这使得测试更容易。*/\n  /* 返回一个promise并提供一个有效的响应(参见[response docs](＃response-api))*/\n  adapter: function (config) {\n    /* ... */\n  },\n  /* `auth'表示应该使用 HTTP 基本认证，并提供凭据。*/\n  /* 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。*/\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n  /* “responseType”表示服务器将响应的数据类型*/\n  /* 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', /* default*/\n  /*`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称*/\n  xsrfCookieName: 'XSRF-TOKEN', /* default*/\n  /* `xsrfHeaderName`是携带xsrf令牌值的http头的名称*/\n  xsrfHeaderName: 'X-XSRF-TOKEN', /* default*/\n  /* `onUploadProgress`允许处理上传的进度事件*/\n  onUploadProgress: function (progressEvent) {\n    /* 使用本地 progress 事件做任何你想要做的*/\n  },\n  /* `onDownloadProgress`允许处理下载的进度事件*/\n  onDownloadProgress: function (progressEvent) {\n    /* Do whatever you want with the native progress event*/\n  },\n  /* `maxContentLength`定义允许的http响应内容的最大大小*/\n  maxContentLength: 2000,\n  /* `validateStatus`定义是否解析或拒绝给定的promise*/\n  /* HTTP响应状态码。如果`validateStatus`返回`true`(或被设置为`null` promise将被解析;否则，promise将被*/\n  /* 拒绝。*/\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; /* default\n  },\n  /* `maxRedirects`定义在node.js中要遵循的重定向的最大数量。*/\n  /* 如果设置为0，则不会遵循重定向。*/\n  maxRedirects: 5, /* 默认*/\n  /* `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。*/\n  /* 允许配置类似`keepAlive`的选项，*/\n  /* 默认情况下不启用。*/\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n  /* 'proxy'定义代理服务器的主机名和端口*/\n  /* `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。*/\n  /* 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。*/\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: : {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n  /* “cancelToken”指定可用于取消请求的取消令牌*/\n  /* (see Cancellation section below for details)*/\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n```\n\n使用 then 时，您将收到如下响应：\n``` javascript        \naxios.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n})\n```\n# 配置默认值\n\n您可以指定将应用于每个请求的配置默认值。\n\n## 全局axios默认值\n``` javascript\naxios.defaults.baseURL = 'https:/*api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n## 自定义实例默认值\n\n``` javascript\n/*在创建实例时设置配置默认值*/\nvar instance = axios.create({\n   baseURL：'https:/*api.example.com'*/\n});\n\n \n/*在实例创建后改变默认值*/\ninstance.defaults.headers.common ['Authorization'] = AUTH_TOKEN;\n```\n\n## 配置优先级顺序\n\n配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。\n\n``` javascript\n/*使用库提供的配置默认值创建实例*/\n/*此时，超时配置值为`0`，这是库的默认值*/\nvar instance = axios.create();\n \n/*覆盖库的超时默认值*/\n/*现在所有请求将在超时前等待2.5秒*/\ninstance.defaults.timeout = 2500;\n \n/*覆盖此请求的超时，因为它知道需要很长时间*/\ninstance.get('/ longRequest'，{\n   timeout：5000\n})\n```\n\n# 拦截器\n你可以截取请求或响应在被 then 或者 catch 处理之前\n\n``` javascript\n/*添加请求拦截器*/\naxios.interceptors.request.use(function(config){\n     /*在发送请求之前做某事*/\n     return config;\n   }，function(error){\n     /*请求错误时做些事*/\n     return Promise.reject(error);\n   });\n \n/*添加响应拦截器*/\naxios.interceptors.response.use(function(response){\n     /*对响应数据做些事*/\n      return response;\n   }，function(error){\n     /*请求错误时做些事*/\n     return Promise.reject(error);\n   });\n```\n\n如果你以后可能需要删除拦截器。\n\n``` javascript\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\n你可以将拦截器添加到axios的自定义实例。\n\n``` javascript\nvar instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n\n# 消除\n\n您可以使用取消令牌取消请求。\n\n> axios cancel token API基于可取消的promise提议，目前处于阶段1。\n\n您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：\n``` javascript\nvar CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    /* 处理错误*/\n  }\n});\n/*取消请求(消息参数是可选的)*/\nsource.cancel('操作被用户取消。');\n```\n\n您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：\n\n``` javascript\nvar CancelToken = axios.CancelToken;\nvar cancel;\n \naxios.get('/ user / 12345'，{\n   cancelToken：new CancelToken(function executor(c){\n     /*一个执行器函数接收一个取消函数作为参数*/\n     cancel = c;\n   })\n});\n/* 取消请求*/\nclear();\n```\n> 注意：您可以使用相同的取消令牌取消几个请求。\n\n# 使用application / x-www-form-urlencoded格式\n\n默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。\n\n浏览器\n\n在浏览器中，您可以使用URLSearchParams API，如下所示：\n\n``` javascript\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n> 请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用(确保polyfill全局环境)。\n或者，您可以使用qs库对数据进行编码：\n\n``` javascript\nvar qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 });\n```\n\n## Node.js\n\n在node.js中，可以使用querystring模块，如下所示：\n``` javascript\nvar querystring = require('querystring');\naxios.post('http:/*something.com/', querystring.stringify({ foo: 'bar' });\n```\n\n你也可以使用qs库。\n\n# Promise\naxios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。\naxios包括TypeScript定义。\n\n``` javascript\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\naxios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。","slug":"axios全攻略","published":1,"updated":"2017-03-07T05:44:36.899Z","_id":"cizxvciu60001msps73ydtu56","comments":1,"photos":[],"link":"","content":"<h1 id=\"axios全攻略\"><a href=\"#axios全攻略\" class=\"headerlink\" title=\"axios全攻略\"></a>axios全攻略</h1><blockquote>\n<p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>\n</blockquote>\n<ul>\n<li>从浏览器中创建 XMLHttpRequest</li>\n<li>从 node.js 发出 http 请求</li>\n<li>支持 Promise API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防止 CSRF/XSRF</li>\n</ul>\n<h1 id=\"引入方式\"><a href=\"#引入方式\" class=\"headerlink\" title=\"引入方式\"></a>引入方式</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install axios</div><div class=\"line\">$ cnpm install axios <span class=\"comment\">/*taobao源*/</span></div><div class=\"line\">$ bower install axios</div><div class=\"line\">或者使用cdn：</div><div class=\"line\">&lt;script src=<span class=\"string\">\"https:/*unpkg.com/axios/dist/axios.min.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"执行-GET-请求\"><a href=\"#执行-GET-请求\" class=\"headerlink\" title=\"执行 GET 请求\"></a>执行 GET 请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 向具有指定ID的用户发出请求 */</span></div><div class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div><div class=\"line\"><span class=\"comment\">/* 也可以通过 params 对象传递参数*/</span></div><div class=\"line\">axios.get(<span class=\"string\">'/user'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">ID</span>: <span class=\"number\">12345</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"执行-POST-请求\"><a href=\"#执行-POST-请求\" class=\"headerlink\" title=\"执行 POST 请求\"></a>执行 POST 请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.post(<span class=\"string\">'/user'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Fred'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Flintstone'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"执行多个并发请求\"><a href=\"#执行多个并发请求\" class=\"headerlink\" title=\"执行多个并发请求\"></a>执行多个并发请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserAccount</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345/permissions'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">axios.all([getUserAccount(), getUserPermissions()])</div><div class=\"line\">    <span class=\"comment\">/* 两个请求现已完成  */</span></div><div class=\"line\">  .then(axios.spread(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">acct, perms</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h1 id=\"axios-API\"><a href=\"#axios-API\" class=\"headerlink\" title=\"axios API\"></a>axios API</h1><p>可以通过将相关配置传递给 axios 来进行请求。</p>\n<h2 id=\"axios-config\"><a href=\"#axios-config\" class=\"headerlink\" title=\"axios(config)\"></a>axios(config)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 发送一个 POST 请求*/</span></div><div class=\"line\">axios(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'post'</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/user/12345'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Fred'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Flintstone'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"axios-url-config\"><a href=\"#axios-url-config\" class=\"headerlink\" title=\"axios(url[, config])\"></a>axios(url[, config])</h2><p>发送一个 GET 请求 (GET请求是默认请求模式)<br>axios(‘/user/12345’);</p>\n<h2 id=\"请求方法别名\"><a href=\"#请求方法别名\" class=\"headerlink\" title=\"请求方法别名\"></a>请求方法别名</h2><p>为了方便起见，已经为所有支持的请求方法提供了别名。</p>\n<ul>\n<li>axios.request(config)</li>\n<li>axios.get(url [，config])</li>\n<li>axios.delete(url [，config])</li>\n<li>axios.head(url [，config])</li>\n<li>axios.post(url [，data [，config]])</li>\n<li>axios.put(url [，data [，config]])</li>\n<li>axios.patch(url [，data [，config]])</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>当使用别名方法时，不需要在config中指定url，method和data属性。</p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p>帮助函数处理并发请求。</p>\n<ul>\n<li>axios.all(iterable)</li>\n<li>axios.spread(callback)</li>\n</ul>\n<h2 id=\"创建实例\"><a href=\"#创建实例\" class=\"headerlink\" title=\"创建实例\"></a>创建实例</h2><p>您可以使用自定义配置创建axios的新实例。</p>\n<p>axios.create([config])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</div><div class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">'https:/*some-domain.com/api/'</span>,</div><div class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">'X-Custom-Header'</span>: <span class=\"string\">'foobar'</span>&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h2><p>可用的实例方法如下所示。 指定的配置将与实例配置合并。</p>\n<ul>\n<li>axios＃request(config)</li>\n<li>axios＃get(url [，config])</li>\n<li>axios＃delete(url [，config])</li>\n<li>axios＃head(url [，config])</li>\n<li>axios＃post(url [，data [，config]])</li>\n<li>axios＃put(url [，data [，config]])</li>\n<li>axios＃patch(url [，data [，config]])</li>\n</ul>\n<h1 id=\"请求配置\"><a href=\"#请求配置\" class=\"headerlink\" title=\"请求配置\"></a>请求配置</h1><p>这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/* `url`是将用于请求的服务器URL*/</span></div><div class=\"line\">  url: <span class=\"string\">'/user'</span>,</div><div class=\"line\">  <span class=\"comment\">/* `method`是发出请求时使用的请求方法 */</span></div><div class=\"line\">  method: <span class=\"string\">'get'</span>, <span class=\"comment\">/* 默认*/</span></div><div class=\"line\">  <span class=\"comment\">/* `baseURL`将被添加到`url`前面，除非`url`是绝对的。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。*/</span></div><div class=\"line\">  baseURL: <span class=\"string\">'https:/*some-domain.com/api/'</span>,</div><div class=\"line\">  <span class=\"comment\">/* `transformRequest`允许在请求数据发送到服务器之前对其进行更改*/</span></div><div class=\"line\">  <span class=\"comment\">/* 这只适用于请求方法'PUT'，'POST'和'PATCH'*/</span></div><div class=\"line\">  <span class=\"comment\">/* 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream*/</span></div><div class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* 做任何你想要的数据转换*/</span></div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"comment\">/* `transformResponse`允许在 then / catch之前对响应数据进行更改*/</span></div><div class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* Do whatever you want to transform the data*/</span></div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"comment\">/* `headers`是要发送的自定义 headers*/</span></div><div class=\"line\">  headers: &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</div><div class=\"line\">  <span class=\"comment\">/* `params`是要与请求一起发送的URL参数*/</span></div><div class=\"line\">  <span class=\"comment\">/* 必须是纯对象或URLSearchParams对象*/</span></div><div class=\"line\">  params: &#123;</div><div class=\"line\">    <span class=\"attr\">ID</span>: <span class=\"number\">12345</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `paramsSerializer`是一个可选的函数，负责序列化`params`*/</span></div><div class=\"line\">  <span class=\"comment\">/* (e.g. https:/*www.npmjs.com/package/qs, http:/*api.jquery.com/jquery.param/)*/</span></div><div class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">'brackets'</span>&#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `data`是要作为请求主体发送的数据*/</span></div><div class=\"line\">  <span class=\"comment\">/* 仅适用于请求方法“PUT”，“POST”和“PATCH”*/</span></div><div class=\"line\">  <span class=\"comment\">/* 当没有设置`transformRequest`时，必须是以下类型之一：*/</span></div><div class=\"line\">  <span class=\"comment\">/* - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams*/</span></div><div class=\"line\">  <span class=\"comment\">/* - Browser only: FormData, File, Blob*/</span></div><div class=\"line\">  <span class=\"comment\">/* - Node only: Stream*/</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Fred'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `timeout`指定请求超时之前的毫秒数。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 如果请求的时间超过'timeout'，请求将被中止。*/</span></div><div class=\"line\">  timeout: <span class=\"number\">1000</span>,</div><div class=\"line\">  <span class=\"comment\">/* `withCredentials`指示是否跨站点访问控制请求*/</span></div><div class=\"line\">  <span class=\"comment\">/* should be made using credentials*/</span></div><div class=\"line\">  withCredentials: <span class=\"literal\">false</span>, <span class=\"comment\">/* default*/</span></div><div class=\"line\">  <span class=\"comment\">/* `adapter'允许自定义处理请求，这使得测试更容易。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 返回一个promise并提供一个有效的响应(参见[response docs](＃response-api))*/</span></div><div class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* ... */</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `auth'表示应该使用 HTTP 基本认证，并提供凭据。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。*/</span></div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">'janedoe'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'s00pers3cret'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* “responseType”表示服务器将响应的数据类型*/</span></div><div class=\"line\">  <span class=\"comment\">/* 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</span></div><div class=\"line\">  responseType: 'json', /* default*/</div><div class=\"line\">  <span class=\"comment\">/*`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称*/</span></div><div class=\"line\">  xsrfCookieName: <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">/* default*/</span></div><div class=\"line\">  <span class=\"comment\">/* `xsrfHeaderName`是携带xsrf令牌值的http头的名称*/</span></div><div class=\"line\">  xsrfHeaderName: <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">/* default*/</span></div><div class=\"line\">  <span class=\"comment\">/* `onUploadProgress`允许处理上传的进度事件*/</span></div><div class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* 使用本地 progress 事件做任何你想要做的*/</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `onDownloadProgress`允许处理下载的进度事件*/</span></div><div class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* Do whatever you want with the native progress event*/</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `maxContentLength`定义允许的http响应内容的最大大小*/</span></div><div class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</div><div class=\"line\">  <span class=\"comment\">/* `validateStatus`定义是否解析或拒绝给定的promise*/</span></div><div class=\"line\">  <span class=\"comment\">/* HTTP响应状态码。如果`validateStatus`返回`true`(或被设置为`null` promise将被解析;否则，promise将被*/</span></div><div class=\"line\">  <span class=\"comment\">/* 拒绝。*/</span></div><div class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">/* default</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  /* `maxRedirects`定义在node.js中要遵循的重定向的最大数量。*/</div><div class=\"line\">  <span class=\"comment\">/* 如果设置为0，则不会遵循重定向。*/</span></div><div class=\"line\">  maxRedirects: <span class=\"number\">5</span>, <span class=\"comment\">/* 默认*/</span></div><div class=\"line\">  <span class=\"comment\">/* `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 允许配置类似`keepAlive`的选项，*/</span></div><div class=\"line\">  <span class=\"comment\">/* 默认情况下不启用。*/</span></div><div class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</div><div class=\"line\">  <span class=\"attr\">httpsAgent</span>: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</div><div class=\"line\">  <span class=\"comment\">/* 'proxy'定义代理服务器的主机名和端口*/</span></div><div class=\"line\">  <span class=\"comment\">/* `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。*/</span></div><div class=\"line\">  proxy: &#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</div><div class=\"line\">    <span class=\"attr\">auth</span>: : &#123;</div><div class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">'mikeymike'</span>,</div><div class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">'rapunz3l'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* “cancelToken”指定可用于取消请求的取消令牌*/</span></div><div class=\"line\">  <span class=\"comment\">/* (see Cancellation section below for details)*/</span></div><div class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) </span>&#123;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 then 时，您将收到如下响应：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.data);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.status);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.statusText);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.headers);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.config);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"配置默认值\"><a href=\"#配置默认值\" class=\"headerlink\" title=\"配置默认值\"></a>配置默认值</h1><p>您可以指定将应用于每个请求的配置默认值。</p>\n<h2 id=\"全局axios默认值\"><a href=\"#全局axios默认值\" class=\"headerlink\" title=\"全局axios默认值\"></a>全局axios默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https:/*api.example.com'</span>;</div><div class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义实例默认值\"><a href=\"#自定义实例默认值\" class=\"headerlink\" title=\"自定义实例默认值\"></a>自定义实例默认值</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*在创建实例时设置配置默认值*/</div><div class=\"line\">var instance = axios.create(&#123;</div><div class=\"line\">   baseURL：'https:/*api.example.com'*/</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">/*在实例创建后改变默认值*/</div><div class=\"line\">instance.defaults.headers.common ['Authorization'] = AUTH_TOKEN;</div></pre></td></tr></table></figure>\n<h2 id=\"配置优先级顺序\"><a href=\"#配置优先级顺序\" class=\"headerlink\" title=\"配置优先级顺序\"></a>配置优先级顺序</h2><p>配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*使用库提供的配置默认值创建实例*/</span></div><div class=\"line\"><span class=\"comment\">/*此时，超时配置值为`0`，这是库的默认值*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*覆盖库的超时默认值*/</span></div><div class=\"line\"><span class=\"comment\">/*现在所有请求将在超时前等待2.5秒*/</span></div><div class=\"line\">instance.defaults.timeout = <span class=\"number\">2500</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*覆盖此请求的超时，因为它知道需要很长时间*/</span></div><div class=\"line\">instance.get(<span class=\"string\">'/ longRequest'</span>，&#123;</div><div class=\"line\">   timeout：<span class=\"number\">5000</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><p>你可以截取请求或响应在被 then 或者 catch 处理之前</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*添加请求拦截器*/</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*在发送请求之前做某事*/</span></div><div class=\"line\">     <span class=\"keyword\">return</span> config;</div><div class=\"line\">   &#125;，<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*请求错误时做些事*/</span></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">   &#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*添加响应拦截器*/</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*对响应数据做些事*/</span></div><div class=\"line\">      <span class=\"keyword\">return</span> response;</div><div class=\"line\">   &#125;，<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*请求错误时做些事*/</span></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">   &#125;);</div></pre></td></tr></table></figure>\n<p>如果你以后可能需要删除拦截器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myInterceptor = axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</div><div class=\"line\">axios.interceptors.request.eject(myInterceptor);</div></pre></td></tr></table></figure>\n<p>你可以将拦截器添加到axios的自定义实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</div><div class=\"line\">instance.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"消除\"><a href=\"#消除\" class=\"headerlink\" title=\"消除\"></a>消除</h1><p>您可以使用取消令牌取消请求。</p>\n<blockquote>\n<p>axios cancel token API基于可取消的promise提议，目前处于阶段1。</p>\n</blockquote>\n<p>您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CancelToken = axios.CancelToken;</div><div class=\"line\"><span class=\"keyword\">var</span> source = CancelToken.source();</div><div class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">cancelToken</span>: source.token</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thrown</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (axios.isCancel(thrown)) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request canceled'</span>, thrown.message);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 处理错误*/</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/*取消请求(消息参数是可选的)*/</span></div><div class=\"line\">source.cancel(<span class=\"string\">'操作被用户取消。'</span>);</div></pre></td></tr></table></figure></p>\n<p>您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CancelToken = axios.CancelToken;</div><div class=\"line\"><span class=\"keyword\">var</span> cancel;</div><div class=\"line\"> </div><div class=\"line\">axios.get(<span class=\"string\">'/ user / 12345'</span>，&#123;</div><div class=\"line\">   cancelToken：<span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*一个执行器函数接收一个取消函数作为参数*/</span></div><div class=\"line\">     cancel = c;</div><div class=\"line\">   &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/* 取消请求*/</span></div><div class=\"line\">clear();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：您可以使用相同的取消令牌取消几个请求。</p>\n</blockquote>\n<h1 id=\"使用application-x-www-form-urlencoded格式\"><a href=\"#使用application-x-www-form-urlencoded格式\" class=\"headerlink\" title=\"使用application / x-www-form-urlencoded格式\"></a>使用application / x-www-form-urlencoded格式</h1><p>默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p>\n<p>浏览器</p>\n<p>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> URLSearchParams();</div><div class=\"line\">params.append(<span class=\"string\">'param1'</span>, <span class=\"string\">'value1'</span>);</div><div class=\"line\">params.append(<span class=\"string\">'param2'</span>, <span class=\"string\">'value2'</span>);</div><div class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, params);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用(确保polyfill全局环境)。<br>或者，您可以使用qs库对数据进行编码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'qs'</span>);</div><div class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, qs.stringify(&#123; <span class=\"string\">'bar'</span>: <span class=\"number\">123</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>在node.js中，可以使用querystring模块，如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\">axios.post(<span class=\"string\">'http:/*something.com/'</span>, querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>你也可以使用qs库。</p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>axios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。<br>axios包括TypeScript定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</div><div class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>);</div></pre></td></tr></table></figure>\n<p>axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。</p>\n","excerpt":"","more":"<h1 id=\"axios全攻略\"><a href=\"#axios全攻略\" class=\"headerlink\" title=\"axios全攻略\"></a>axios全攻略</h1><blockquote>\n<p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p>\n</blockquote>\n<ul>\n<li>从浏览器中创建 XMLHttpRequest</li>\n<li>从 node.js 发出 http 请求</li>\n<li>支持 Promise API</li>\n<li>拦截请求和响应</li>\n<li>转换请求和响应数据</li>\n<li>取消请求</li>\n<li>自动转换JSON数据</li>\n<li>客户端支持防止 CSRF/XSRF</li>\n</ul>\n<h1 id=\"引入方式\"><a href=\"#引入方式\" class=\"headerlink\" title=\"引入方式\"></a>引入方式</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install axios</div><div class=\"line\">$ cnpm install axios <span class=\"comment\">/*taobao源*/</span></div><div class=\"line\">$ bower install axios</div><div class=\"line\">或者使用cdn：</div><div class=\"line\">&lt;script src=<span class=\"string\">\"https:/*unpkg.com/axios/dist/axios.min.js\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h1><h2 id=\"执行-GET-请求\"><a href=\"#执行-GET-请求\" class=\"headerlink\" title=\"执行 GET 请求\"></a>执行 GET 请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 向具有指定ID的用户发出请求 */</span></div><div class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div><div class=\"line\"><span class=\"comment\">/* 也可以通过 params 对象传递参数*/</span></div><div class=\"line\">axios.get(<span class=\"string\">'/user'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">ID</span>: <span class=\"number\">12345</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"执行-POST-请求\"><a href=\"#执行-POST-请求\" class=\"headerlink\" title=\"执行 POST 请求\"></a>执行 POST 请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.post(<span class=\"string\">'/user'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Fred'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Flintstone'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"执行多个并发请求\"><a href=\"#执行多个并发请求\" class=\"headerlink\" title=\"执行多个并发请求\"></a>执行多个并发请求</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserAccount</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserPermissions</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">'/user/12345/permissions'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">axios.all([getUserAccount(), getUserPermissions()])</div><div class=\"line\">    <span class=\"comment\">/* 两个请求现已完成  */</span></div><div class=\"line\">  .then(axios.spread(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">acct, perms</span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h1 id=\"axios-API\"><a href=\"#axios-API\" class=\"headerlink\" title=\"axios API\"></a>axios API</h1><p>可以通过将相关配置传递给 axios 来进行请求。</p>\n<h2 id=\"axios-config\"><a href=\"#axios-config\" class=\"headerlink\" title=\"axios(config)\"></a>axios(config)</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* 发送一个 POST 请求*/</span></div><div class=\"line\">axios(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'post'</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/user/12345'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Fred'</span>,</div><div class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"string\">'Flintstone'</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"axios-url-config\"><a href=\"#axios-url-config\" class=\"headerlink\" title=\"axios(url[, config])\"></a>axios(url[, config])</h2><p>发送一个 GET 请求 (GET请求是默认请求模式)<br>axios(‘/user/12345’);</p>\n<h2 id=\"请求方法别名\"><a href=\"#请求方法别名\" class=\"headerlink\" title=\"请求方法别名\"></a>请求方法别名</h2><p>为了方便起见，已经为所有支持的请求方法提供了别名。</p>\n<ul>\n<li>axios.request(config)</li>\n<li>axios.get(url [，config])</li>\n<li>axios.delete(url [，config])</li>\n<li>axios.head(url [，config])</li>\n<li>axios.post(url [，data [，config]])</li>\n<li>axios.put(url [，data [，config]])</li>\n<li>axios.patch(url [，data [，config]])</li>\n</ul>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>当使用别名方法时，不需要在config中指定url，method和data属性。</p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><p>帮助函数处理并发请求。</p>\n<ul>\n<li>axios.all(iterable)</li>\n<li>axios.spread(callback)</li>\n</ul>\n<h2 id=\"创建实例\"><a href=\"#创建实例\" class=\"headerlink\" title=\"创建实例\"></a>创建实例</h2><p>您可以使用自定义配置创建axios的新实例。</p>\n<p>axios.create([config])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = axios.create(&#123;</div><div class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">'https:/*some-domain.com/api/'</span>,</div><div class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</div><div class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">'X-Custom-Header'</span>: <span class=\"string\">'foobar'</span>&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h2><p>可用的实例方法如下所示。 指定的配置将与实例配置合并。</p>\n<ul>\n<li>axios＃request(config)</li>\n<li>axios＃get(url [，config])</li>\n<li>axios＃delete(url [，config])</li>\n<li>axios＃head(url [，config])</li>\n<li>axios＃post(url [，data [，config]])</li>\n<li>axios＃put(url [，data [，config]])</li>\n<li>axios＃patch(url [，data [，config]])</li>\n</ul>\n<h1 id=\"请求配置\"><a href=\"#请求配置\" class=\"headerlink\" title=\"请求配置\"></a>请求配置</h1><p>这些是用于发出请求的可用配置选项。 只有url是必需的。 如果未指定方法，请求将默认为GET。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">/* `url`是将用于请求的服务器URL*/</span></div><div class=\"line\">  url: <span class=\"string\">'/user'</span>,</div><div class=\"line\">  <span class=\"comment\">/* `method`是发出请求时使用的请求方法 */</span></div><div class=\"line\">  method: <span class=\"string\">'get'</span>, <span class=\"comment\">/* 默认*/</span></div><div class=\"line\">  <span class=\"comment\">/* `baseURL`将被添加到`url`前面，除非`url`是绝对的。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 可以方便地为 axios 的实例设置`baseURL`，以便将相对 URL 传递给该实例的方法。*/</span></div><div class=\"line\">  baseURL: <span class=\"string\">'https:/*some-domain.com/api/'</span>,</div><div class=\"line\">  <span class=\"comment\">/* `transformRequest`允许在请求数据发送到服务器之前对其进行更改*/</span></div><div class=\"line\">  <span class=\"comment\">/* 这只适用于请求方法'PUT'，'POST'和'PATCH'*/</span></div><div class=\"line\">  <span class=\"comment\">/* 数组中的最后一个函数必须返回一个字符串，一个 ArrayBuffer或一个 Stream*/</span></div><div class=\"line\">  transformRequest: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* 做任何你想要的数据转换*/</span></div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"comment\">/* `transformResponse`允许在 then / catch之前对响应数据进行更改*/</span></div><div class=\"line\">  transformResponse: [<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* Do whatever you want to transform the data*/</span></div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;],</div><div class=\"line\">  <span class=\"comment\">/* `headers`是要发送的自定义 headers*/</span></div><div class=\"line\">  headers: &#123;<span class=\"string\">'X-Requested-With'</span>: <span class=\"string\">'XMLHttpRequest'</span>&#125;,</div><div class=\"line\">  <span class=\"comment\">/* `params`是要与请求一起发送的URL参数*/</span></div><div class=\"line\">  <span class=\"comment\">/* 必须是纯对象或URLSearchParams对象*/</span></div><div class=\"line\">  params: &#123;</div><div class=\"line\">    <span class=\"attr\">ID</span>: <span class=\"number\">12345</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `paramsSerializer`是一个可选的函数，负责序列化`params`*/</span></div><div class=\"line\">  <span class=\"comment\">/* (e.g. https:/*www.npmjs.com/package/qs, http:/*api.jquery.com/jquery.param/)*/</span></div><div class=\"line\">  paramsSerializer: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">params</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Qs.stringify(params, &#123;<span class=\"attr\">arrayFormat</span>: <span class=\"string\">'brackets'</span>&#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `data`是要作为请求主体发送的数据*/</span></div><div class=\"line\">  <span class=\"comment\">/* 仅适用于请求方法“PUT”，“POST”和“PATCH”*/</span></div><div class=\"line\">  <span class=\"comment\">/* 当没有设置`transformRequest`时，必须是以下类型之一：*/</span></div><div class=\"line\">  <span class=\"comment\">/* - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams*/</span></div><div class=\"line\">  <span class=\"comment\">/* - Browser only: FormData, File, Blob*/</span></div><div class=\"line\">  <span class=\"comment\">/* - Node only: Stream*/</span></div><div class=\"line\">  data: &#123;</div><div class=\"line\">    <span class=\"attr\">firstName</span>: <span class=\"string\">'Fred'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `timeout`指定请求超时之前的毫秒数。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 如果请求的时间超过'timeout'，请求将被中止。*/</span></div><div class=\"line\">  timeout: <span class=\"number\">1000</span>,</div><div class=\"line\">  <span class=\"comment\">/* `withCredentials`指示是否跨站点访问控制请求*/</span></div><div class=\"line\">  <span class=\"comment\">/* should be made using credentials*/</span></div><div class=\"line\">  withCredentials: <span class=\"literal\">false</span>, <span class=\"comment\">/* default*/</span></div><div class=\"line\">  <span class=\"comment\">/* `adapter'允许自定义处理请求，这使得测试更容易。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 返回一个promise并提供一个有效的响应(参见[response docs](＃response-api))*/</span></div><div class=\"line\">  adapter: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">config</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* ... */</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `auth'表示应该使用 HTTP 基本认证，并提供凭据。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 这将设置一个`Authorization'头，覆盖任何现有的`Authorization'自定义头，使用`headers`设置。*/</span></div><div class=\"line\">  auth: &#123;</div><div class=\"line\">    <span class=\"attr\">username</span>: <span class=\"string\">'janedoe'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'s00pers3cret'</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* “responseType”表示服务器将响应的数据类型*/</span></div><div class=\"line\">  <span class=\"comment\">/* 包括 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'</div><div class=\"line\">  responseType: 'json', /* default*/</span></div><div class=\"line\">  <span class=\"comment\">/*`xsrfCookieName`是要用作 xsrf 令牌的值的cookie的名称*/</span></div><div class=\"line\">  xsrfCookieName: <span class=\"string\">'XSRF-TOKEN'</span>, <span class=\"comment\">/* default*/</span></div><div class=\"line\">  <span class=\"comment\">/* `xsrfHeaderName`是携带xsrf令牌值的http头的名称*/</span></div><div class=\"line\">  xsrfHeaderName: <span class=\"string\">'X-XSRF-TOKEN'</span>, <span class=\"comment\">/* default*/</span></div><div class=\"line\">  <span class=\"comment\">/* `onUploadProgress`允许处理上传的进度事件*/</span></div><div class=\"line\">  onUploadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* 使用本地 progress 事件做任何你想要做的*/</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `onDownloadProgress`允许处理下载的进度事件*/</span></div><div class=\"line\">  onDownloadProgress: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">progressEvent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* Do whatever you want with the native progress event*/</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* `maxContentLength`定义允许的http响应内容的最大大小*/</span></div><div class=\"line\">  maxContentLength: <span class=\"number\">2000</span>,</div><div class=\"line\">  <span class=\"comment\">/* `validateStatus`定义是否解析或拒绝给定的promise*/</span></div><div class=\"line\">  <span class=\"comment\">/* HTTP响应状态码。如果`validateStatus`返回`true`(或被设置为`null` promise将被解析;否则，promise将被*/</span></div><div class=\"line\">  <span class=\"comment\">/* 拒绝。*/</span></div><div class=\"line\">  validateStatus: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> status &gt;= <span class=\"number\">200</span> &amp;&amp; status &lt; <span class=\"number\">300</span>; <span class=\"comment\">/* default</div><div class=\"line\">  &#125;,</div><div class=\"line\">  /* `maxRedirects`定义在node.js中要遵循的重定向的最大数量。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 如果设置为0，则不会遵循重定向。*/</span></div><div class=\"line\">  maxRedirects: <span class=\"number\">5</span>, <span class=\"comment\">/* 默认*/</span></div><div class=\"line\">  <span class=\"comment\">/* `httpAgent`和`httpsAgent`用于定义在node.js中分别执行http和https请求时使用的自定义代理。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 允许配置类似`keepAlive`的选项，*/</span></div><div class=\"line\">  <span class=\"comment\">/* 默认情况下不启用。*/</span></div><div class=\"line\">  httpAgent: <span class=\"keyword\">new</span> http.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</div><div class=\"line\">  <span class=\"attr\">httpsAgent</span>: <span class=\"keyword\">new</span> https.Agent(&#123; <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span> &#125;),</div><div class=\"line\">  <span class=\"comment\">/* 'proxy'定义代理服务器的主机名和端口*/</span></div><div class=\"line\">  <span class=\"comment\">/* `auth`表示HTTP Basic auth应该用于连接到代理，并提供credentials。*/</span></div><div class=\"line\">  <span class=\"comment\">/* 这将设置一个`Proxy-Authorization` header，覆盖任何使用`headers`设置的现有的`Proxy-Authorization` 自定义 headers。*/</span></div><div class=\"line\">  proxy: &#123;</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">9000</span>,</div><div class=\"line\">    <span class=\"attr\">auth</span>: : &#123;</div><div class=\"line\">      <span class=\"attr\">username</span>: <span class=\"string\">'mikeymike'</span>,</div><div class=\"line\">      <span class=\"attr\">password</span>: <span class=\"string\">'rapunz3l'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">/* “cancelToken”指定可用于取消请求的取消令牌*/</span></div><div class=\"line\">  <span class=\"comment\">/* (see Cancellation section below for details)*/</span></div><div class=\"line\">  cancelToken: <span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cancel</span>) </span>&#123;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用 then 时，您将收到如下响应：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.data);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.status);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.statusText);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.headers);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response.config);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"配置默认值\"><a href=\"#配置默认值\" class=\"headerlink\" title=\"配置默认值\"></a>配置默认值</h1><p>您可以指定将应用于每个请求的配置默认值。</p>\n<h2 id=\"全局axios默认值\"><a href=\"#全局axios默认值\" class=\"headerlink\" title=\"全局axios默认值\"></a>全局axios默认值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'https:/*api.example.com'</span>;</div><div class=\"line\">axios.defaults.headers.common[<span class=\"string\">'Authorization'</span>] = AUTH_TOKEN;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded'</span>;</div></pre></td></tr></table></figure>\n<h2 id=\"自定义实例默认值\"><a href=\"#自定义实例默认值\" class=\"headerlink\" title=\"自定义实例默认值\"></a>自定义实例默认值</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*在创建实例时设置配置默认值*/</div><div class=\"line\">var instance = axios.create(&#123;</div><div class=\"line\">   baseURL：'https:/*api.example.com'*/</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"> </div><div class=\"line\">/*在实例创建后改变默认值*/</div><div class=\"line\">instance.defaults.headers.common ['Authorization'] = AUTH_TOKEN;</div></pre></td></tr></table></figure>\n<h2 id=\"配置优先级顺序\"><a href=\"#配置优先级顺序\" class=\"headerlink\" title=\"配置优先级顺序\"></a>配置优先级顺序</h2><p>配置将与优先顺序合并。 顺序是lib / defaults.js中的库默认值，然后是实例的defaults属性，最后是请求的config参数。 后者将优先于前者。 这里有一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*使用库提供的配置默认值创建实例*/</span></div><div class=\"line\"><span class=\"comment\">/*此时，超时配置值为`0`，这是库的默认值*/</span></div><div class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*覆盖库的超时默认值*/</span></div><div class=\"line\"><span class=\"comment\">/*现在所有请求将在超时前等待2.5秒*/</span></div><div class=\"line\">instance.defaults.timeout = <span class=\"number\">2500</span>;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*覆盖此请求的超时，因为它知道需要很长时间*/</span></div><div class=\"line\">instance.get(<span class=\"string\">'/ longRequest'</span>，&#123;</div><div class=\"line\">   timeout：<span class=\"number\">5000</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"拦截器\"><a href=\"#拦截器\" class=\"headerlink\" title=\"拦截器\"></a>拦截器</h1><p>你可以截取请求或响应在被 then 或者 catch 处理之前</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*添加请求拦截器*/</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*在发送请求之前做某事*/</span></div><div class=\"line\">     <span class=\"keyword\">return</span> config;</div><div class=\"line\">   &#125;，<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*请求错误时做些事*/</span></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">   &#125;);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">/*添加响应拦截器*/</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*对响应数据做些事*/</span></div><div class=\"line\">      <span class=\"keyword\">return</span> response;</div><div class=\"line\">   &#125;，<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*请求错误时做些事*/</span></div><div class=\"line\">     <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">   &#125;);</div></pre></td></tr></table></figure>\n<p>如果你以后可能需要删除拦截器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myInterceptor = axios.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</div><div class=\"line\">axios.interceptors.request.eject(myInterceptor);</div></pre></td></tr></table></figure>\n<p>你可以将拦截器添加到axios的自定义实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> instance = axios.create();</div><div class=\"line\">instance.interceptors.request.use(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/*...*/</span>&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"消除\"><a href=\"#消除\" class=\"headerlink\" title=\"消除\"></a>消除</h1><p>您可以使用取消令牌取消请求。</p>\n<blockquote>\n<p>axios cancel token API基于可取消的promise提议，目前处于阶段1。</p>\n</blockquote>\n<p>您可以使用CancelToken.source工厂创建一个取消令牌，如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CancelToken = axios.CancelToken;</div><div class=\"line\"><span class=\"keyword\">var</span> source = CancelToken.source();</div><div class=\"line\">axios.get(<span class=\"string\">'/user/12345'</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">cancelToken</span>: source.token</div><div class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">thrown</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (axios.isCancel(thrown)) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Request canceled'</span>, thrown.message);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* 处理错误*/</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/*取消请求(消息参数是可选的)*/</span></div><div class=\"line\">source.cancel(<span class=\"string\">'操作被用户取消。'</span>);</div></pre></td></tr></table></figure></p>\n<p>您还可以通过将执行器函数传递给CancelToken构造函数来创建取消令牌：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> CancelToken = axios.CancelToken;</div><div class=\"line\"><span class=\"keyword\">var</span> cancel;</div><div class=\"line\"> </div><div class=\"line\">axios.get(<span class=\"string\">'/ user / 12345'</span>，&#123;</div><div class=\"line\">   cancelToken：<span class=\"keyword\">new</span> CancelToken(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">executor</span>(<span class=\"params\">c</span>)</span>&#123;</div><div class=\"line\">     <span class=\"comment\">/*一个执行器函数接收一个取消函数作为参数*/</span></div><div class=\"line\">     cancel = c;</div><div class=\"line\">   &#125;)</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">/* 取消请求*/</span></div><div class=\"line\">clear();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：您可以使用相同的取消令牌取消几个请求。</p>\n</blockquote>\n<h1 id=\"使用application-x-www-form-urlencoded格式\"><a href=\"#使用application-x-www-form-urlencoded格式\" class=\"headerlink\" title=\"使用application / x-www-form-urlencoded格式\"></a>使用application / x-www-form-urlencoded格式</h1><p>默认情况下，axios将JavaScript对象序列化为JSON。 要以应用程序/ x-www-form-urlencoded格式发送数据，您可以使用以下选项之一。</p>\n<p>浏览器</p>\n<p>在浏览器中，您可以使用URLSearchParams API，如下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> params = <span class=\"keyword\">new</span> URLSearchParams();</div><div class=\"line\">params.append(<span class=\"string\">'param1'</span>, <span class=\"string\">'value1'</span>);</div><div class=\"line\">params.append(<span class=\"string\">'param2'</span>, <span class=\"string\">'value2'</span>);</div><div class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, params);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>请注意，所有浏览器都不支持URLSearchParams，但是有一个polyfill可用(确保polyfill全局环境)。<br>或者，您可以使用qs库对数据进行编码：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'qs'</span>);</div><div class=\"line\">axios.post(<span class=\"string\">'/foo'</span>, qs.stringify(&#123; <span class=\"string\">'bar'</span>: <span class=\"number\">123</span> &#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"Node-js\"><a href=\"#Node-js\" class=\"headerlink\" title=\"Node.js\"></a>Node.js</h2><p>在node.js中，可以使用querystring模块，如下所示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>);</div><div class=\"line\">axios.post(<span class=\"string\">'http:/*something.com/'</span>, querystring.stringify(&#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span> &#125;);</div></pre></td></tr></table></figure></p>\n<p>你也可以使用qs库。</p>\n<h1 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h1><p>axios 依赖本机要支持ES6 Promise实现。 如果您的环境不支持ES6 Promises，您可以使用polyfill。<br>axios包括TypeScript定义。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span>;</div><div class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>);</div></pre></td></tr></table></figure>\n<p>axios在很大程度上受到Angular提供的$http服务的启发。 最终，axios努力提供一个在Angular外使用的独立的$http-like服务。</p>\n"},{"layout":"_posts","title":"","date":"2017-01-29T12:25:08.000Z","thumbnail":"http://okkula0y9.bkt.clouddn.com/20160130.jpg","_content":"\n> 以前写Vue项目的时候都是使用vue-resource做为项目ajax库，在11月份的某一天尤大微博的更新表示ajax的库应该是通用的，放弃了对vue-resource的技术支持，推荐使用[axios][1]。\n\n![此处输入图片的描述][2]\n既然尤大推荐的应该有过人之处，好吧于是在新的项目上开始使用Axios,开启这段学习（踩坑）的历程。\n\n\n  [1]: https://github.com/mzabriskie/axios\n  [2]: http://upload-images.jianshu.io/upload_images/1987062-b3255d564903d3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n  \n# 安装\n``` javascript\n npm install axios\n```\n\n# 使用\nAxios和其他的ajax库都是很类似的，提供了2种使用的方式一种是直接使用实例方法的如：\n下面是实例的所有可用方法，方法中的config会与axios实例中的config合并。（实例可以将一些通用的config先配置好）\n``` javascript\n//axios.get\n//axios.post\n\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n#   Config 配置\nAxios的配置参数很多，我们来一一了解\n\n- url —— 用来向服务器发送请求的url\n- method —— 请求方法，默认是GET方法\n-  baseURL —— 基础URL路径，假如url不是绝对路径，如https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL + url。\n-  transformRequest —— transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。\n-  transformResponse —— transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。\n- headers —— 发送自定义Headers头文件，头文件中包含了http请求的各种信息。\n-  params —— params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&param2=value2。\nparamsSerializer —— params参数序列化器。\n- data —— data是在发送POST、PUT或者PATCH请求的数据对象。\n- timeout —— 请求超时设置，单位为毫秒\n- withCredentials —— 表明是否有跨域请求需要用到证书\n- adapter —— adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response\n- auth —— auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。\n- responseType —— 表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。\n- xsrfCookieName —— 用作 xsrf token 值的 cookie 名称\n- xsrfHeaderName —— 带有 xsrf token 值 http head 名称\n- onUploadProgress —— 允许在上传过程中的做一些操作\n- onDownloadProgress —— 允许在下载过程中的做一些操作\n- maxContentLength —— 定义了接收到的response响应数据的最大长度。\n- validateStatus —— validateStatus定义了根据HTTP响应状态码决定是否接收或拒绝获取到的promise。如果 validateStatus 返回 true (或设置为 null 或 undefined ),promise将被接收;否则,promise将被拒绝。\n- maxRedirects —— maxRedirects定义了在node.js中redirect的最大值，如果设置为0，则没有redirect。\n- httpAgent —— 定义在使用http请求时的代理\n- httpsAgent —— 定义在使用https请求时的代理\n- proxy —— proxy定义代理服务器的主机名和端口，auth\n- cancelToken —— cancelToken定义一个 cancel token 用于取消请求\n\n\n# Response 返回\n当我们ajax获取数据成功后会返回一个response对象，它包含了以下内容\n``` javascript\n\n{\n  // 服务器返回的数据\n  data: {},\n  // HTTP状态吗\n  status: 200,\n  // 服务器返回的消息\n  statusText: 'OK',\n  // 返回头\n  headers: {},\n  // 在返回我们的配置\n  config: {}\n}\n```\n\n# 统一Config配置\n在接口测试中，我们经常需要切换线上环境和测试环境，这里我们都可以通过Config来配置，这样我们所有的发起的请求都是通过这个基本的URL走了。\n\n``` javascript\naxios.defaults.timeout = 5000;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios.defaults.baseURL = 'http://www.xxxx.xxx/api';\n// axios.defaults.baseURL = 'http://192.168.1.129:8383';\n```\n\n\n# Interceptors 拦截器\n这里我必须重点介绍，在我们发起大量的请求时候，需要对请求做统一的处理那就用到它了。笔者在使用了`vue-resource`和`axios`之后亲身比较，`axios`的配置更加人性化。\n官方的API上这样介绍\n> You can intercept requests or responses before they are handled by then or catch.\n您可以拦截请求或响应之前，他们处理的操作或者异常\n\n\n## request统一处理操作\n如果是POST的请求，配置中可不能用`params`字段了，需要使用`data`字段。\n这里有个小地方需要注意，POST的传参需要序列化，不然服务端不会正确的接收哦，会报错。所以这里我们要对request的数据进行一次序列化。这里我用了`qs`,大家需要install一下\n\n``` javascript\nimport axios from 'axios'\nimport qs from 'qs'\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post'){\n    config.data = qs.stringify(config.data);\n  }\n  return config;\n},(error) =>{\n   alert(\"错误的传参\");\n  return Promise.reject(error);\n});\n```\n\n\n## response统一处理操作\n也就是说我们可以统一的在发起请求前，或者获得数据，对其进行统一的操作。这点非常的高效，在笔者的项目中，接口会返回一个code,就和微信API一样，code为200代表返回请求数据正确为其它时就自动跳出弹窗打印消息即可。\n\n``` javascript\n//code状态码200判断\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '200'){\n    alert(res.data.msg);\n    return Promise.reject(res);\n  }\n  return res;\n}, (error) => {\n  alert(\"网络异常\");\n  return Promise.reject(error);\n});\n```\n\n如果发生这些错误了我要结束当前的Promise所以返回一个`Promise.reject(res)`，停止Promise队列下面的操作,如果有对于Promise不熟悉的童鞋请自行搜索`Promise`(这里还遇到了一个小坑最后会介绍)\n\n\n# 我的配置\n好了介绍了这么多介绍下我的axios配置的文件设置吧,这个文件名是`config/http.js`\n``` javascript\n\nimport axios from 'axios'\nimport qs from 'qs'\nimport * as _ from './whole'\n\naxios.defaults.timeout = 5000;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios.defaults.baseURL = 'http://www.guinaben.com:8070';\n// axios.defaults.baseURL = 'http://192.168.1.129:8383';\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post'){\n    config.data = qs.stringify(config.data);\n  }\n  return config;\n},(error) =>{\n   _.toast(\"错误的传参\");\n  return Promise.reject(error);\n});\n\n//code状态码200判断\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '200'){\n    _.toast(res.data.msg);\n    return Promise.reject(res);\n  }\n  return res;\n}, (error) => {\n  _.toast(\"网络异常\");\n  return Promise.reject(error);\n});\n\nexport default axios;\n```\n\n\n发起的请求\n``` javascript\nimport axios from 'config/http'\n\naxios({\n  method:'get',\n  url: 'xxxx/xxxxx',\n  params: {\n    \"textbook_id\":id,\n    \"token\":token\n  }\n})\n.then((response) => {\n  resolve(response);\n})\n\n\naxios({\n  method:'post',\n  url: 'teacher/pwd/resetByMobile',\n  data: {\n   \"textbook_id\":id,\n    \"token\":token\n  }\n})\n.then((response) => {\n    resolve(response);\n})\n  \n  \n```\n\n# 一定要看\n因为这里我使用的`Promise`,所以在安卓4.4.3一下的手机还是不支持Promise的，所以会报错。需要引入` npm install babel-polyfill`和` npm install babel-runtime`，在入口文件上加上即可。\n``` javascript\nimport 'babel-polyfill' \n```\n\n# 最后\n下一篇将带来Vuex2和axios的配合，希望此篇能带给大家帮助。","source":"_posts/Axios的配置.md","raw":"---\nlayout: _posts\ntitle: ''\ndate: 2017-01-29 20:25:08\ntags: [Axio,Vue]\nthumbnail: http://okkula0y9.bkt.clouddn.com/20160130.jpg\n---\n\n> 以前写Vue项目的时候都是使用vue-resource做为项目ajax库，在11月份的某一天尤大微博的更新表示ajax的库应该是通用的，放弃了对vue-resource的技术支持，推荐使用[axios][1]。\n\n![此处输入图片的描述][2]\n既然尤大推荐的应该有过人之处，好吧于是在新的项目上开始使用Axios,开启这段学习（踩坑）的历程。\n\n\n  [1]: https://github.com/mzabriskie/axios\n  [2]: http://upload-images.jianshu.io/upload_images/1987062-b3255d564903d3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n  \n# 安装\n``` javascript\n npm install axios\n```\n\n# 使用\nAxios和其他的ajax库都是很类似的，提供了2种使用的方式一种是直接使用实例方法的如：\n下面是实例的所有可用方法，方法中的config会与axios实例中的config合并。（实例可以将一些通用的config先配置好）\n``` javascript\n//axios.get\n//axios.post\n\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\n#   Config 配置\nAxios的配置参数很多，我们来一一了解\n\n- url —— 用来向服务器发送请求的url\n- method —— 请求方法，默认是GET方法\n-  baseURL —— 基础URL路径，假如url不是绝对路径，如https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL + url。\n-  transformRequest —— transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。\n-  transformResponse —— transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。\n- headers —— 发送自定义Headers头文件，头文件中包含了http请求的各种信息。\n-  params —— params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&param2=value2。\nparamsSerializer —— params参数序列化器。\n- data —— data是在发送POST、PUT或者PATCH请求的数据对象。\n- timeout —— 请求超时设置，单位为毫秒\n- withCredentials —— 表明是否有跨域请求需要用到证书\n- adapter —— adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response\n- auth —— auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。\n- responseType —— 表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。\n- xsrfCookieName —— 用作 xsrf token 值的 cookie 名称\n- xsrfHeaderName —— 带有 xsrf token 值 http head 名称\n- onUploadProgress —— 允许在上传过程中的做一些操作\n- onDownloadProgress —— 允许在下载过程中的做一些操作\n- maxContentLength —— 定义了接收到的response响应数据的最大长度。\n- validateStatus —— validateStatus定义了根据HTTP响应状态码决定是否接收或拒绝获取到的promise。如果 validateStatus 返回 true (或设置为 null 或 undefined ),promise将被接收;否则,promise将被拒绝。\n- maxRedirects —— maxRedirects定义了在node.js中redirect的最大值，如果设置为0，则没有redirect。\n- httpAgent —— 定义在使用http请求时的代理\n- httpsAgent —— 定义在使用https请求时的代理\n- proxy —— proxy定义代理服务器的主机名和端口，auth\n- cancelToken —— cancelToken定义一个 cancel token 用于取消请求\n\n\n# Response 返回\n当我们ajax获取数据成功后会返回一个response对象，它包含了以下内容\n``` javascript\n\n{\n  // 服务器返回的数据\n  data: {},\n  // HTTP状态吗\n  status: 200,\n  // 服务器返回的消息\n  statusText: 'OK',\n  // 返回头\n  headers: {},\n  // 在返回我们的配置\n  config: {}\n}\n```\n\n# 统一Config配置\n在接口测试中，我们经常需要切换线上环境和测试环境，这里我们都可以通过Config来配置，这样我们所有的发起的请求都是通过这个基本的URL走了。\n\n``` javascript\naxios.defaults.timeout = 5000;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios.defaults.baseURL = 'http://www.xxxx.xxx/api';\n// axios.defaults.baseURL = 'http://192.168.1.129:8383';\n```\n\n\n# Interceptors 拦截器\n这里我必须重点介绍，在我们发起大量的请求时候，需要对请求做统一的处理那就用到它了。笔者在使用了`vue-resource`和`axios`之后亲身比较，`axios`的配置更加人性化。\n官方的API上这样介绍\n> You can intercept requests or responses before they are handled by then or catch.\n您可以拦截请求或响应之前，他们处理的操作或者异常\n\n\n## request统一处理操作\n如果是POST的请求，配置中可不能用`params`字段了，需要使用`data`字段。\n这里有个小地方需要注意，POST的传参需要序列化，不然服务端不会正确的接收哦，会报错。所以这里我们要对request的数据进行一次序列化。这里我用了`qs`,大家需要install一下\n\n``` javascript\nimport axios from 'axios'\nimport qs from 'qs'\n\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post'){\n    config.data = qs.stringify(config.data);\n  }\n  return config;\n},(error) =>{\n   alert(\"错误的传参\");\n  return Promise.reject(error);\n});\n```\n\n\n## response统一处理操作\n也就是说我们可以统一的在发起请求前，或者获得数据，对其进行统一的操作。这点非常的高效，在笔者的项目中，接口会返回一个code,就和微信API一样，code为200代表返回请求数据正确为其它时就自动跳出弹窗打印消息即可。\n\n``` javascript\n//code状态码200判断\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '200'){\n    alert(res.data.msg);\n    return Promise.reject(res);\n  }\n  return res;\n}, (error) => {\n  alert(\"网络异常\");\n  return Promise.reject(error);\n});\n```\n\n如果发生这些错误了我要结束当前的Promise所以返回一个`Promise.reject(res)`，停止Promise队列下面的操作,如果有对于Promise不熟悉的童鞋请自行搜索`Promise`(这里还遇到了一个小坑最后会介绍)\n\n\n# 我的配置\n好了介绍了这么多介绍下我的axios配置的文件设置吧,这个文件名是`config/http.js`\n``` javascript\n\nimport axios from 'axios'\nimport qs from 'qs'\nimport * as _ from './whole'\n\naxios.defaults.timeout = 5000;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios.defaults.baseURL = 'http://www.guinaben.com:8070';\n// axios.defaults.baseURL = 'http://192.168.1.129:8383';\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post'){\n    config.data = qs.stringify(config.data);\n  }\n  return config;\n},(error) =>{\n   _.toast(\"错误的传参\");\n  return Promise.reject(error);\n});\n\n//code状态码200判断\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '200'){\n    _.toast(res.data.msg);\n    return Promise.reject(res);\n  }\n  return res;\n}, (error) => {\n  _.toast(\"网络异常\");\n  return Promise.reject(error);\n});\n\nexport default axios;\n```\n\n\n发起的请求\n``` javascript\nimport axios from 'config/http'\n\naxios({\n  method:'get',\n  url: 'xxxx/xxxxx',\n  params: {\n    \"textbook_id\":id,\n    \"token\":token\n  }\n})\n.then((response) => {\n  resolve(response);\n})\n\n\naxios({\n  method:'post',\n  url: 'teacher/pwd/resetByMobile',\n  data: {\n   \"textbook_id\":id,\n    \"token\":token\n  }\n})\n.then((response) => {\n    resolve(response);\n})\n  \n  \n```\n\n# 一定要看\n因为这里我使用的`Promise`,所以在安卓4.4.3一下的手机还是不支持Promise的，所以会报错。需要引入` npm install babel-polyfill`和` npm install babel-runtime`，在入口文件上加上即可。\n``` javascript\nimport 'babel-polyfill' \n```\n\n# 最后\n下一篇将带来Vuex2和axios的配合，希望此篇能带给大家帮助。","slug":"Axios的配置","published":1,"updated":"2017-03-06T09:00:57.343Z","_id":"cizxvciun0003mspshsqtrodi","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>以前写Vue项目的时候都是使用vue-resource做为项目ajax库，在11月份的某一天尤大微博的更新表示ajax的库应该是通用的，放弃了对vue-resource的技术支持，推荐使用<a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">axios</a>。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1987062-b3255d564903d3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"此处输入图片的描述\"><br>既然尤大推荐的应该有过人之处，好吧于是在新的项目上开始使用Axios,开启这段学习（踩坑）的历程。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install axios</div></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>Axios和其他的ajax库都是很类似的，提供了2种使用的方式一种是直接使用实例方法的如：<br>下面是实例的所有可用方法，方法中的config会与axios实例中的config合并。（实例可以将一些通用的config先配置好）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//axios.get</span></div><div class=\"line\"><span class=\"comment\">//axios.post</span></div><div class=\"line\"></div><div class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"Config-配置\"><a href=\"#Config-配置\" class=\"headerlink\" title=\"Config 配置\"></a>Config 配置</h1><p>Axios的配置参数很多，我们来一一了解</p>\n<ul>\n<li>url —— 用来向服务器发送请求的url</li>\n<li>method —— 请求方法，默认是GET方法</li>\n<li>baseURL —— 基础URL路径，假如url不是绝对路径，如<a href=\"https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL\" target=\"_blank\" rel=\"external\">https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL</a> + url。</li>\n<li>transformRequest —— transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。</li>\n<li>transformResponse —— transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。</li>\n<li>headers —— 发送自定义Headers头文件，头文件中包含了http请求的各种信息。</li>\n<li>params —— params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&amp;param2=value2。<br>paramsSerializer —— params参数序列化器。</li>\n<li>data —— data是在发送POST、PUT或者PATCH请求的数据对象。</li>\n<li>timeout —— 请求超时设置，单位为毫秒</li>\n<li>withCredentials —— 表明是否有跨域请求需要用到证书</li>\n<li>adapter —— adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response</li>\n<li>auth —— auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。</li>\n<li>responseType —— 表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。</li>\n<li>xsrfCookieName —— 用作 xsrf token 值的 cookie 名称</li>\n<li>xsrfHeaderName —— 带有 xsrf token 值 http head 名称</li>\n<li>onUploadProgress —— 允许在上传过程中的做一些操作</li>\n<li>onDownloadProgress —— 允许在下载过程中的做一些操作</li>\n<li>maxContentLength —— 定义了接收到的response响应数据的最大长度。</li>\n<li>validateStatus —— validateStatus定义了根据HTTP响应状态码决定是否接收或拒绝获取到的promise。如果 validateStatus 返回 true (或设置为 null 或 undefined ),promise将被接收;否则,promise将被拒绝。</li>\n<li>maxRedirects —— maxRedirects定义了在node.js中redirect的最大值，如果设置为0，则没有redirect。</li>\n<li>httpAgent —— 定义在使用http请求时的代理</li>\n<li>httpsAgent —— 定义在使用https请求时的代理</li>\n<li>proxy —— proxy定义代理服务器的主机名和端口，auth</li>\n<li>cancelToken —— cancelToken定义一个 cancel token 用于取消请求</li>\n</ul>\n<h1 id=\"Response-返回\"><a href=\"#Response-返回\" class=\"headerlink\" title=\"Response 返回\"></a>Response 返回</h1><p>当我们ajax获取数据成功后会返回一个response对象，它包含了以下内容<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// 服务器返回的数据</span></div><div class=\"line\">  data: &#123;&#125;,</div><div class=\"line\">  <span class=\"comment\">// HTTP状态吗</span></div><div class=\"line\">  status: <span class=\"number\">200</span>,</div><div class=\"line\">  <span class=\"comment\">// 服务器返回的消息</span></div><div class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</div><div class=\"line\">  <span class=\"comment\">// 返回头</span></div><div class=\"line\">  headers: &#123;&#125;,</div><div class=\"line\">  <span class=\"comment\">// 在返回我们的配置</span></div><div class=\"line\">  config: &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"统一Config配置\"><a href=\"#统一Config配置\" class=\"headerlink\" title=\"统一Config配置\"></a>统一Config配置</h1><p>在接口测试中，我们经常需要切换线上环境和测试环境，这里我们都可以通过Config来配置，这样我们所有的发起的请求都是通过这个基本的URL走了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'http://www.xxxx.xxx/api'</span>;</div><div class=\"line\"><span class=\"comment\">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div></pre></td></tr></table></figure>\n<h1 id=\"Interceptors-拦截器\"><a href=\"#Interceptors-拦截器\" class=\"headerlink\" title=\"Interceptors 拦截器\"></a>Interceptors 拦截器</h1><p>这里我必须重点介绍，在我们发起大量的请求时候，需要对请求做统一的处理那就用到它了。笔者在使用了<code>vue-resource</code>和<code>axios</code>之后亲身比较，<code>axios</code>的配置更加人性化。<br>官方的API上这样介绍</p>\n<blockquote>\n<p>You can intercept requests or responses before they are handled by then or catch.<br>您可以拦截请求或响应之前，他们处理的操作或者异常</p>\n</blockquote>\n<h2 id=\"request统一处理操作\"><a href=\"#request统一处理操作\" class=\"headerlink\" title=\"request统一处理操作\"></a>request统一处理操作</h2><p>如果是POST的请求，配置中可不能用<code>params</code>字段了，需要使用<code>data</code>字段。<br>这里有个小地方需要注意，POST的传参需要序列化，不然服务端不会正确的接收哦，会报错。所以这里我们要对request的数据进行一次序列化。这里我用了<code>qs</code>,大家需要install一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"></div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</div><div class=\"line\">    config.data = qs.stringify(config.data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">   alert(<span class=\"string\">\"错误的传参\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"response统一处理操作\"><a href=\"#response统一处理操作\" class=\"headerlink\" title=\"response统一处理操作\"></a>response统一处理操作</h2><p>也就是说我们可以统一的在发起请求前，或者获得数据，对其进行统一的操作。这点非常的高效，在笔者的项目中，接口会返回一个code,就和微信API一样，code为200代表返回请求数据正确为其它时就自动跳出弹窗打印消息即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//code状态码200判断</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'200'</span>)&#123;</div><div class=\"line\">    alert(res.data.msg);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  alert(<span class=\"string\">\"网络异常\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果发生这些错误了我要结束当前的Promise所以返回一个<code>Promise.reject(res)</code>，停止Promise队列下面的操作,如果有对于Promise不熟悉的童鞋请自行搜索<code>Promise</code>(这里还遇到了一个小坑最后会介绍)</p>\n<h1 id=\"我的配置\"><a href=\"#我的配置\" class=\"headerlink\" title=\"我的配置\"></a>我的配置</h1><p>好了介绍了这么多介绍下我的axios配置的文件设置吧,这个文件名是<code>config/http.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'./whole'</span></div><div class=\"line\"></div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'http://www.guinaben.com:8070'</span>;</div><div class=\"line\"><span class=\"comment\">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</div><div class=\"line\">    config.data = qs.stringify(config.data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">   _.toast(<span class=\"string\">\"错误的传参\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//code状态码200判断</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'200'</span>)&#123;</div><div class=\"line\">    _.toast(res.data.msg);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  _.toast(<span class=\"string\">\"网络异常\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> axios;</div></pre></td></tr></table></figure></p>\n<p>发起的请求<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'config/http'</span></div><div class=\"line\"></div><div class=\"line\">axios(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>:<span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'xxxx/xxxxx'</span>,</div><div class=\"line\">  <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"textbook_id\"</span>:id,</div><div class=\"line\">    <span class=\"string\">\"token\"</span>:token</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">  resolve(response);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">axios(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>:<span class=\"string\">'post'</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'teacher/pwd/resetByMobile'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">   <span class=\"string\">\"textbook_id\"</span>:id,</div><div class=\"line\">    <span class=\"string\">\"token\"</span>:token</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">    resolve(response);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"一定要看\"><a href=\"#一定要看\" class=\"headerlink\" title=\"一定要看\"></a>一定要看</h1><p>因为这里我使用的<code>Promise</code>,所以在安卓4.4.3一下的手机还是不支持Promise的，所以会报错。需要引入<code>npm install babel-polyfill</code>和<code>npm install babel-runtime</code>，在入口文件上加上即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>下一篇将带来Vuex2和axios的配合，希望此篇能带给大家帮助。</p>\n","excerpt":"","more":"<blockquote>\n<p>以前写Vue项目的时候都是使用vue-resource做为项目ajax库，在11月份的某一天尤大微博的更新表示ajax的库应该是通用的，放弃了对vue-resource的技术支持，推荐使用<a href=\"https://github.com/mzabriskie/axios\">axios</a>。</p>\n</blockquote>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/1987062-b3255d564903d3d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"此处输入图片的描述\"><br>既然尤大推荐的应该有过人之处，好吧于是在新的项目上开始使用Axios,开启这段学习（踩坑）的历程。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install axios</div></pre></td></tr></table></figure>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>Axios和其他的ajax库都是很类似的，提供了2种使用的方式一种是直接使用实例方法的如：<br>下面是实例的所有可用方法，方法中的config会与axios实例中的config合并。（实例可以将一些通用的config先配置好）<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//axios.get</span></div><div class=\"line\"><span class=\"comment\">//axios.post</span></div><div class=\"line\"></div><div class=\"line\">axios.get(<span class=\"string\">'/user?ID=12345'</span>)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">  &#125;)</div><div class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"Config-配置\"><a href=\"#Config-配置\" class=\"headerlink\" title=\"Config 配置\"></a>Config 配置</h1><p>Axios的配置参数很多，我们来一一了解</p>\n<ul>\n<li>url —— 用来向服务器发送请求的url</li>\n<li>method —— 请求方法，默认是GET方法</li>\n<li>baseURL —— 基础URL路径，假如url不是绝对路径，如<a href=\"https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL\">https://some-domain.com/api/v1/login?name=jack,那么向服务器发送请求的URL将会是baseURL</a> + url。</li>\n<li>transformRequest —— transformRequest方法允许在请求发送到服务器之前修改该请求，此方法只适用于PUT、POST和PATCH方法中。而且，此方法最后必须返回一个string、ArrayBuffer或者Stream。</li>\n<li>transformResponse —— transformResponse方法允许在数据传递到then/catch之前修改response数据。此方法最后也要返回数据。</li>\n<li>headers —— 发送自定义Headers头文件，头文件中包含了http请求的各种信息。</li>\n<li>params —— params是发送请求的查询参数对象，对象中的数据会被拼接成url?param1=value1&amp;param2=value2。<br>paramsSerializer —— params参数序列化器。</li>\n<li>data —— data是在发送POST、PUT或者PATCH请求的数据对象。</li>\n<li>timeout —— 请求超时设置，单位为毫秒</li>\n<li>withCredentials —— 表明是否有跨域请求需要用到证书</li>\n<li>adapter —— adapter允许用户处理更易于测试的请求。返回一个Promise和一个有效的response</li>\n<li>auth —— auth表明提供凭证用于完成http的身份验证。这将会在headers中设置一个Authorization授权信息。自定义Authorization授权要设置在headers中。</li>\n<li>responseType —— 表示服务器将返回响应的数据类型，有arraybuffer、blob、document、json、text、stream这6个类型，默认是json类似数据。</li>\n<li>xsrfCookieName —— 用作 xsrf token 值的 cookie 名称</li>\n<li>xsrfHeaderName —— 带有 xsrf token 值 http head 名称</li>\n<li>onUploadProgress —— 允许在上传过程中的做一些操作</li>\n<li>onDownloadProgress —— 允许在下载过程中的做一些操作</li>\n<li>maxContentLength —— 定义了接收到的response响应数据的最大长度。</li>\n<li>validateStatus —— validateStatus定义了根据HTTP响应状态码决定是否接收或拒绝获取到的promise。如果 validateStatus 返回 true (或设置为 null 或 undefined ),promise将被接收;否则,promise将被拒绝。</li>\n<li>maxRedirects —— maxRedirects定义了在node.js中redirect的最大值，如果设置为0，则没有redirect。</li>\n<li>httpAgent —— 定义在使用http请求时的代理</li>\n<li>httpsAgent —— 定义在使用https请求时的代理</li>\n<li>proxy —— proxy定义代理服务器的主机名和端口，auth</li>\n<li>cancelToken —— cancelToken定义一个 cancel token 用于取消请求</li>\n</ul>\n<h1 id=\"Response-返回\"><a href=\"#Response-返回\" class=\"headerlink\" title=\"Response 返回\"></a>Response 返回</h1><p>当我们ajax获取数据成功后会返回一个response对象，它包含了以下内容<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"comment\">// 服务器返回的数据</span></div><div class=\"line\">  data: &#123;&#125;,</div><div class=\"line\">  <span class=\"comment\">// HTTP状态吗</span></div><div class=\"line\">  status: <span class=\"number\">200</span>,</div><div class=\"line\">  <span class=\"comment\">// 服务器返回的消息</span></div><div class=\"line\">  statusText: <span class=\"string\">'OK'</span>,</div><div class=\"line\">  <span class=\"comment\">// 返回头</span></div><div class=\"line\">  headers: &#123;&#125;,</div><div class=\"line\">  <span class=\"comment\">// 在返回我们的配置</span></div><div class=\"line\">  config: &#123;&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"统一Config配置\"><a href=\"#统一Config配置\" class=\"headerlink\" title=\"统一Config配置\"></a>统一Config配置</h1><p>在接口测试中，我们经常需要切换线上环境和测试环境，这里我们都可以通过Config来配置，这样我们所有的发起的请求都是通过这个基本的URL走了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'http://www.xxxx.xxx/api'</span>;</div><div class=\"line\"><span class=\"comment\">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div></pre></td></tr></table></figure>\n<h1 id=\"Interceptors-拦截器\"><a href=\"#Interceptors-拦截器\" class=\"headerlink\" title=\"Interceptors 拦截器\"></a>Interceptors 拦截器</h1><p>这里我必须重点介绍，在我们发起大量的请求时候，需要对请求做统一的处理那就用到它了。笔者在使用了<code>vue-resource</code>和<code>axios</code>之后亲身比较，<code>axios</code>的配置更加人性化。<br>官方的API上这样介绍</p>\n<blockquote>\n<p>You can intercept requests or responses before they are handled by then or catch.<br>您可以拦截请求或响应之前，他们处理的操作或者异常</p>\n</blockquote>\n<h2 id=\"request统一处理操作\"><a href=\"#request统一处理操作\" class=\"headerlink\" title=\"request统一处理操作\"></a>request统一处理操作</h2><p>如果是POST的请求，配置中可不能用<code>params</code>字段了，需要使用<code>data</code>字段。<br>这里有个小地方需要注意，POST的传参需要序列化，不然服务端不会正确的接收哦，会报错。所以这里我们要对request的数据进行一次序列化。这里我用了<code>qs</code>,大家需要install一下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"></div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</div><div class=\"line\">    config.data = qs.stringify(config.data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">   alert(<span class=\"string\">\"错误的传参\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"response统一处理操作\"><a href=\"#response统一处理操作\" class=\"headerlink\" title=\"response统一处理操作\"></a>response统一处理操作</h2><p>也就是说我们可以统一的在发起请求前，或者获得数据，对其进行统一的操作。这点非常的高效，在笔者的项目中，接口会返回一个code,就和微信API一样，code为200代表返回请求数据正确为其它时就自动跳出弹窗打印消息即可。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//code状态码200判断</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'200'</span>)&#123;</div><div class=\"line\">    alert(res.data.msg);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  alert(<span class=\"string\">\"网络异常\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果发生这些错误了我要结束当前的Promise所以返回一个<code>Promise.reject(res)</code>，停止Promise队列下面的操作,如果有对于Promise不熟悉的童鞋请自行搜索<code>Promise</code>(这里还遇到了一个小坑最后会介绍)</p>\n<h1 id=\"我的配置\"><a href=\"#我的配置\" class=\"headerlink\" title=\"我的配置\"></a>我的配置</h1><p>好了介绍了这么多介绍下我的axios配置的文件设置吧,这个文件名是<code>config/http.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'./whole'</span></div><div class=\"line\"></div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'http://www.guinaben.com:8070'</span>;</div><div class=\"line\"><span class=\"comment\">// axios.defaults.baseURL = 'http://192.168.1.129:8383';</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</div><div class=\"line\">    config.data = qs.stringify(config.data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">   _.toast(<span class=\"string\">\"错误的传参\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//code状态码200判断</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'200'</span>)&#123;</div><div class=\"line\">    _.toast(res.data.msg);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  _.toast(<span class=\"string\">\"网络异常\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> axios;</div></pre></td></tr></table></figure></p>\n<p>发起的请求<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'config/http'</span></div><div class=\"line\"></div><div class=\"line\">axios(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>:<span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'xxxx/xxxxx'</span>,</div><div class=\"line\">  <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"textbook_id\"</span>:id,</div><div class=\"line\">    <span class=\"string\">\"token\"</span>:token</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">  resolve(response);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">axios(&#123;</div><div class=\"line\">  <span class=\"attr\">method</span>:<span class=\"string\">'post'</span>,</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'teacher/pwd/resetByMobile'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">   <span class=\"string\">\"textbook_id\"</span>:id,</div><div class=\"line\">    <span class=\"string\">\"token\"</span>:token</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">.then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">    resolve(response);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"一定要看\"><a href=\"#一定要看\" class=\"headerlink\" title=\"一定要看\"></a>一定要看</h1><p>因为这里我使用的<code>Promise</code>,所以在安卓4.4.3一下的手机还是不支持Promise的，所以会报错。需要引入<code>npm install babel-polyfill</code>和<code>npm install babel-runtime</code>，在入口文件上加上即可。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'babel-polyfill'</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>下一篇将带来Vuex2和axios的配合，希望此篇能带给大家帮助。</p>\n"},{"title":"","date":"2017-01-28T11:41:19.000Z","thumbnail":"http://okkula0y9.bkt.clouddn.com/hexo-logo.png","_content":"\n# 前言\n今天鸡年的第一天，说了好久想搭建自己的博客记录开发的日常，结果一拖再拖Orz（拖延症伤不起）。今天花了一下午终于搭建完成。\n\n## 使用技术\n1.Hexo\n前端建站神器，这里不多说了。[Hexo文档][1]\n\n2.主题\n当时在发现这个主题的时候是比较惊艳的，个人比较喜欢谷歌的这种风格，作者是位国人。很感谢无私的付出\n[Material Theme][2]\n\n3.Coding Pages\n本来打算使用Github Pages，有时候墙的厉害。使用[Coding Pages][3]做为承载网站。\n主要使用「用户 Pages」类型，在个人项目里新建一个名为 {user_name}.coding.me 的项目，然后将Hexo中生成的Public文件夹作为Git的主目录即可。\n\n\n## 踩坑\n1._config.yml 是全站的控制文件，在配置的时候，有时候稍不注意将下面代码前的空格删掉了运行就会报错。\n``` js\n//source前面有一个空格\nsource_dir: source\n```\n2.如果安装了新的主题，就需要到该主题下的_config.yml去配置。\n\n\n\n## 结尾\n新的一年，以此篇开始。Fighting~\n\n\n  [1]: https://hexo.io/zh-cn/docs/themes.html\n  [2]: https://material.viosey.com/\n  [3]: https://coding.net/help/doc/pages/index.html","source":"_posts/hello.md","raw":"---\ntitle: \ndate: 2017-01-28 19:41:19\ntags: [Hexo,博客]\nthumbnail: http://okkula0y9.bkt.clouddn.com/hexo-logo.png\n---\n\n# 前言\n今天鸡年的第一天，说了好久想搭建自己的博客记录开发的日常，结果一拖再拖Orz（拖延症伤不起）。今天花了一下午终于搭建完成。\n\n## 使用技术\n1.Hexo\n前端建站神器，这里不多说了。[Hexo文档][1]\n\n2.主题\n当时在发现这个主题的时候是比较惊艳的，个人比较喜欢谷歌的这种风格，作者是位国人。很感谢无私的付出\n[Material Theme][2]\n\n3.Coding Pages\n本来打算使用Github Pages，有时候墙的厉害。使用[Coding Pages][3]做为承载网站。\n主要使用「用户 Pages」类型，在个人项目里新建一个名为 {user_name}.coding.me 的项目，然后将Hexo中生成的Public文件夹作为Git的主目录即可。\n\n\n## 踩坑\n1._config.yml 是全站的控制文件，在配置的时候，有时候稍不注意将下面代码前的空格删掉了运行就会报错。\n``` js\n//source前面有一个空格\nsource_dir: source\n```\n2.如果安装了新的主题，就需要到该主题下的_config.yml去配置。\n\n\n\n## 结尾\n新的一年，以此篇开始。Fighting~\n\n\n  [1]: https://hexo.io/zh-cn/docs/themes.html\n  [2]: https://material.viosey.com/\n  [3]: https://coding.net/help/doc/pages/index.html","slug":"hello","published":1,"updated":"2017-03-06T09:00:53.857Z","_id":"cizxvcius0004mspsu8l06qez","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天鸡年的第一天，说了好久想搭建自己的博客记录开发的日常，结果一拖再拖Orz（拖延症伤不起）。今天花了一下午终于搭建完成。</p>\n<h2 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h2><p>1.Hexo<br>前端建站神器，这里不多说了。<a href=\"https://hexo.io/zh-cn/docs/themes.html\" target=\"_blank\" rel=\"external\">Hexo文档</a></p>\n<p>2.主题<br>当时在发现这个主题的时候是比较惊艳的，个人比较喜欢谷歌的这种风格，作者是位国人。很感谢无私的付出<br><a href=\"https://material.viosey.com/\" target=\"_blank\" rel=\"external\">Material Theme</a></p>\n<p>3.Coding Pages<br>本来打算使用Github Pages，有时候墙的厉害。使用<a href=\"https://coding.net/help/doc/pages/index.html\" target=\"_blank\" rel=\"external\">Coding Pages</a>做为承载网站。<br>主要使用「用户 Pages」类型，在个人项目里新建一个名为 {user_name}.coding.me 的项目，然后将Hexo中生成的Public文件夹作为Git的主目录即可。</p>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p>1._config.yml 是全站的控制文件，在配置的时候，有时候稍不注意将下面代码前的空格删掉了运行就会报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//source前面有一个空格</span></div><div class=\"line\">source_dir: source</div></pre></td></tr></table></figure></p>\n<p>2.如果安装了新的主题，就需要到该主题下的_config.yml去配置。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>新的一年，以此篇开始。Fighting~</p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>今天鸡年的第一天，说了好久想搭建自己的博客记录开发的日常，结果一拖再拖Orz（拖延症伤不起）。今天花了一下午终于搭建完成。</p>\n<h2 id=\"使用技术\"><a href=\"#使用技术\" class=\"headerlink\" title=\"使用技术\"></a>使用技术</h2><p>1.Hexo<br>前端建站神器，这里不多说了。<a href=\"https://hexo.io/zh-cn/docs/themes.html\">Hexo文档</a></p>\n<p>2.主题<br>当时在发现这个主题的时候是比较惊艳的，个人比较喜欢谷歌的这种风格，作者是位国人。很感谢无私的付出<br><a href=\"https://material.viosey.com/\">Material Theme</a></p>\n<p>3.Coding Pages<br>本来打算使用Github Pages，有时候墙的厉害。使用<a href=\"https://coding.net/help/doc/pages/index.html\">Coding Pages</a>做为承载网站。<br>主要使用「用户 Pages」类型，在个人项目里新建一个名为 {user_name}.coding.me 的项目，然后将Hexo中生成的Public文件夹作为Git的主目录即可。</p>\n<h2 id=\"踩坑\"><a href=\"#踩坑\" class=\"headerlink\" title=\"踩坑\"></a>踩坑</h2><p>1._config.yml 是全站的控制文件，在配置的时候，有时候稍不注意将下面代码前的空格删掉了运行就会报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//source前面有一个空格</span></div><div class=\"line\">source_dir: source</div></pre></td></tr></table></figure></p>\n<p>2.如果安装了新的主题，就需要到该主题下的_config.yml去配置。</p>\n<h2 id=\"结尾\"><a href=\"#结尾\" class=\"headerlink\" title=\"结尾\"></a>结尾</h2><p>新的一年，以此篇开始。Fighting~</p>\n"},{"layout":"_posts","title":"","date":"2017-02-01T08:42:40.000Z","thumbnail":"http://okkula0y9.bkt.clouddn.com/201602011.jpg","_content":"\n> 总结笔者最近在项目中使用Vuex2和Axios的总结和小技巧，方便日后查看。本人能力有限，如有错误还请大大们指正探讨😭。\n\n# 阅读前须知\n接上一篇的[Axios的配置][1]，阅读本文默认您已经掌握了Vuex2的基本语法、Axios的使用配置与方法、Promise的基本语法。（下面将放出参考链接方便大家在有不明白的地方查看）此篇主要叙述我在实际项目过程中Vuex2和Axios的组合操作。\n\n参考：\n- [Vue单向数据流-Vuex2][2]\n- [Ajax库-Axios][3]\n- [Promise介绍][4]\n\n\n## Vuex2中的Actions\n\n在Vuex1中actions都可以统一使用`dispatch`去触发`mutation`，那时候去异步这种数据流没什么认识。在Vuex2中规定了,同步的方法使用`commit`去提交`mutation`，异步的方法（如接口请求，完成接口请求后的操作）只能通过分发action去触发，即使用`dispatch`。\n\n![此处输入图片的描述][5]\n\n这里不经吐槽2句，Vuex2的Api还是蛮人性化的，对比Redux为了用好单向数据流，不得不引入一大堆诸如`react-redux`、`redux-saga`、`redux-thunk`...，对新上手的小白来说简直是一脸蒙蔽。上面这些库所带的功能，用Vuex2都可以完成（手动骄傲），当然Vuex2也是站在这些巨人的肩膀上。\n\n\n下面来看下`vuex2`中关于actions的API\n``` javascript\n\n类型: { [type: string]: Function }\n\n在 store 上注册 action。处理函数接受一个 context 对象，包含以下属性：\n\n{\n  state,     // 等同于 store.state, 若在模块中则为局部状态\n  rootState, // 等同于 store.state, 只存在于模块中\n  commit,    // 等同于 store.commit\n  dispatch,  // 等同于 store.dispatch\n  getters    // 等同于 store.getters\n}\n```\n\n\n## Axios的配置\n\n这个是我项目内Axios的配置，主要做了下面几件事情\n1. 5秒的超时验证\n2. POST的设置\n3. 统一的response封装。我通过接口传回的CODE码去判断该请求是否正确\n如果想去看更详细的解析可以通过[Axios的配置][1]\n\n``` javascript\n\nimport axios from 'axios'\nimport qs from 'qs'\nimport * as _ from './whole'    //alert\n\naxios.defaults.timeout = 5000;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios.defaults.baseURL = 'http://xxx.xxx.com';\n\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post'){\n    config.data = qs.stringify(config.data);\n  }\n  return config;\n},(error) =>{\n   _.toast(\"错误的传参\");\n  return Promise.reject(error);\n});\n\n//code状态码200判断\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '200'){\n    _.toast(res.data.msg);\n    return Promise.reject(res);\n  }\n  return res;\n}, (error) => {\n  _.toast(\"网络异常\");\n  return Promise.reject(error);\n});\n\nexport default axios;\n\n```\n\n## 完成一个请求操作\n\n下面介绍一个登陆action的操作，\n1. 在接口发起请求时跳出loading\n2. 接口请求成功结束loading，并保存数据进入store\n3. 接口请求失败抛出异常，结束loading。\n4. 返回一个Promise对象，方便继续操作。\n\n``` javascript\nexport const login = ({ commit },params) => {\n  _.busy();               //loding开始\n  return new Promise((resolve, reject)=> { \n    axios({\n      method:'get',\n      url: 'teacher/login',\n      params: {\n        moblie:params.mobile,\n        password:params.password,\n      }\n    })\n    .then((response) => {\n        commit(types.LOGIN,response.data.data); //获得的数据通过mutation，存入store中\n        _.leave();  //loding结束\n        resolve(response);\n    })\n    .catch((error) => {\n      _.leave();  //loding结束\n    })\n  });\n}\n\nconst mutations = {\n  [types.LOGIN](state, data){\n    state.token = data.token;\n  }\n}\n\n```\n\n\n\n``` javascript\n//调用action\n\nimport { mapActions,mapGetters  } from 'vuex'\n\nexport default {\n  methods:{\n    ...mapActions(['login']),                   //注入action\n    _login(){\n      let params = {\n        mobile:this.mobile,\n        pwd:this.password\n      }\n      this.login(params).\n      then(()=>{\n          this.$router.replace('/main/index');          //正确完成后进入主页\n      })\n      .catch((error)=>{                                 //错误则清空密码文本框\n          //可以在这里对Error进行捕获，然后根据错误类型进行相对应的处理\n          this.pwd = '';                           \n      });\n    }\n  }\n\n```\n\n## 一点说明\n因为在Vuex2中action可以直接拿到Store的值，所以我们可以通过 `rootState`这个参数拿到根的store值，通过`state`拿到当前模块中store的值\n都没必要在从getter里拿到值，然后通过params的方式传入。\n\n``` javascript\n\nexport const xxx = ({state,rootState,commit}) => {\n  return new Promise((resolve, reject)=> { \n    axios({\n      method:'get',\n      url: 'teacher/workbook/class/exercise',\n      params: {\n        \"token\":rootState.login.token,          //从store根中拿到数据\n        \"classCode\":state.code,                 //从当前模块中拿到数据\n        \"chapterId\":rootState.route.params.chapterId\n      }\n    })\n    .then((response) => {\n      commit(types.WORKBOOK_CLASS_EXERCISE,response.data.data)\n      resolve(response);\n    })\n  });\n}\n\n```\n这样是不是更方便我们去审查action的代码？\n\n\n\n  [1]: https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/\n  [2]: https://vuex.vuejs.org/zh-cn/index.html\n  [3]: https://github.com/mzabriskie/axioss://vuex.vuejs.org/zh-cn/index.html\n  [4]: http://www.jianshu.com/p/063f7e490e9aoss://vuex.vuejs.org/zh-cn/index.html\n  [5]: https://vuex.vuejs.org/zh-cn/images/flow.png","source":"_posts/Vuex2与Axios开发.md","raw":"---\nlayout: _posts\ntitle: ''\ndate: 2017-02-01 16:42:40\ntags: [Vuex2,Vue,Axios]\nthumbnail: http://okkula0y9.bkt.clouddn.com/201602011.jpg\n---\n\n> 总结笔者最近在项目中使用Vuex2和Axios的总结和小技巧，方便日后查看。本人能力有限，如有错误还请大大们指正探讨😭。\n\n# 阅读前须知\n接上一篇的[Axios的配置][1]，阅读本文默认您已经掌握了Vuex2的基本语法、Axios的使用配置与方法、Promise的基本语法。（下面将放出参考链接方便大家在有不明白的地方查看）此篇主要叙述我在实际项目过程中Vuex2和Axios的组合操作。\n\n参考：\n- [Vue单向数据流-Vuex2][2]\n- [Ajax库-Axios][3]\n- [Promise介绍][4]\n\n\n## Vuex2中的Actions\n\n在Vuex1中actions都可以统一使用`dispatch`去触发`mutation`，那时候去异步这种数据流没什么认识。在Vuex2中规定了,同步的方法使用`commit`去提交`mutation`，异步的方法（如接口请求，完成接口请求后的操作）只能通过分发action去触发，即使用`dispatch`。\n\n![此处输入图片的描述][5]\n\n这里不经吐槽2句，Vuex2的Api还是蛮人性化的，对比Redux为了用好单向数据流，不得不引入一大堆诸如`react-redux`、`redux-saga`、`redux-thunk`...，对新上手的小白来说简直是一脸蒙蔽。上面这些库所带的功能，用Vuex2都可以完成（手动骄傲），当然Vuex2也是站在这些巨人的肩膀上。\n\n\n下面来看下`vuex2`中关于actions的API\n``` javascript\n\n类型: { [type: string]: Function }\n\n在 store 上注册 action。处理函数接受一个 context 对象，包含以下属性：\n\n{\n  state,     // 等同于 store.state, 若在模块中则为局部状态\n  rootState, // 等同于 store.state, 只存在于模块中\n  commit,    // 等同于 store.commit\n  dispatch,  // 等同于 store.dispatch\n  getters    // 等同于 store.getters\n}\n```\n\n\n## Axios的配置\n\n这个是我项目内Axios的配置，主要做了下面几件事情\n1. 5秒的超时验证\n2. POST的设置\n3. 统一的response封装。我通过接口传回的CODE码去判断该请求是否正确\n如果想去看更详细的解析可以通过[Axios的配置][1]\n\n``` javascript\n\nimport axios from 'axios'\nimport qs from 'qs'\nimport * as _ from './whole'    //alert\n\naxios.defaults.timeout = 5000;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\naxios.defaults.baseURL = 'http://xxx.xxx.com';\n\n\n//POST传参序列化\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post'){\n    config.data = qs.stringify(config.data);\n  }\n  return config;\n},(error) =>{\n   _.toast(\"错误的传参\");\n  return Promise.reject(error);\n});\n\n//code状态码200判断\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '200'){\n    _.toast(res.data.msg);\n    return Promise.reject(res);\n  }\n  return res;\n}, (error) => {\n  _.toast(\"网络异常\");\n  return Promise.reject(error);\n});\n\nexport default axios;\n\n```\n\n## 完成一个请求操作\n\n下面介绍一个登陆action的操作，\n1. 在接口发起请求时跳出loading\n2. 接口请求成功结束loading，并保存数据进入store\n3. 接口请求失败抛出异常，结束loading。\n4. 返回一个Promise对象，方便继续操作。\n\n``` javascript\nexport const login = ({ commit },params) => {\n  _.busy();               //loding开始\n  return new Promise((resolve, reject)=> { \n    axios({\n      method:'get',\n      url: 'teacher/login',\n      params: {\n        moblie:params.mobile,\n        password:params.password,\n      }\n    })\n    .then((response) => {\n        commit(types.LOGIN,response.data.data); //获得的数据通过mutation，存入store中\n        _.leave();  //loding结束\n        resolve(response);\n    })\n    .catch((error) => {\n      _.leave();  //loding结束\n    })\n  });\n}\n\nconst mutations = {\n  [types.LOGIN](state, data){\n    state.token = data.token;\n  }\n}\n\n```\n\n\n\n``` javascript\n//调用action\n\nimport { mapActions,mapGetters  } from 'vuex'\n\nexport default {\n  methods:{\n    ...mapActions(['login']),                   //注入action\n    _login(){\n      let params = {\n        mobile:this.mobile,\n        pwd:this.password\n      }\n      this.login(params).\n      then(()=>{\n          this.$router.replace('/main/index');          //正确完成后进入主页\n      })\n      .catch((error)=>{                                 //错误则清空密码文本框\n          //可以在这里对Error进行捕获，然后根据错误类型进行相对应的处理\n          this.pwd = '';                           \n      });\n    }\n  }\n\n```\n\n## 一点说明\n因为在Vuex2中action可以直接拿到Store的值，所以我们可以通过 `rootState`这个参数拿到根的store值，通过`state`拿到当前模块中store的值\n都没必要在从getter里拿到值，然后通过params的方式传入。\n\n``` javascript\n\nexport const xxx = ({state,rootState,commit}) => {\n  return new Promise((resolve, reject)=> { \n    axios({\n      method:'get',\n      url: 'teacher/workbook/class/exercise',\n      params: {\n        \"token\":rootState.login.token,          //从store根中拿到数据\n        \"classCode\":state.code,                 //从当前模块中拿到数据\n        \"chapterId\":rootState.route.params.chapterId\n      }\n    })\n    .then((response) => {\n      commit(types.WORKBOOK_CLASS_EXERCISE,response.data.data)\n      resolve(response);\n    })\n  });\n}\n\n```\n这样是不是更方便我们去审查action的代码？\n\n\n\n  [1]: https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/\n  [2]: https://vuex.vuejs.org/zh-cn/index.html\n  [3]: https://github.com/mzabriskie/axioss://vuex.vuejs.org/zh-cn/index.html\n  [4]: http://www.jianshu.com/p/063f7e490e9aoss://vuex.vuejs.org/zh-cn/index.html\n  [5]: https://vuex.vuejs.org/zh-cn/images/flow.png","slug":"Vuex2与Axios开发","published":1,"updated":"2017-03-07T05:33:46.000Z","_id":"cizxvciv90005mspslxadsb7y","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>总结笔者最近在项目中使用Vuex2和Axios的总结和小技巧，方便日后查看。本人能力有限，如有错误还请大大们指正探讨😭。</p>\n</blockquote>\n<h1 id=\"阅读前须知\"><a href=\"#阅读前须知\" class=\"headerlink\" title=\"阅读前须知\"></a>阅读前须知</h1><p>接上一篇的<a href=\"https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/\">Axios的配置</a>，阅读本文默认您已经掌握了Vuex2的基本语法、Axios的使用配置与方法、Promise的基本语法。（下面将放出参考链接方便大家在有不明白的地方查看）此篇主要叙述我在实际项目过程中Vuex2和Axios的组合操作。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://vuex.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">Vue单向数据流-Vuex2</a></li>\n<li><a href=\"https://github.com/mzabriskie/axioss://vuex.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">Ajax库-Axios</a></li>\n<li><a href=\"http://www.jianshu.com/p/063f7e490e9aoss://vuex.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">Promise介绍</a></li>\n</ul>\n<h2 id=\"Vuex2中的Actions\"><a href=\"#Vuex2中的Actions\" class=\"headerlink\" title=\"Vuex2中的Actions\"></a>Vuex2中的Actions</h2><p>在Vuex1中actions都可以统一使用<code>dispatch</code>去触发<code>mutation</code>，那时候去异步这种数据流没什么认识。在Vuex2中规定了,同步的方法使用<code>commit</code>去提交<code>mutation</code>，异步的方法（如接口请求，完成接口请求后的操作）只能通过分发action去触发，即使用<code>dispatch</code>。</p>\n<p><img src=\"https://vuex.vuejs.org/zh-cn/images/flow.png\" alt=\"此处输入图片的描述\"></p>\n<p>这里不经吐槽2句，Vuex2的Api还是蛮人性化的，对比Redux为了用好单向数据流，不得不引入一大堆诸如<code>react-redux</code>、<code>redux-saga</code>、<code>redux-thunk</code>…，对新上手的小白来说简直是一脸蒙蔽。上面这些库所带的功能，用Vuex2都可以完成（手动骄傲），当然Vuex2也是站在这些巨人的肩膀上。</p>\n<p>下面来看下<code>vuex2</code>中关于actions的API<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">类型: &#123; [type: string]: <span class=\"built_in\">Function</span> &#125;</div><div class=\"line\"></div><div class=\"line\">在 store 上注册 action。处理函数接受一个 context 对象，包含以下属性：</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  state,     <span class=\"comment\">// 等同于 store.state, 若在模块中则为局部状态</span></div><div class=\"line\">  rootState, <span class=\"comment\">// 等同于 store.state, 只存在于模块中</span></div><div class=\"line\">  commit,    <span class=\"comment\">// 等同于 store.commit</span></div><div class=\"line\">  dispatch,  <span class=\"comment\">// 等同于 store.dispatch</span></div><div class=\"line\">  getters    <span class=\"comment\">// 等同于 store.getters</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Axios的配置\"><a href=\"#Axios的配置\" class=\"headerlink\" title=\"Axios的配置\"></a>Axios的配置</h2><p>这个是我项目内Axios的配置，主要做了下面几件事情</p>\n<ol>\n<li>5秒的超时验证</li>\n<li>POST的设置</li>\n<li>统一的response封装。我通过接口传回的CODE码去判断该请求是否正确<br>如果想去看更详细的解析可以通过<a href=\"https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/\">Axios的配置</a></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'./whole'</span>    <span class=\"comment\">//alert</span></div><div class=\"line\"></div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'http://xxx.xxx.com'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</div><div class=\"line\">    config.data = qs.stringify(config.data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">   _.toast(<span class=\"string\">\"错误的传参\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//code状态码200判断</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'200'</span>)&#123;</div><div class=\"line\">    _.toast(res.data.msg);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  _.toast(<span class=\"string\">\"网络异常\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> axios;</div></pre></td></tr></table></figure>\n<h2 id=\"完成一个请求操作\"><a href=\"#完成一个请求操作\" class=\"headerlink\" title=\"完成一个请求操作\"></a>完成一个请求操作</h2><p>下面介绍一个登陆action的操作，</p>\n<ol>\n<li>在接口发起请求时跳出loading</li>\n<li>接口请求成功结束loading，并保存数据进入store</li>\n<li>接口请求失败抛出异常，结束loading。</li>\n<li>返回一个Promise对象，方便继续操作。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> login = <span class=\"function\">(<span class=\"params\">&#123; commit &#125;,params</span>) =&gt;</span> &#123;</div><div class=\"line\">  _.busy();               <span class=\"comment\">//loding开始</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123; </div><div class=\"line\">    axios(&#123;</div><div class=\"line\">      <span class=\"attr\">method</span>:<span class=\"string\">'get'</span>,</div><div class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">'teacher/login'</span>,</div><div class=\"line\">      <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">moblie</span>:params.mobile,</div><div class=\"line\">        <span class=\"attr\">password</span>:params.password,</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">        commit(types.LOGIN,response.data.data); <span class=\"comment\">//获得的数据通过mutation，存入store中</span></div><div class=\"line\">        _.leave();  <span class=\"comment\">//loding结束</span></div><div class=\"line\">        resolve(response);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">      _.leave();  <span class=\"comment\">//loding结束</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</div><div class=\"line\">  [types.LOGIN](state, data)&#123;</div><div class=\"line\">    state.token = data.token;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调用action</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions,mapGetters  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">methods</span>:&#123;</div><div class=\"line\">    ...mapActions([<span class=\"string\">'login'</span>]),                   <span class=\"comment\">//注入action</span></div><div class=\"line\">    _login()&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> params = &#123;</div><div class=\"line\">        <span class=\"attr\">mobile</span>:<span class=\"keyword\">this</span>.mobile,</div><div class=\"line\">        <span class=\"attr\">pwd</span>:<span class=\"keyword\">this</span>.password</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.login(params).</div><div class=\"line\">      then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">'/main/index'</span>);          <span class=\"comment\">//正确完成后进入主页</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;                                 <span class=\"comment\">//错误则清空密码文本框</span></div><div class=\"line\">          <span class=\"comment\">//可以在这里对Error进行捕获，然后根据错误类型进行相对应的处理</span></div><div class=\"line\">          <span class=\"keyword\">this</span>.pwd = <span class=\"string\">''</span>;                           </div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"一点说明\"><a href=\"#一点说明\" class=\"headerlink\" title=\"一点说明\"></a>一点说明</h2><p>因为在Vuex2中action可以直接拿到Store的值，所以我们可以通过 <code>rootState</code>这个参数拿到根的store值，通过<code>state</code>拿到当前模块中store的值<br>都没必要在从getter里拿到值，然后通过params的方式传入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> xxx = <span class=\"function\">(<span class=\"params\">&#123;state,rootState,commit&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123; </div><div class=\"line\">    axios(&#123;</div><div class=\"line\">      <span class=\"attr\">method</span>:<span class=\"string\">'get'</span>,</div><div class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">'teacher/workbook/class/exercise'</span>,</div><div class=\"line\">      <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"token\"</span>:rootState.login.token,          <span class=\"comment\">//从store根中拿到数据</span></div><div class=\"line\">        <span class=\"string\">\"classCode\"</span>:state.code,                 <span class=\"comment\">//从当前模块中拿到数据</span></div><div class=\"line\">        <span class=\"string\">\"chapterId\"</span>:rootState.route.params.chapterId</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">      commit(types.WORKBOOK_CLASS_EXERCISE,response.data.data)</div><div class=\"line\">      resolve(response);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样是不是更方便我们去审查action的代码？</p>\n","excerpt":"","more":"<blockquote>\n<p>总结笔者最近在项目中使用Vuex2和Axios的总结和小技巧，方便日后查看。本人能力有限，如有错误还请大大们指正探讨😭。</p>\n</blockquote>\n<h1 id=\"阅读前须知\"><a href=\"#阅读前须知\" class=\"headerlink\" title=\"阅读前须知\"></a>阅读前须知</h1><p>接上一篇的<a href=\"https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/\">Axios的配置</a>，阅读本文默认您已经掌握了Vuex2的基本语法、Axios的使用配置与方法、Promise的基本语法。（下面将放出参考链接方便大家在有不明白的地方查看）此篇主要叙述我在实际项目过程中Vuex2和Axios的组合操作。</p>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://vuex.vuejs.org/zh-cn/index.html\">Vue单向数据流-Vuex2</a></li>\n<li><a href=\"https://github.com/mzabriskie/axioss://vuex.vuejs.org/zh-cn/index.html\">Ajax库-Axios</a></li>\n<li><a href=\"http://www.jianshu.com/p/063f7e490e9aoss://vuex.vuejs.org/zh-cn/index.html\">Promise介绍</a></li>\n</ul>\n<h2 id=\"Vuex2中的Actions\"><a href=\"#Vuex2中的Actions\" class=\"headerlink\" title=\"Vuex2中的Actions\"></a>Vuex2中的Actions</h2><p>在Vuex1中actions都可以统一使用<code>dispatch</code>去触发<code>mutation</code>，那时候去异步这种数据流没什么认识。在Vuex2中规定了,同步的方法使用<code>commit</code>去提交<code>mutation</code>，异步的方法（如接口请求，完成接口请求后的操作）只能通过分发action去触发，即使用<code>dispatch</code>。</p>\n<p><img src=\"https://vuex.vuejs.org/zh-cn/images/flow.png\" alt=\"此处输入图片的描述\"></p>\n<p>这里不经吐槽2句，Vuex2的Api还是蛮人性化的，对比Redux为了用好单向数据流，不得不引入一大堆诸如<code>react-redux</code>、<code>redux-saga</code>、<code>redux-thunk</code>…，对新上手的小白来说简直是一脸蒙蔽。上面这些库所带的功能，用Vuex2都可以完成（手动骄傲），当然Vuex2也是站在这些巨人的肩膀上。</p>\n<p>下面来看下<code>vuex2</code>中关于actions的API<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">类型: &#123; [type: string]: <span class=\"built_in\">Function</span> &#125;</div><div class=\"line\"></div><div class=\"line\">在 store 上注册 action。处理函数接受一个 context 对象，包含以下属性：</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  state,     <span class=\"comment\">// 等同于 store.state, 若在模块中则为局部状态</span></div><div class=\"line\">  rootState, <span class=\"comment\">// 等同于 store.state, 只存在于模块中</span></div><div class=\"line\">  commit,    <span class=\"comment\">// 等同于 store.commit</span></div><div class=\"line\">  dispatch,  <span class=\"comment\">// 等同于 store.dispatch</span></div><div class=\"line\">  getters    <span class=\"comment\">// 等同于 store.getters</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Axios的配置\"><a href=\"#Axios的配置\" class=\"headerlink\" title=\"Axios的配置\"></a>Axios的配置</h2><p>这个是我项目内Axios的配置，主要做了下面几件事情</p>\n<ol>\n<li>5秒的超时验证</li>\n<li>POST的设置</li>\n<li>统一的response封装。我通过接口传回的CODE码去判断该请求是否正确<br>如果想去看更详细的解析可以通过<a href=\"https://ygxdxx.coding.me/2017/01/29/Axios%E7%9A%84%E9%85%8D%E7%BD%AE/\">Axios的配置</a></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">'axios'</span></div><div class=\"line\"><span class=\"keyword\">import</span> qs <span class=\"keyword\">from</span> <span class=\"string\">'qs'</span></div><div class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'./whole'</span>    <span class=\"comment\">//alert</span></div><div class=\"line\"></div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</div><div class=\"line\">axios.defaults.baseURL = <span class=\"string\">'http://xxx.xxx.com'</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//POST传参序列化</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span>)&#123;</div><div class=\"line\">    config.data = qs.stringify(config.data);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> config;</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">   _.toast(<span class=\"string\">\"错误的传参\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//code状态码200判断</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'200'</span>)&#123;</div><div class=\"line\">    _.toast(res.data.msg);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  _.toast(<span class=\"string\">\"网络异常\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> axios;</div></pre></td></tr></table></figure>\n<h2 id=\"完成一个请求操作\"><a href=\"#完成一个请求操作\" class=\"headerlink\" title=\"完成一个请求操作\"></a>完成一个请求操作</h2><p>下面介绍一个登陆action的操作，</p>\n<ol>\n<li>在接口发起请求时跳出loading</li>\n<li>接口请求成功结束loading，并保存数据进入store</li>\n<li>接口请求失败抛出异常，结束loading。</li>\n<li>返回一个Promise对象，方便继续操作。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> login = <span class=\"function\">(<span class=\"params\">&#123; commit &#125;,params</span>) =&gt;</span> &#123;</div><div class=\"line\">  _.busy();               <span class=\"comment\">//loding开始</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123; </div><div class=\"line\">    axios(&#123;</div><div class=\"line\">      <span class=\"attr\">method</span>:<span class=\"string\">'get'</span>,</div><div class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">'teacher/login'</span>,</div><div class=\"line\">      <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">moblie</span>:params.mobile,</div><div class=\"line\">        <span class=\"attr\">password</span>:params.password,</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">        commit(types.LOGIN,response.data.data); <span class=\"comment\">//获得的数据通过mutation，存入store中</span></div><div class=\"line\">        _.leave();  <span class=\"comment\">//loding结束</span></div><div class=\"line\">        resolve(response);</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</div><div class=\"line\">      _.leave();  <span class=\"comment\">//loding结束</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</div><div class=\"line\">  [types.LOGIN](state, data)&#123;</div><div class=\"line\">    state.token = data.token;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//调用action</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions,mapGetters  &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">  <span class=\"attr\">methods</span>:&#123;</div><div class=\"line\">    ...mapActions([<span class=\"string\">'login'</span>]),                   <span class=\"comment\">//注入action</span></div><div class=\"line\">    _login()&#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> params = &#123;</div><div class=\"line\">        <span class=\"attr\">mobile</span>:<span class=\"keyword\">this</span>.mobile,</div><div class=\"line\">        <span class=\"attr\">pwd</span>:<span class=\"keyword\">this</span>.password</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">this</span>.login(params).</div><div class=\"line\">      then(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">this</span>.$router.replace(<span class=\"string\">'/main/index'</span>);          <span class=\"comment\">//正确完成后进入主页</span></div><div class=\"line\">      &#125;)</div><div class=\"line\">      .catch(<span class=\"function\">(<span class=\"params\">error</span>)=&gt;</span>&#123;                                 <span class=\"comment\">//错误则清空密码文本框</span></div><div class=\"line\">          <span class=\"comment\">//可以在这里对Error进行捕获，然后根据错误类型进行相对应的处理</span></div><div class=\"line\">          <span class=\"keyword\">this</span>.pwd = <span class=\"string\">''</span>;                           </div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"一点说明\"><a href=\"#一点说明\" class=\"headerlink\" title=\"一点说明\"></a>一点说明</h2><p>因为在Vuex2中action可以直接拿到Store的值，所以我们可以通过 <code>rootState</code>这个参数拿到根的store值，通过<code>state</code>拿到当前模块中store的值<br>都没必要在从getter里拿到值，然后通过params的方式传入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> xxx = <span class=\"function\">(<span class=\"params\">&#123;state,rootState,commit&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123; </div><div class=\"line\">    axios(&#123;</div><div class=\"line\">      <span class=\"attr\">method</span>:<span class=\"string\">'get'</span>,</div><div class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">'teacher/workbook/class/exercise'</span>,</div><div class=\"line\">      <span class=\"attr\">params</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"token\"</span>:rootState.login.token,          <span class=\"comment\">//从store根中拿到数据</span></div><div class=\"line\">        <span class=\"string\">\"classCode\"</span>:state.code,                 <span class=\"comment\">//从当前模块中拿到数据</span></div><div class=\"line\">        <span class=\"string\">\"chapterId\"</span>:rootState.route.params.chapterId</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">      commit(types.WORKBOOK_CLASS_EXERCISE,response.data.data)</div><div class=\"line\">      resolve(response);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样是不是更方便我们去审查action的代码？</p>\n"},{"layout":"_posts","title":"","date":"2017-03-06T08:51:30.000Z","thumbnail":"http://okkula0y9.bkt.clouddn.com/2017_3_7_1.jpg","_content":"\n> 此项目本身有一个APP了，为了方便将APP和微信端数据打通，需要用户微信和APP用户绑定。在开发的过程中单页面的模式在微信JS API的配置踩了很多坑，特别是IOS。由于本人表述能力和篇幅有限Orz，这里只介绍关键的实现步骤和代码，有些安全的地方和路由地方处理当时比较暴力没有细化，还望交流指导。\n\n\n## 阅读需知\n- 默认您已经了解了微信授权登陆、微信JS API配置及微信支付的整体流程[微信帮助文档][1]\n- Vue2.0（[Vue][2]、[VueRouter][3]、[Vuex][4]）全家桶基本知识，能熟悉70%以上的API\n- [Axios][5]（Http请求组件）的基础知识（若不熟悉的可以看笔者的这2篇文章[axios全攻略][6],[Vuex2和Axios的配合][7]）\n本来准备写一篇的，后来在写优化的时候发现东西比较多，还是分为2篇去写吧。第一篇主要写关于权限和微信配置方面的关键点。第二篇写关于性能和代码优化上的关键点。\n\n## 技术选型\n- 移动前端Vue组件库[Vux][8]\n- [Vue][9]、[VueRouter][10]、[Vuex][11]Vue三件套\n- 路由和Vuex同步组件[Vuex-router-sync][12]\n\n**VueRouter选用的是Hash模式，避免每次都需要去注册WxConfig**\n\n## 注意\n1、有些页面比如下单页面是不能分享的，在JS API内要配置该页面分享的是一个可以通过访问的页面如系统首页\n2、该系统主要是在微信中应用的，在授权登录时，授权登陆页面会判断是否是微信内核（不得不说这节省了我一大笔开发，没有权限的时候直接往这跳就好了。简单暴力）\n3、每个关键点都能引申很多的知识，这里篇幅有限，不在详细介绍\n\n# 实现过程\n## 技术点\n1. 用户授权登陆，服务端从授权页面获取到OpenId（加密处理过的）后打开一个特定的URL（前端提供功能保存OPENID，回跳）,此页面从URL上取到URL在保存在Store中。\n2. 分享出去的页面最好都配授权页面登陆页面，在授权登陆页面的URL上可以配置自己需要回跳的页面，方便服务端有针对性的二次跳转。\n3. 接口返回状态码若为401，则表示没有权限，在Axios内跳转到登陆页面\n4. 若检测到系统内没有OpenId则跳转到授权登陆页面（防止有人把URL复制出去分享在微信中打开报错）\n\n## 登陆逻辑流程图\n![此处输入图片的描述][13]\n\n# 关键技术点\n\n## 授权登陆网址\n``` html\nhttps://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&\nredirect_uri=http%3a%2f%2fpeifei.xxxx.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.xxx.com/index&response_type=code&scope=snsapi_userinfo&state=123#wechat_redirect\n```\n网址需要实现的功能：\n- 获得OPENID传给前端(后端实现)\n- 授权登陆后能跳转到想去的页面（后端跳转后前端路由控制）\n\n## 从URL上获取OPENID\n**vue-router和vuex的共同作用**\n\n``` javascript\nimport store from '../../store'     //从根目录中引入store\n\nexport default [\n  {\n    path: '/', \n    component:R_INDEX,\n    children: [\n      {\n        path: 'index/',\n        redirect:'/'\n      }\n    ]\n  },\n  {\n    //服务端一律跳转到这个URL上\n    path: '/home/:id/:redirectUrl/', redirect: to => {\n      /**\n      * 通过dispatch触发保存openid的action\n      * 将URL上的OPENID保存到store中\n      */\n      store.dispatch({\n        type: 'setOpenId',\n        amount: to.params.id\n      })\n      //在回跳到需要来访的正确页面\n      return `/${to.params.redirectUrl}/`\n    }\n  }\n]\n```\n\n## 接口的处理\n**axios、vuex的使用结合**\n此部分需要`Promise`和`Axios`的知识，若不熟悉请参阅笔者这2篇文章\n1. [axios全攻略][14]\n2. [Vuex2和Axios的配合][15]\n\n### 基本设置\n``` javascript\n/* \n*  1.超时处理\n*  2.post设置\n*  3.开发环境与正式环境的区别\n*/\naxios.defaults.timeout = 5000\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'\naxios.defaults.baseURL =  (process.env.NODE_ENV == 'development' ? 'http://192.168.1.15:8080/' : 'http://www.xxxx.com/')\n```\n### 全局请求处理\n\n``` javascript\n/* \n*  1.请求拦截，全局增加token\n*  2.post设置\n*/\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post' || config.method  === 'put' ){\n    //这里使用了qs这个库去序列化数据\n    config.data = qs.parse(config.data,{arrayFormat:'brackets'})\n  }\n  //全局追加openid\n  config.params = (\n      Object.assign((config.params ? config.params : {}),{\"SESSION\":store.state.common.openid})\n  )\n  return config\n},(error) =>{\n  Vue.$vux.toast.show({text: '非法输入',type:'text',time:1000})\n  return Promise.reject(error)\n})\n```\n\n### 全局接收处理\n``` javascript\n/* \n*  1.正确请求接口后，接口内返回的code若不为20000（前后端接口的规定），则表示是错误的参数\n*  2.若接口报错，并且报错的http状态码为401（前后端接口的规定）则表示用户没有该接口的权限，\n*  跳转到登陆页面\n*/\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '20000'){\n    Vue.$vux.toast.show({text:res.data.message,type:'text',time:1000})\n    return Promise.reject(res)\n  }\n  return res;\n}, (error) => {\n  if(error.response){\n    switch (error.response.status){\n      case 401:\n        window.location.href = `http://${window.document.location.host}/?#/login/`\n        break\n      default:\n        Vue.$vux.toast.show({text:'网络异常',type:'text',time:1000})\n    }\n  }\n  return Promise.reject(error)\n})\n```\n## 页面合法性检查\n因为整套环境都是由前端去控制页面路由，这里有很多地方需要我们去做权限的验证完善程序的健壮性，这对前端的考验很大。\n虽然分享出去的页面处理比较暴力都是授权的链接，还是担心有人会复制URL出去在微信中打开所以需要做以下处理。\n\n1. 验证是否在微信端\n2. store中是否存在openid，是否授权登陆后的进来的\n3. 无权限操作的页面应该能返回正确的地方\n\n### 检测是否授权登陆\n我将授权登陆后的openid存在了store中，所以每次进行**路由跳转**的时候我只要检测store中是否存在openid若不存在则直接跳转到授权登录页面，授权登陆后服务端判断此openid是否存在，若存在则跳转到来访页面，不存在则跳转到login页面。\n\n``` javascript\nrouter.beforeEach((to, from, next) => {\n  if(store.state.common.openId){\n    next();\n  }else{\n    window.location.href=\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&redirect_uri=http%3a%2f%2fpeifei.qmant.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.qmant.com/index&response_type=code&scope=snsapi_userinfo&state=123#wechat_redirect\"\n  }\n})\n```\n\n### 是否在微信端\n授权登陆页面会检测，若不在微信端会提示如下。\n![此处输入图片的描述][16]\n\n### 无权限页面\n后端openid进行检测，若是无效的或者不对的openid会在请求接口的时候返回401，接口接收到401后，会跳转到登陆注册页面。\n\n## 微信支付的坑\n> 在遇到这个问题时困扰了好久，然后这篇博文[开发单页应用(SPA)时候遇到的微信支付授权目录的坑][17]给了我指导，在此感谢作者\n\n### 路由模式\n前端技术选型用的vuejs+vue-router，vue-router使用hashbang模式（使用hashbang也是为了避免微信jssdk的wx.config签名的坑）。在调用微信支付的时候(IOS)遇到提示\"URL未注册\"，这通常是因为没有在微信支付后台正确配置授权目录的问题，但是我遇到并不是这个。\n我在调试的时候发现唤起微信支付时，IOS内打印日志中的URL和实际中的URL不一样安卓却是好的，我不知道是不是微信的BUG。后来在网上搜寻答案，发现是下面这个问题：\n\n### 问题原因\n首先把当前页面叫做`Current Page`。当我们从微信别的地方点击链接呼出微信浏览器时所落在的页面、或者点击微信浏览器的刷新按钮时所刷新的页面，我们叫做`Landing Page`。\n举个例子，我们从任何地方点击链接进入页面A，然后依次浏览到B、C、D，那么Current Page就是D，而Landing Page是A，如果此时我们在D页面点击一下浏览器的刷新按钮，那么Landing Page就变成了D（以上均是在单页应用的环境下，即以hashbang模式通过js更改浏览器路径，直接href跳转的不算）。\n\n问题来了，在iOS和安卓下呼出微信支付的时候，微信支付判断当前路径的规则分别是：\n\nIOS：Landing Page\n安卓：Current Page\n\n这就意味着，在ios环境下，任何一个页面都有可能成为支付页面（因为我无法预知和控制用户在哪个页面点微信浏览器的刷新按钮，或是用户通过哪个连接从外部进入到系统）。\n\n### 解决\n``` html\n3个页面用到微信支付：\nhttp://example.com/#/cart/index\nhttp://example.com/#/order/orderlist\nhttp://example.com/#/order/orderinfo\n```\n上述的3个链接根本不行啊，因为微信授权目录必须配置到最后一级目录，配置在根目录不行。\n\n将所有的路由#前加了一个？，于是微信浏览器妥妥的把井号“#”后面的内容给去掉了\n``` html\n原来路由链接：\nhttp://example.com/#/cart/index\n现在路由链接：\nhttp://example.com/?#/cart/index\n```\n我们只要将授权目录设置到根目录`http://example.com/`即可\n\n\n  [1]: https://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html\n  [2]: http://cn.vuejs.org/guide/\n  [3]: http://vuex.vuejs.org/zh-cn/index.html\n  [4]: http://vuex.vuejs.org/zh-cn/index.html\n  [5]: https://github.com/mzabriskie/axios\n  [6]: https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\n  [7]: https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\n  [8]: https://vux.li/#/\n  [9]: http://cn.vuejs.org/guide/\n  [10]: http://vuex.vuejs.org/zh-cn/index.html\n  [11]: http://vuex.vuejs.org/zh-cn/index.html\n  [12]: https://github.com/vuejs/vuex-router-sync\n  [13]: http://okkula0y9.bkt.clouddn.com/wvue17_3_5.jpg\n  [14]: https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\n  [15]: https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\n  [16]: http://okkula0y9.bkt.clouddn.com/wx_2017_3_6.jpg\n  [17]: http://blog.csdn.net/liufeng520/article/details/51354741\n\n","source":"_posts/Vue2全家桶与微信开发(一).md","raw":"---\nlayout: _posts\ntitle: ''\ndate: 2017-03-06 16:51:30\ntags: [微信开发,Vue]\nthumbnail: http://okkula0y9.bkt.clouddn.com/2017_3_7_1.jpg\n---\n\n> 此项目本身有一个APP了，为了方便将APP和微信端数据打通，需要用户微信和APP用户绑定。在开发的过程中单页面的模式在微信JS API的配置踩了很多坑，特别是IOS。由于本人表述能力和篇幅有限Orz，这里只介绍关键的实现步骤和代码，有些安全的地方和路由地方处理当时比较暴力没有细化，还望交流指导。\n\n\n## 阅读需知\n- 默认您已经了解了微信授权登陆、微信JS API配置及微信支付的整体流程[微信帮助文档][1]\n- Vue2.0（[Vue][2]、[VueRouter][3]、[Vuex][4]）全家桶基本知识，能熟悉70%以上的API\n- [Axios][5]（Http请求组件）的基础知识（若不熟悉的可以看笔者的这2篇文章[axios全攻略][6],[Vuex2和Axios的配合][7]）\n本来准备写一篇的，后来在写优化的时候发现东西比较多，还是分为2篇去写吧。第一篇主要写关于权限和微信配置方面的关键点。第二篇写关于性能和代码优化上的关键点。\n\n## 技术选型\n- 移动前端Vue组件库[Vux][8]\n- [Vue][9]、[VueRouter][10]、[Vuex][11]Vue三件套\n- 路由和Vuex同步组件[Vuex-router-sync][12]\n\n**VueRouter选用的是Hash模式，避免每次都需要去注册WxConfig**\n\n## 注意\n1、有些页面比如下单页面是不能分享的，在JS API内要配置该页面分享的是一个可以通过访问的页面如系统首页\n2、该系统主要是在微信中应用的，在授权登录时，授权登陆页面会判断是否是微信内核（不得不说这节省了我一大笔开发，没有权限的时候直接往这跳就好了。简单暴力）\n3、每个关键点都能引申很多的知识，这里篇幅有限，不在详细介绍\n\n# 实现过程\n## 技术点\n1. 用户授权登陆，服务端从授权页面获取到OpenId（加密处理过的）后打开一个特定的URL（前端提供功能保存OPENID，回跳）,此页面从URL上取到URL在保存在Store中。\n2. 分享出去的页面最好都配授权页面登陆页面，在授权登陆页面的URL上可以配置自己需要回跳的页面，方便服务端有针对性的二次跳转。\n3. 接口返回状态码若为401，则表示没有权限，在Axios内跳转到登陆页面\n4. 若检测到系统内没有OpenId则跳转到授权登陆页面（防止有人把URL复制出去分享在微信中打开报错）\n\n## 登陆逻辑流程图\n![此处输入图片的描述][13]\n\n# 关键技术点\n\n## 授权登陆网址\n``` html\nhttps://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&\nredirect_uri=http%3a%2f%2fpeifei.xxxx.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.xxx.com/index&response_type=code&scope=snsapi_userinfo&state=123#wechat_redirect\n```\n网址需要实现的功能：\n- 获得OPENID传给前端(后端实现)\n- 授权登陆后能跳转到想去的页面（后端跳转后前端路由控制）\n\n## 从URL上获取OPENID\n**vue-router和vuex的共同作用**\n\n``` javascript\nimport store from '../../store'     //从根目录中引入store\n\nexport default [\n  {\n    path: '/', \n    component:R_INDEX,\n    children: [\n      {\n        path: 'index/',\n        redirect:'/'\n      }\n    ]\n  },\n  {\n    //服务端一律跳转到这个URL上\n    path: '/home/:id/:redirectUrl/', redirect: to => {\n      /**\n      * 通过dispatch触发保存openid的action\n      * 将URL上的OPENID保存到store中\n      */\n      store.dispatch({\n        type: 'setOpenId',\n        amount: to.params.id\n      })\n      //在回跳到需要来访的正确页面\n      return `/${to.params.redirectUrl}/`\n    }\n  }\n]\n```\n\n## 接口的处理\n**axios、vuex的使用结合**\n此部分需要`Promise`和`Axios`的知识，若不熟悉请参阅笔者这2篇文章\n1. [axios全攻略][14]\n2. [Vuex2和Axios的配合][15]\n\n### 基本设置\n``` javascript\n/* \n*  1.超时处理\n*  2.post设置\n*  3.开发环境与正式环境的区别\n*/\naxios.defaults.timeout = 5000\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8'\naxios.defaults.baseURL =  (process.env.NODE_ENV == 'development' ? 'http://192.168.1.15:8080/' : 'http://www.xxxx.com/')\n```\n### 全局请求处理\n\n``` javascript\n/* \n*  1.请求拦截，全局增加token\n*  2.post设置\n*/\naxios.interceptors.request.use((config) => {\n  if(config.method  === 'post' || config.method  === 'put' ){\n    //这里使用了qs这个库去序列化数据\n    config.data = qs.parse(config.data,{arrayFormat:'brackets'})\n  }\n  //全局追加openid\n  config.params = (\n      Object.assign((config.params ? config.params : {}),{\"SESSION\":store.state.common.openid})\n  )\n  return config\n},(error) =>{\n  Vue.$vux.toast.show({text: '非法输入',type:'text',time:1000})\n  return Promise.reject(error)\n})\n```\n\n### 全局接收处理\n``` javascript\n/* \n*  1.正确请求接口后，接口内返回的code若不为20000（前后端接口的规定），则表示是错误的参数\n*  2.若接口报错，并且报错的http状态码为401（前后端接口的规定）则表示用户没有该接口的权限，\n*  跳转到登陆页面\n*/\naxios.interceptors.response.use((res) =>{\n  if(res.data.code != '20000'){\n    Vue.$vux.toast.show({text:res.data.message,type:'text',time:1000})\n    return Promise.reject(res)\n  }\n  return res;\n}, (error) => {\n  if(error.response){\n    switch (error.response.status){\n      case 401:\n        window.location.href = `http://${window.document.location.host}/?#/login/`\n        break\n      default:\n        Vue.$vux.toast.show({text:'网络异常',type:'text',time:1000})\n    }\n  }\n  return Promise.reject(error)\n})\n```\n## 页面合法性检查\n因为整套环境都是由前端去控制页面路由，这里有很多地方需要我们去做权限的验证完善程序的健壮性，这对前端的考验很大。\n虽然分享出去的页面处理比较暴力都是授权的链接，还是担心有人会复制URL出去在微信中打开所以需要做以下处理。\n\n1. 验证是否在微信端\n2. store中是否存在openid，是否授权登陆后的进来的\n3. 无权限操作的页面应该能返回正确的地方\n\n### 检测是否授权登陆\n我将授权登陆后的openid存在了store中，所以每次进行**路由跳转**的时候我只要检测store中是否存在openid若不存在则直接跳转到授权登录页面，授权登陆后服务端判断此openid是否存在，若存在则跳转到来访页面，不存在则跳转到login页面。\n\n``` javascript\nrouter.beforeEach((to, from, next) => {\n  if(store.state.common.openId){\n    next();\n  }else{\n    window.location.href=\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&redirect_uri=http%3a%2f%2fpeifei.qmant.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.qmant.com/index&response_type=code&scope=snsapi_userinfo&state=123#wechat_redirect\"\n  }\n})\n```\n\n### 是否在微信端\n授权登陆页面会检测，若不在微信端会提示如下。\n![此处输入图片的描述][16]\n\n### 无权限页面\n后端openid进行检测，若是无效的或者不对的openid会在请求接口的时候返回401，接口接收到401后，会跳转到登陆注册页面。\n\n## 微信支付的坑\n> 在遇到这个问题时困扰了好久，然后这篇博文[开发单页应用(SPA)时候遇到的微信支付授权目录的坑][17]给了我指导，在此感谢作者\n\n### 路由模式\n前端技术选型用的vuejs+vue-router，vue-router使用hashbang模式（使用hashbang也是为了避免微信jssdk的wx.config签名的坑）。在调用微信支付的时候(IOS)遇到提示\"URL未注册\"，这通常是因为没有在微信支付后台正确配置授权目录的问题，但是我遇到并不是这个。\n我在调试的时候发现唤起微信支付时，IOS内打印日志中的URL和实际中的URL不一样安卓却是好的，我不知道是不是微信的BUG。后来在网上搜寻答案，发现是下面这个问题：\n\n### 问题原因\n首先把当前页面叫做`Current Page`。当我们从微信别的地方点击链接呼出微信浏览器时所落在的页面、或者点击微信浏览器的刷新按钮时所刷新的页面，我们叫做`Landing Page`。\n举个例子，我们从任何地方点击链接进入页面A，然后依次浏览到B、C、D，那么Current Page就是D，而Landing Page是A，如果此时我们在D页面点击一下浏览器的刷新按钮，那么Landing Page就变成了D（以上均是在单页应用的环境下，即以hashbang模式通过js更改浏览器路径，直接href跳转的不算）。\n\n问题来了，在iOS和安卓下呼出微信支付的时候，微信支付判断当前路径的规则分别是：\n\nIOS：Landing Page\n安卓：Current Page\n\n这就意味着，在ios环境下，任何一个页面都有可能成为支付页面（因为我无法预知和控制用户在哪个页面点微信浏览器的刷新按钮，或是用户通过哪个连接从外部进入到系统）。\n\n### 解决\n``` html\n3个页面用到微信支付：\nhttp://example.com/#/cart/index\nhttp://example.com/#/order/orderlist\nhttp://example.com/#/order/orderinfo\n```\n上述的3个链接根本不行啊，因为微信授权目录必须配置到最后一级目录，配置在根目录不行。\n\n将所有的路由#前加了一个？，于是微信浏览器妥妥的把井号“#”后面的内容给去掉了\n``` html\n原来路由链接：\nhttp://example.com/#/cart/index\n现在路由链接：\nhttp://example.com/?#/cart/index\n```\n我们只要将授权目录设置到根目录`http://example.com/`即可\n\n\n  [1]: https://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html\n  [2]: http://cn.vuejs.org/guide/\n  [3]: http://vuex.vuejs.org/zh-cn/index.html\n  [4]: http://vuex.vuejs.org/zh-cn/index.html\n  [5]: https://github.com/mzabriskie/axios\n  [6]: https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\n  [7]: https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\n  [8]: https://vux.li/#/\n  [9]: http://cn.vuejs.org/guide/\n  [10]: http://vuex.vuejs.org/zh-cn/index.html\n  [11]: http://vuex.vuejs.org/zh-cn/index.html\n  [12]: https://github.com/vuejs/vuex-router-sync\n  [13]: http://okkula0y9.bkt.clouddn.com/wvue17_3_5.jpg\n  [14]: https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\n  [15]: https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\n  [16]: http://okkula0y9.bkt.clouddn.com/wx_2017_3_6.jpg\n  [17]: http://blog.csdn.net/liufeng520/article/details/51354741\n\n","slug":"Vue2全家桶与微信开发(一)","published":1,"updated":"2017-03-07T05:34:03.000Z","comments":1,"photos":[],"link":"","_id":"cizz42kvy0000ocpsp97mam23","content":"<blockquote>\n<p>此项目本身有一个APP了，为了方便将APP和微信端数据打通，需要用户微信和APP用户绑定。在开发的过程中单页面的模式在微信JS API的配置踩了很多坑，特别是IOS。由于本人表述能力和篇幅有限Orz，这里只介绍关键的实现步骤和代码，有些安全的地方和路由地方处理当时比较暴力没有细化，还望交流指导。</p>\n</blockquote>\n<h2 id=\"阅读需知\"><a href=\"#阅读需知\" class=\"headerlink\" title=\"阅读需知\"></a>阅读需知</h2><ul>\n<li>默认您已经了解了微信授权登陆、微信JS API配置及微信支付的整体流程<a href=\"https://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html\" target=\"_blank\" rel=\"external\">微信帮助文档</a></li>\n<li>Vue2.0（<a href=\"http://cn.vuejs.org/guide/\" target=\"_blank\" rel=\"external\">Vue</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">VueRouter</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">Vuex</a>）全家桶基本知识，能熟悉70%以上的API</li>\n<li><a href=\"https://github.com/mzabriskie/axios\" target=\"_blank\" rel=\"external\">Axios</a>（Http请求组件）的基础知识（若不熟悉的可以看笔者的这2篇文章<a href=\"https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\">axios全攻略</a>,<a href=\"https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\">Vuex2和Axios的配合</a>）<br>本来准备写一篇的，后来在写优化的时候发现东西比较多，还是分为2篇去写吧。第一篇主要写关于权限和微信配置方面的关键点。第二篇写关于性能和代码优化上的关键点。</li>\n</ul>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><ul>\n<li>移动前端Vue组件库<a href=\"https://vux.li/#/\" target=\"_blank\" rel=\"external\">Vux</a></li>\n<li><a href=\"http://cn.vuejs.org/guide/\" target=\"_blank\" rel=\"external\">Vue</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">VueRouter</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\" target=\"_blank\" rel=\"external\">Vuex</a>Vue三件套</li>\n<li>路由和Vuex同步组件<a href=\"https://github.com/vuejs/vuex-router-sync\" target=\"_blank\" rel=\"external\">Vuex-router-sync</a></li>\n</ul>\n<p><strong>VueRouter选用的是Hash模式，避免每次都需要去注册WxConfig</strong></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1、有些页面比如下单页面是不能分享的，在JS API内要配置该页面分享的是一个可以通过访问的页面如系统首页<br>2、该系统主要是在微信中应用的，在授权登录时，授权登陆页面会判断是否是微信内核（不得不说这节省了我一大笔开发，没有权限的时候直接往这跳就好了。简单暴力）<br>3、每个关键点都能引申很多的知识，这里篇幅有限，不在详细介绍</p>\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><h2 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h2><ol>\n<li>用户授权登陆，服务端从授权页面获取到OpenId（加密处理过的）后打开一个特定的URL（前端提供功能保存OPENID，回跳）,此页面从URL上取到URL在保存在Store中。</li>\n<li>分享出去的页面最好都配授权页面登陆页面，在授权登陆页面的URL上可以配置自己需要回跳的页面，方便服务端有针对性的二次跳转。</li>\n<li>接口返回状态码若为401，则表示没有权限，在Axios内跳转到登陆页面</li>\n<li>若检测到系统内没有OpenId则跳转到授权登陆页面（防止有人把URL复制出去分享在微信中打开报错）</li>\n</ol>\n<h2 id=\"登陆逻辑流程图\"><a href=\"#登陆逻辑流程图\" class=\"headerlink\" title=\"登陆逻辑流程图\"></a>登陆逻辑流程图</h2><p><img src=\"http://okkula0y9.bkt.clouddn.com/wvue17_3_5.jpg\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"关键技术点\"><a href=\"#关键技术点\" class=\"headerlink\" title=\"关键技术点\"></a>关键技术点</h1><h2 id=\"授权登陆网址\"><a href=\"#授权登陆网址\" class=\"headerlink\" title=\"授权登陆网址\"></a>授权登陆网址</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&amp;</div><div class=\"line\">redirect_uri=http%3a%2f%2fpeifei.xxxx.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.xxx.com/index&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect</div></pre></td></tr></table></figure>\n<p>网址需要实现的功能：</p>\n<ul>\n<li>获得OPENID传给前端(后端实现)</li>\n<li>授权登陆后能跳转到想去的页面（后端跳转后前端路由控制）</li>\n</ul>\n<h2 id=\"从URL上获取OPENID\"><a href=\"#从URL上获取OPENID\" class=\"headerlink\" title=\"从URL上获取OPENID\"></a>从URL上获取OPENID</h2><p><strong>vue-router和vuex的共同作用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../../store'</span>     <span class=\"comment\">//从根目录中引入store</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, </div><div class=\"line\">    <span class=\"attr\">component</span>:R_INDEX,</div><div class=\"line\">    <span class=\"attr\">children</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'index/'</span>,</div><div class=\"line\">        <span class=\"attr\">redirect</span>:<span class=\"string\">'/'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//服务端一律跳转到这个URL上</span></div><div class=\"line\">    path: <span class=\"string\">'/home/:id/:redirectUrl/'</span>, <span class=\"attr\">redirect</span>: <span class=\"function\"><span class=\"params\">to</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\">      * 通过dispatch触发保存openid的action</div><div class=\"line\">      * 将URL上的OPENID保存到store中</div><div class=\"line\">      */</div><div class=\"line\">      store.dispatch(&#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'setOpenId'</span>,</div><div class=\"line\">        <span class=\"attr\">amount</span>: to.params.id</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"comment\">//在回跳到需要来访的正确页面</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;to.params.redirectUrl&#125;</span>/`</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"接口的处理\"><a href=\"#接口的处理\" class=\"headerlink\" title=\"接口的处理\"></a>接口的处理</h2><p><strong>axios、vuex的使用结合</strong><br>此部分需要<code>Promise</code>和<code>Axios</code>的知识，若不熟悉请参阅笔者这2篇文章</p>\n<ol>\n<li><a href=\"https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\">axios全攻略</a></li>\n<li><a href=\"https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\">Vuex2和Axios的配合</a></li>\n</ol>\n<h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">*  1.超时处理</div><div class=\"line\">*  2.post设置</div><div class=\"line\">*  3.开发环境与正式环境的区别</div><div class=\"line\">*/</div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span></div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span></div><div class=\"line\">axios.defaults.baseURL =  (process.env.NODE_ENV == <span class=\"string\">'development'</span> ? <span class=\"string\">'http://192.168.1.15:8080/'</span> : <span class=\"string\">'http://www.xxxx.com/'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"全局请求处理\"><a href=\"#全局请求处理\" class=\"headerlink\" title=\"全局请求处理\"></a>全局请求处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">*  1.请求拦截，全局增加token</div><div class=\"line\">*  2.post设置</div><div class=\"line\">*/</div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span> || config.method  === <span class=\"string\">'put'</span> )&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用了qs这个库去序列化数据</span></div><div class=\"line\">    config.data = qs.parse(config.data,&#123;<span class=\"attr\">arrayFormat</span>:<span class=\"string\">'brackets'</span>&#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//全局追加openid</span></div><div class=\"line\">  config.params = (</div><div class=\"line\">      <span class=\"built_in\">Object</span>.assign((config.params ? config.params : &#123;&#125;),&#123;<span class=\"string\">\"SESSION\"</span>:store.state.common.openid&#125;)</div><div class=\"line\">  )</div><div class=\"line\">  <span class=\"keyword\">return</span> config</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">  Vue.$vux.toast.show(&#123;<span class=\"attr\">text</span>: <span class=\"string\">'非法输入'</span>,<span class=\"attr\">type</span>:<span class=\"string\">'text'</span>,<span class=\"attr\">time</span>:<span class=\"number\">1000</span>&#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"全局接收处理\"><a href=\"#全局接收处理\" class=\"headerlink\" title=\"全局接收处理\"></a>全局接收处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </span></div><div class=\"line\">*  1.正确请求接口后，接口内返回的code若不为20000（前后端接口的规定），则表示是错误的参数</div><div class=\"line\">*  2.若接口报错，并且报错的http状态码为401（前后端接口的规定）则表示用户没有该接口的权限，</div><div class=\"line\">*  跳转到登陆页面</div><div class=\"line\">*/</div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'20000'</span>)&#123;</div><div class=\"line\">    Vue.$vux.toast.show(&#123;<span class=\"attr\">text</span>:res.data.message,<span class=\"attr\">type</span>:<span class=\"string\">'text'</span>,<span class=\"attr\">time</span>:<span class=\"number\">1000</span>&#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(error.response)&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (error.response.status)&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</div><div class=\"line\">        <span class=\"built_in\">window</span>.location.href = <span class=\"string\">`http://<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.<span class=\"built_in\">document</span>.location.host&#125;</span>/?#/login/`</span></div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        Vue.$vux.toast.show(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'网络异常'</span>,<span class=\"attr\">type</span>:<span class=\"string\">'text'</span>,<span class=\"attr\">time</span>:<span class=\"number\">1000</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"页面合法性检查\"><a href=\"#页面合法性检查\" class=\"headerlink\" title=\"页面合法性检查\"></a>页面合法性检查</h2><p>因为整套环境都是由前端去控制页面路由，这里有很多地方需要我们去做权限的验证完善程序的健壮性，这对前端的考验很大。<br>虽然分享出去的页面处理比较暴力都是授权的链接，还是担心有人会复制URL出去在微信中打开所以需要做以下处理。</p>\n<ol>\n<li>验证是否在微信端</li>\n<li>store中是否存在openid，是否授权登陆后的进来的</li>\n<li>无权限操作的页面应该能返回正确的地方</li>\n</ol>\n<h3 id=\"检测是否授权登陆\"><a href=\"#检测是否授权登陆\" class=\"headerlink\" title=\"检测是否授权登陆\"></a>检测是否授权登陆</h3><p>我将授权登陆后的openid存在了store中，所以每次进行<strong>路由跳转</strong>的时候我只要检测store中是否存在openid若不存在则直接跳转到授权登录页面，授权登陆后服务端判断此openid是否存在，若存在则跳转到来访页面，不存在则跳转到login页面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(store.state.common.openId)&#123;</div><div class=\"line\">    next();</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&amp;redirect_uri=http%3a%2f%2fpeifei.qmant.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.qmant.com/index&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"是否在微信端\"><a href=\"#是否在微信端\" class=\"headerlink\" title=\"是否在微信端\"></a>是否在微信端</h3><p>授权登陆页面会检测，若不在微信端会提示如下。<br><img src=\"http://okkula0y9.bkt.clouddn.com/wx_2017_3_6.jpg\" alt=\"此处输入图片的描述\"></p>\n<h3 id=\"无权限页面\"><a href=\"#无权限页面\" class=\"headerlink\" title=\"无权限页面\"></a>无权限页面</h3><p>后端openid进行检测，若是无效的或者不对的openid会在请求接口的时候返回401，接口接收到401后，会跳转到登陆注册页面。</p>\n<h2 id=\"微信支付的坑\"><a href=\"#微信支付的坑\" class=\"headerlink\" title=\"微信支付的坑\"></a>微信支付的坑</h2><blockquote>\n<p>在遇到这个问题时困扰了好久，然后这篇博文<a href=\"http://blog.csdn.net/liufeng520/article/details/51354741\" target=\"_blank\" rel=\"external\">开发单页应用(SPA)时候遇到的微信支付授权目录的坑</a>给了我指导，在此感谢作者</p>\n</blockquote>\n<h3 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h3><p>前端技术选型用的vuejs+vue-router，vue-router使用hashbang模式（使用hashbang也是为了避免微信jssdk的wx.config签名的坑）。在调用微信支付的时候(IOS)遇到提示”URL未注册”，这通常是因为没有在微信支付后台正确配置授权目录的问题，但是我遇到并不是这个。<br>我在调试的时候发现唤起微信支付时，IOS内打印日志中的URL和实际中的URL不一样安卓却是好的，我不知道是不是微信的BUG。后来在网上搜寻答案，发现是下面这个问题：</p>\n<h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>首先把当前页面叫做<code>Current Page</code>。当我们从微信别的地方点击链接呼出微信浏览器时所落在的页面、或者点击微信浏览器的刷新按钮时所刷新的页面，我们叫做<code>Landing Page</code>。<br>举个例子，我们从任何地方点击链接进入页面A，然后依次浏览到B、C、D，那么Current Page就是D，而Landing Page是A，如果此时我们在D页面点击一下浏览器的刷新按钮，那么Landing Page就变成了D（以上均是在单页应用的环境下，即以hashbang模式通过js更改浏览器路径，直接href跳转的不算）。</p>\n<p>问题来了，在iOS和安卓下呼出微信支付的时候，微信支付判断当前路径的规则分别是：</p>\n<p>IOS：Landing Page<br>安卓：Current Page</p>\n<p>这就意味着，在ios环境下，任何一个页面都有可能成为支付页面（因为我无法预知和控制用户在哪个页面点微信浏览器的刷新按钮，或是用户通过哪个连接从外部进入到系统）。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">3个页面用到微信支付：</div><div class=\"line\">http://example.com/#/cart/index</div><div class=\"line\">http://example.com/#/order/orderlist</div><div class=\"line\">http://example.com/#/order/orderinfo</div></pre></td></tr></table></figure>\n<p>上述的3个链接根本不行啊，因为微信授权目录必须配置到最后一级目录，配置在根目录不行。</p>\n<p>将所有的路由#前加了一个？，于是微信浏览器妥妥的把井号“#”后面的内容给去掉了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">原来路由链接：</div><div class=\"line\">http://example.com/#/cart/index</div><div class=\"line\">现在路由链接：</div><div class=\"line\">http://example.com/?#/cart/index</div></pre></td></tr></table></figure></p>\n<p>我们只要将授权目录设置到根目录<code>http://example.com/</code>即可</p>\n","excerpt":"","more":"<blockquote>\n<p>此项目本身有一个APP了，为了方便将APP和微信端数据打通，需要用户微信和APP用户绑定。在开发的过程中单页面的模式在微信JS API的配置踩了很多坑，特别是IOS。由于本人表述能力和篇幅有限Orz，这里只介绍关键的实现步骤和代码，有些安全的地方和路由地方处理当时比较暴力没有细化，还望交流指导。</p>\n</blockquote>\n<h2 id=\"阅读需知\"><a href=\"#阅读需知\" class=\"headerlink\" title=\"阅读需知\"></a>阅读需知</h2><ul>\n<li>默认您已经了解了微信授权登陆、微信JS API配置及微信支付的整体流程<a href=\"https://mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html\">微信帮助文档</a></li>\n<li>Vue2.0（<a href=\"http://cn.vuejs.org/guide/\">Vue</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\">VueRouter</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\">Vuex</a>）全家桶基本知识，能熟悉70%以上的API</li>\n<li><a href=\"https://github.com/mzabriskie/axios\">Axios</a>（Http请求组件）的基础知识（若不熟悉的可以看笔者的这2篇文章<a href=\"https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\">axios全攻略</a>,<a href=\"https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\">Vuex2和Axios的配合</a>）<br>本来准备写一篇的，后来在写优化的时候发现东西比较多，还是分为2篇去写吧。第一篇主要写关于权限和微信配置方面的关键点。第二篇写关于性能和代码优化上的关键点。</li>\n</ul>\n<h2 id=\"技术选型\"><a href=\"#技术选型\" class=\"headerlink\" title=\"技术选型\"></a>技术选型</h2><ul>\n<li>移动前端Vue组件库<a href=\"https://vux.li/#/\">Vux</a></li>\n<li><a href=\"http://cn.vuejs.org/guide/\">Vue</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\">VueRouter</a>、<a href=\"http://vuex.vuejs.org/zh-cn/index.html\">Vuex</a>Vue三件套</li>\n<li>路由和Vuex同步组件<a href=\"https://github.com/vuejs/vuex-router-sync\">Vuex-router-sync</a></li>\n</ul>\n<p><strong>VueRouter选用的是Hash模式，避免每次都需要去注册WxConfig</strong></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>1、有些页面比如下单页面是不能分享的，在JS API内要配置该页面分享的是一个可以通过访问的页面如系统首页<br>2、该系统主要是在微信中应用的，在授权登录时，授权登陆页面会判断是否是微信内核（不得不说这节省了我一大笔开发，没有权限的时候直接往这跳就好了。简单暴力）<br>3、每个关键点都能引申很多的知识，这里篇幅有限，不在详细介绍</p>\n<h1 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h1><h2 id=\"技术点\"><a href=\"#技术点\" class=\"headerlink\" title=\"技术点\"></a>技术点</h2><ol>\n<li>用户授权登陆，服务端从授权页面获取到OpenId（加密处理过的）后打开一个特定的URL（前端提供功能保存OPENID，回跳）,此页面从URL上取到URL在保存在Store中。</li>\n<li>分享出去的页面最好都配授权页面登陆页面，在授权登陆页面的URL上可以配置自己需要回跳的页面，方便服务端有针对性的二次跳转。</li>\n<li>接口返回状态码若为401，则表示没有权限，在Axios内跳转到登陆页面</li>\n<li>若检测到系统内没有OpenId则跳转到授权登陆页面（防止有人把URL复制出去分享在微信中打开报错）</li>\n</ol>\n<h2 id=\"登陆逻辑流程图\"><a href=\"#登陆逻辑流程图\" class=\"headerlink\" title=\"登陆逻辑流程图\"></a>登陆逻辑流程图</h2><p><img src=\"http://okkula0y9.bkt.clouddn.com/wvue17_3_5.jpg\" alt=\"此处输入图片的描述\"></p>\n<h1 id=\"关键技术点\"><a href=\"#关键技术点\" class=\"headerlink\" title=\"关键技术点\"></a>关键技术点</h1><h2 id=\"授权登陆网址\"><a href=\"#授权登陆网址\" class=\"headerlink\" title=\"授权登陆网址\"></a>授权登陆网址</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&amp;</div><div class=\"line\">redirect_uri=http%3a%2f%2fpeifei.xxxx.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.xxx.com/index&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect</div></pre></td></tr></table></figure>\n<p>网址需要实现的功能：</p>\n<ul>\n<li>获得OPENID传给前端(后端实现)</li>\n<li>授权登陆后能跳转到想去的页面（后端跳转后前端路由控制）</li>\n</ul>\n<h2 id=\"从URL上获取OPENID\"><a href=\"#从URL上获取OPENID\" class=\"headerlink\" title=\"从URL上获取OPENID\"></a>从URL上获取OPENID</h2><p><strong>vue-router和vuex的共同作用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">'../../store'</span>     <span class=\"comment\">//从根目录中引入store</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">'/'</span>, </div><div class=\"line\">    <span class=\"attr\">component</span>:R_INDEX,</div><div class=\"line\">    <span class=\"attr\">children</span>: [</div><div class=\"line\">      &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">'index/'</span>,</div><div class=\"line\">        <span class=\"attr\">redirect</span>:<span class=\"string\">'/'</span></div><div class=\"line\">      &#125;</div><div class=\"line\">    ]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"comment\">//服务端一律跳转到这个URL上</span></div><div class=\"line\">    path: <span class=\"string\">'/home/:id/:redirectUrl/'</span>, <span class=\"attr\">redirect</span>: <span class=\"function\"><span class=\"params\">to</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">/**</div><div class=\"line\">      * 通过dispatch触发保存openid的action</div><div class=\"line\">      * 将URL上的OPENID保存到store中</div><div class=\"line\">      */</span></div><div class=\"line\">      store.dispatch(&#123;</div><div class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">'setOpenId'</span>,</div><div class=\"line\">        <span class=\"attr\">amount</span>: to.params.id</div><div class=\"line\">      &#125;)</div><div class=\"line\">      <span class=\"comment\">//在回跳到需要来访的正确页面</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">`/<span class=\"subst\">$&#123;to.params.redirectUrl&#125;</span>/`</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<h2 id=\"接口的处理\"><a href=\"#接口的处理\" class=\"headerlink\" title=\"接口的处理\"></a>接口的处理</h2><p><strong>axios、vuex的使用结合</strong><br>此部分需要<code>Promise</code>和<code>Axios</code>的知识，若不熟悉请参阅笔者这2篇文章</p>\n<ol>\n<li><a href=\"https://ygxdxx.coding.me/2017/02/27/axios%E5%85%A8%E6%94%BB%E7%95%A5/\">axios全攻略</a></li>\n<li><a href=\"https://ygxdxx.coding.me/2017/02/01/Vuex2%E4%B8%8EAxios%E5%BC%80%E5%8F%91/\">Vuex2和Axios的配合</a></li>\n</ol>\n<h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">*  1.超时处理</div><div class=\"line\">*  2.post设置</div><div class=\"line\">*  3.开发环境与正式环境的区别</div><div class=\"line\">*/</span></div><div class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span></div><div class=\"line\">axios.defaults.headers.post[<span class=\"string\">'Content-Type'</span>] = <span class=\"string\">'application/x-www-form-urlencoded;charset=UTF-8'</span></div><div class=\"line\">axios.defaults.baseURL =  (process.env.NODE_ENV == <span class=\"string\">'development'</span> ? <span class=\"string\">'http://192.168.1.15:8080/'</span> : <span class=\"string\">'http://www.xxxx.com/'</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"全局请求处理\"><a href=\"#全局请求处理\" class=\"headerlink\" title=\"全局请求处理\"></a>全局请求处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">*  1.请求拦截，全局增加token</div><div class=\"line\">*  2.post设置</div><div class=\"line\">*/</span></div><div class=\"line\">axios.interceptors.request.use(<span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(config.method  === <span class=\"string\">'post'</span> || config.method  === <span class=\"string\">'put'</span> )&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用了qs这个库去序列化数据</span></div><div class=\"line\">    config.data = qs.parse(config.data,&#123;<span class=\"attr\">arrayFormat</span>:<span class=\"string\">'brackets'</span>&#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//全局追加openid</span></div><div class=\"line\">  config.params = (</div><div class=\"line\">      <span class=\"built_in\">Object</span>.assign((config.params ? config.params : &#123;&#125;),&#123;<span class=\"string\">\"SESSION\"</span>:store.state.common.openid&#125;)</div><div class=\"line\">  )</div><div class=\"line\">  <span class=\"keyword\">return</span> config</div><div class=\"line\">&#125;,(error) =&gt;&#123;</div><div class=\"line\">  Vue.$vux.toast.show(&#123;<span class=\"attr\">text</span>: <span class=\"string\">'非法输入'</span>,<span class=\"attr\">type</span>:<span class=\"string\">'text'</span>,<span class=\"attr\">time</span>:<span class=\"number\">1000</span>&#125;)</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"全局接收处理\"><a href=\"#全局接收处理\" class=\"headerlink\" title=\"全局接收处理\"></a>全局接收处理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* </div><div class=\"line\">*  1.正确请求接口后，接口内返回的code若不为20000（前后端接口的规定），则表示是错误的参数</div><div class=\"line\">*  2.若接口报错，并且报错的http状态码为401（前后端接口的规定）则表示用户没有该接口的权限，</div><div class=\"line\">*  跳转到登陆页面</div><div class=\"line\">*/</span></div><div class=\"line\">axios.interceptors.response.use(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(res.data.code != <span class=\"string\">'20000'</span>)&#123;</div><div class=\"line\">    Vue.$vux.toast.show(&#123;<span class=\"attr\">text</span>:res.data.message,<span class=\"attr\">type</span>:<span class=\"string\">'text'</span>,<span class=\"attr\">time</span>:<span class=\"number\">1000</span>&#125;)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res)</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res;</div><div class=\"line\">&#125;, (error) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(error.response)&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (error.response.status)&#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">401</span>:</div><div class=\"line\">        <span class=\"built_in\">window</span>.location.href = <span class=\"string\">`http://<span class=\"subst\">$&#123;<span class=\"built_in\">window</span>.<span class=\"built_in\">document</span>.location.host&#125;</span>/?#/login/`</span></div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        Vue.$vux.toast.show(&#123;<span class=\"attr\">text</span>:<span class=\"string\">'网络异常'</span>,<span class=\"attr\">type</span>:<span class=\"string\">'text'</span>,<span class=\"attr\">time</span>:<span class=\"number\">1000</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(error)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"页面合法性检查\"><a href=\"#页面合法性检查\" class=\"headerlink\" title=\"页面合法性检查\"></a>页面合法性检查</h2><p>因为整套环境都是由前端去控制页面路由，这里有很多地方需要我们去做权限的验证完善程序的健壮性，这对前端的考验很大。<br>虽然分享出去的页面处理比较暴力都是授权的链接，还是担心有人会复制URL出去在微信中打开所以需要做以下处理。</p>\n<ol>\n<li>验证是否在微信端</li>\n<li>store中是否存在openid，是否授权登陆后的进来的</li>\n<li>无权限操作的页面应该能返回正确的地方</li>\n</ol>\n<h3 id=\"检测是否授权登陆\"><a href=\"#检测是否授权登陆\" class=\"headerlink\" title=\"检测是否授权登陆\"></a>检测是否授权登陆</h3><p>我将授权登陆后的openid存在了store中，所以每次进行<strong>路由跳转</strong>的时候我只要检测store中是否存在openid若不存在则直接跳转到授权登录页面，授权登陆后服务端判断此openid是否存在，若存在则跳转到来访页面，不存在则跳转到login页面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(store.state.common.openId)&#123;</div><div class=\"line\">    next();</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.location.href=<span class=\"string\">\"https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxf565864b6a1a358d&amp;redirect_uri=http%3a%2f%2fpeifei.qmant.com%2fnoa%2ftoken%3fpage%3dhttp%3a%2f%2fpeifei.qmant.com/index&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=123#wechat_redirect\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"是否在微信端\"><a href=\"#是否在微信端\" class=\"headerlink\" title=\"是否在微信端\"></a>是否在微信端</h3><p>授权登陆页面会检测，若不在微信端会提示如下。<br><img src=\"http://okkula0y9.bkt.clouddn.com/wx_2017_3_6.jpg\" alt=\"此处输入图片的描述\"></p>\n<h3 id=\"无权限页面\"><a href=\"#无权限页面\" class=\"headerlink\" title=\"无权限页面\"></a>无权限页面</h3><p>后端openid进行检测，若是无效的或者不对的openid会在请求接口的时候返回401，接口接收到401后，会跳转到登陆注册页面。</p>\n<h2 id=\"微信支付的坑\"><a href=\"#微信支付的坑\" class=\"headerlink\" title=\"微信支付的坑\"></a>微信支付的坑</h2><blockquote>\n<p>在遇到这个问题时困扰了好久，然后这篇博文<a href=\"http://blog.csdn.net/liufeng520/article/details/51354741\">开发单页应用(SPA)时候遇到的微信支付授权目录的坑</a>给了我指导，在此感谢作者</p>\n</blockquote>\n<h3 id=\"路由模式\"><a href=\"#路由模式\" class=\"headerlink\" title=\"路由模式\"></a>路由模式</h3><p>前端技术选型用的vuejs+vue-router，vue-router使用hashbang模式（使用hashbang也是为了避免微信jssdk的wx.config签名的坑）。在调用微信支付的时候(IOS)遇到提示”URL未注册”，这通常是因为没有在微信支付后台正确配置授权目录的问题，但是我遇到并不是这个。<br>我在调试的时候发现唤起微信支付时，IOS内打印日志中的URL和实际中的URL不一样安卓却是好的，我不知道是不是微信的BUG。后来在网上搜寻答案，发现是下面这个问题：</p>\n<h3 id=\"问题原因\"><a href=\"#问题原因\" class=\"headerlink\" title=\"问题原因\"></a>问题原因</h3><p>首先把当前页面叫做<code>Current Page</code>。当我们从微信别的地方点击链接呼出微信浏览器时所落在的页面、或者点击微信浏览器的刷新按钮时所刷新的页面，我们叫做<code>Landing Page</code>。<br>举个例子，我们从任何地方点击链接进入页面A，然后依次浏览到B、C、D，那么Current Page就是D，而Landing Page是A，如果此时我们在D页面点击一下浏览器的刷新按钮，那么Landing Page就变成了D（以上均是在单页应用的环境下，即以hashbang模式通过js更改浏览器路径，直接href跳转的不算）。</p>\n<p>问题来了，在iOS和安卓下呼出微信支付的时候，微信支付判断当前路径的规则分别是：</p>\n<p>IOS：Landing Page<br>安卓：Current Page</p>\n<p>这就意味着，在ios环境下，任何一个页面都有可能成为支付页面（因为我无法预知和控制用户在哪个页面点微信浏览器的刷新按钮，或是用户通过哪个连接从外部进入到系统）。</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">3个页面用到微信支付：</div><div class=\"line\">http://example.com/#/cart/index</div><div class=\"line\">http://example.com/#/order/orderlist</div><div class=\"line\">http://example.com/#/order/orderinfo</div></pre></td></tr></table></figure>\n<p>上述的3个链接根本不行啊，因为微信授权目录必须配置到最后一级目录，配置在根目录不行。</p>\n<p>将所有的路由#前加了一个？，于是微信浏览器妥妥的把井号“#”后面的内容给去掉了<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">原来路由链接：</div><div class=\"line\">http://example.com/#/cart/index</div><div class=\"line\">现在路由链接：</div><div class=\"line\">http://example.com/?#/cart/index</div></pre></td></tr></table></figure></p>\n<p>我们只要将授权目录设置到根目录<code>http://example.com/</code>即可</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cizxvciu60001msps73ydtu56","tag_id":"cizxvcivl0007mspsj9ecv467","_id":"cizxvcivv000bmspsb898hc1d"},{"post_id":"cizxvciun0003mspshsqtrodi","tag_id":"cizxvcivs000amspsa0566v0x","_id":"cizxvciw5000emspslk0qlxcl"},{"post_id":"cizxvciun0003mspshsqtrodi","tag_id":"cizxvcivf0006mspsed8yyva9","_id":"cizxvciw9000fmspsdkqgbhdh"},{"post_id":"cizxvcius0004mspsu8l06qez","tag_id":"cizxvciw3000dmspsbtwuzqyg","_id":"cizxvciwg000imspsboyy9dzc"},{"post_id":"cizxvcius0004mspsu8l06qez","tag_id":"cizxvciwb000gmsps3fyhnz1b","_id":"cizxvciwh000jmsps05dvklmd"},{"post_id":"cizxvciv90005mspslxadsb7y","tag_id":"cizxvciwd000hmspswhacifj5","_id":"cizxvciwn000mmspseaxdjptz"},{"post_id":"cizxvciv90005mspslxadsb7y","tag_id":"cizxvcivf0006mspsed8yyva9","_id":"cizxvciwo000nmsps8rctpyz4"},{"post_id":"cizxvciv90005mspslxadsb7y","tag_id":"cizxvciwl000lmspssm5h5w1e","_id":"cizxvciwq000omspsh9batqaq"},{"post_id":"cizz42kvy0000ocpsp97mam23","tag_id":"cizxvciue0002mspscowf3gz2","_id":"cizz42kwf0001ocpsg8xfhnry"},{"post_id":"cizz42kvy0000ocpsp97mam23","tag_id":"cizxvcivf0006mspsed8yyva9","_id":"cizz42kwh0002ocps7enhqlxa"}],"Tag":[{"name":"微信开发","_id":"cizxvciue0002mspscowf3gz2"},{"name":"Vue","_id":"cizxvcivf0006mspsed8yyva9"},{"name":"axios","_id":"cizxvcivl0007mspsj9ecv467"},{"name":"Axio","_id":"cizxvcivs000amspsa0566v0x"},{"name":"Hexo","_id":"cizxvciw3000dmspsbtwuzqyg"},{"name":"博客","_id":"cizxvciwb000gmsps3fyhnz1b"},{"name":"Vuex2","_id":"cizxvciwd000hmspswhacifj5"},{"name":"Axios","_id":"cizxvciwl000lmspssm5h5w1e"}]}}